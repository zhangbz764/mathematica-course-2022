(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1183967,      24040]
NotebookOptionsPosition[   1164113,      23719]
NotebookOutlinePosition[   1164529,      23735]
CellTagsIndexPosition[   1164486,      23732]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["neural network", "Subsection",
 CellChangeTimes->{{3.8770555764343443`*^9, 
  3.8770555810140915`*^9}},ExpressionUUID->"fe7a4a74-85dc-4919-beda-\
6d60fda050dc"],

Cell[CellGroupData[{

Cell["Linear Layer", "Subsubsection",
 CellChangeTimes->{{3.8770564708762107`*^9, 
  3.8770564776783967`*^9}},ExpressionUUID->"d30318ca-9adb-4a15-873c-\
35ecbddb517f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"linear", " ", "=", " ", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"LinearLayer", "[", 
    RowBox[{"4", ",", " ", 
     RowBox[{"\"\<Input\>\"", "->", "3"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8770561259877777`*^9, 3.877056149105461*^9}, 
   3.877056258435004*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"5805a25f-2905-4a7d-839d-27b64ee0ad94"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["LinearLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   RGBColor[0.33, 0.33, 0.33], 
                   AbsolutePointSize[5], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   RGBColor[0.33, 0.33, 0.33], 
                   AbsolutePointSize[5], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", FontWeight -> Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"OutputDimensions\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"OutputDimensions\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"OutputDimensions"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"OutputDimensions\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"OutputDimensions"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["\"4\"", "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Arrays", FontWeight -> Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Weights\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Weights\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Weights"}, InputForm]], Method -> "Preemptive",
                     PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Weights\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Weights"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Biases\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Biases\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Biases"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Biases\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Biases"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox[
                   RowBox[{"Input", " ", "Port"}], FontWeight -> Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox[
                   RowBox[{"Output", " ", "Port"}], FontWeight -> Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("LinearLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770561519345455`*^9, 3.877056259070527*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"f5deaa3b-6f0f-42a9-8f26-7f5433395d10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weights", " ", "=", " ", 
  RowBox[{"Normal", "@", 
   RowBox[{
    RowBox[{"NetExtract", "[", 
     RowBox[{"linear", ",", "\"\<Arrays\>\""}], "]"}], "[", "\"\<Weights\>\"",
     "]"}]}]}]], "Input",
 CellChangeTimes->{{3.877056170187455*^9, 3.877056192242299*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"d7e9c71b-3d25-4751-8062-d1de06043154"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.0758743286132812`"}], ",", 
     RowBox[{"-", "0.20150022208690643`"}], ",", "0.6206719279289246`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.10340899229049683`", ",", "0.45561665296554565`", ",", 
     RowBox[{"-", "0.5039419531822205`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5744291543960571`"}], ",", "0.700857400894165`", ",", 
     RowBox[{"-", "0.3531453311443329`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.16316452622413635`", ",", "0.5879393219947815`", ",", 
     RowBox[{"-", "0.45721152424812317`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.877056192714775*^9, 3.87705628201248*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"2d1fe053-5d23-4938-b10a-b5174be8d8c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"biases", "=", 
  RowBox[{"Normal", "@", 
   RowBox[{
    RowBox[{"NetExtract", "[", 
     RowBox[{"linear", ",", "\"\<Arrays\>\""}], "]"}], "[", "\"\<Biases\>\"", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.877056232478324*^9, 3.87705623247932*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"de929394-8e1b-4341-874a-b0013c0b3856"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}]], "Output",
 CellChangeTimes->{3.8770562330639906`*^9, 3.877056292058896*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"4a87c707-ba1d-4967-bed5-541898758eae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"vec", "=", 
   RowBox[{"{", 
    RowBox[{"0.", ",", "0.2", ",", ".1"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"linear", "[", "vec", "]"}]}], "Input",
 CellChangeTimes->{{3.8770562410925817`*^9, 3.8770562410925817`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"d42dd6dd-56aa-40be-a2fe-a0e2e346b40d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.02176714688539505`", ",", "0.04072913900017738`", ",", 
   "0.1048569530248642`", ",", "0.0718667060136795`"}], "}"}]], "Output",
 CellChangeTimes->{3.877056241683259*^9, 3.8770563194705935`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"140932e1-cd43-49ba-867d-a116faee49c8"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["setup", "Subsubsection",
 CellChangeTimes->{{3.8770565164767823`*^9, 
  3.877056517965297*^9}},ExpressionUUID->"8a0c8994-56ec-413c-97db-\
8d53b1611487"],

Cell["1 setup a function to create batches of samples", "Text",
 CellChangeTimes->{{3.8770564979085903`*^9, 
  3.8770565110348797`*^9}},ExpressionUUID->"2e1b276b-6449-4563-8879-\
4f1bd625fdaf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Batch", "[", "n_", "]"}], ":=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "->", 
      RowBox[{"{", 
       RowBox[{"Plus", "@@", "#"}], "}"}]}], "&"}], "/@", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"10", ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "2"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8770565548066673`*^9, 3.877056554807664*^9}, {
  3.8770565970681753`*^9, 3.8770565980276985`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"1c739626-a87b-4e1b-a672-ffcc4ef83957"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Batch", "@", "3"}]], "Input",
 CellChangeTimes->{{3.877056602068063*^9, 3.87705662574801*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"399654d9-c1e4-49a0-a4d8-e10ad0a17400"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "10"}], "}"}], "\[Rule]", 
    RowBox[{"{", "12", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"{", "7", "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"8", ",", "5"}], "}"}], "\[Rule]", 
    RowBox[{"{", "13", "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.877056608204358*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"18534869-f8c0-4b06-8e95-228d3f04789f"]
}, Open  ]],

Cell["2 create the data samples", "Text",
 CellChangeTimes->{{3.8770566417172008`*^9, 3.877056645675992*^9}, {
  3.877056865830285*^9, 
  3.8770568692531805`*^9}},ExpressionUUID->"7bab3f55-330c-4124-aafb-\
bb75a561eeee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"dataT", "=", 
    RowBox[{"Batch", "@", "100"}]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dataV", "=", 
   RowBox[{"Batch", "@", "10"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8770566501333714`*^9, 3.8770566582835407`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"68a4c4d1-cce5-4fb2-9e2f-654bdb580611"],

Cell["3 setup a net work", "Text",
 CellChangeTimes->{{3.8770567123250904`*^9, 
  3.8770567172121634`*^9}},ExpressionUUID->"ddf46d74-13fc-4254-ade9-\
7cc325b45ac2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "2", "}"}], "]"}], ",", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "1", "}"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "2", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"{", "1", "}"}]}]}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8770567227817364`*^9, 3.8770567329659977`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"48caaa7c-9a91-44a1-bb93-f5b57184c4b8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "1"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "1"}, 
                   NeuralNetworks`Private`NetChain`selected = <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    164., {108.97529296875, 113.62470703125}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770567806542654`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"086edf4c-ffcb-4918-8d86-b53d973a7892"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NetExtract", "[", 
   RowBox[{"net", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "\"\<Weights\>\""}], "}"}]}], "]"}], "//", 
  "Normal"}]], "Input",
 CellChangeTimes->{{3.8770568390051346`*^9, 3.8770568390051346`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"7ce0ec55-3df4-4e1c-8316-7869c6b60e91"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.412373423576355`", ",", "1.6613986492156982`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.29995954036712646`"}], ",", 
     RowBox[{"-", "0.6778042912483215`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.877056839737316*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"77bb9285-1ec9-4c3b-ae7e-3f50eec18a85"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "4"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770568600272784`*^9, 3.8770568600282755`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"66a13f6b-600c-4485-af9e-019d94e85b13"],

Cell[BoxData[
 RowBox[{"{", "2.6082868576049805`", "}"}]], "Output",
 CellChangeTimes->{3.8770568741650314`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"82de3489-0e72-4162-80a1-b80991d00880"]
}, Open  ]],

Cell["4 train the network", "Text",
 CellChangeTimes->{{3.877056908533349*^9, 
  3.8770569119875393`*^9}},ExpressionUUID->"f31aac2b-4ff5-45aa-ba12-\
c9661b8e137f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"netT", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "dataT", ",", "All", ",", 
     RowBox[{"ValidationSet", "->", "dataV"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8770569157336564`*^9, 3.8770569157346535`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"2ef65ea2-50b6-4152-b345-2a6ad635ddec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netT", "[", "\"\<LossPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877057013405547*^9, 3.877057013405547*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"be0000ae-d9e8-4dc8-af26-5ba791097e42"],

Cell[BoxData[
 TemplateBox[{
   GridBox[{{"", 
      ItemBox["\"rounds\"", DefaultBaseStyle -> "LabeledLabel"]}, {
      RotationBox[
       ItemBox["\"loss\"", DefaultBaseStyle -> "LabeledLabel"], BoxRotation -> 
       1.5708], 
      GraphicsBox[{
        AbsoluteThickness[1.25], {{
          Hue[0.083, 1., 1.], 
          LineBox[CompressedData["
1:eJxFWHk4lFsYR7YI2QZFjMGMSmLSLq9WklallShtZIkWSZtCki1rqYhR9m3s
y5xB3Wxp0b5IUSQhImv3zPOd+1z/eH7Pme9857zvb3ln6I5um51EhISEZgsL
CQn+//fnkLuLZZfQZ/ZSofJA7HczmPAIH5AM/kzwBli72NDn1Y18M60QWetf
PbYg8/yrlXVMC49at4fayamdX2708h7Wz4c7v/bBli67N/6jv3nU5w/CSY/d
I9rPhng+G7/uWNXtDEFrjyy+7PqHPO8G8jWHb9m8+cOL/V5X8rvfA9iNX6+5
mQ2T/TxhWq+QZ2bSMK8/4+5Di77j8DRxlqW1xAjZ/yTsdH8gvNN5hLfe7fTz
mz+9IXxw667ixhHyPh+wT+mxU5ozyks12vzpZ5cvZO0+c7o5aJS8/xykiQb3
urSP8kRGIgcTBs6D0at3um5mY+Q8F6C6uTPpbswYz/CdkO/a/otwyj1U1P7n
GDmfH2h6iqdULB/n7S53mTTQdwmWPXTvuhw9Ts57GTZbrYoK6hrnBd16feVW
rz+8HTxt3QMT5PwBMORHf2kcM8ErOrty6pqeQGhpdFDY1z1B7nMFnkffZCxb
9ZfXbp8T3dsdBH3m5QbhCX/J/a7CDkZM5raJvzwFc3WNGz+CQal5LtvVUAhR
970GY3paPcYOQshMOzBpRVcItOUPrKm9LoSo+4eCofLmfbKPhFChMC6AVxgE
BJ7OHp4QQlQ9wmDpoyb6swXCyPqX4XYrr3DQnq/IyzgmjKj6hIOBZJrRvSxh
1PbZaXqCZwRMqe/UKPkhjKh6RcB62/dtInNEEL7Nx4Fj18Gi0vbhDQ8RRNXv
OgzLdVvFFokg+ZqniZbHImGz3bQH3yZEEFXPSDi6rp2dbjEJ3edKON32iIIT
l+5/nB89CVH1jQLl/AKpk18noWUcU1a/ezSstposfn6RKKLqHQ0BEg2zFENE
0Ysoz6417jHweNPrE2fbRRFV/xj4mFJjt8NcDLn4p2bFu8UCSpmauSdBDFH9
iAXz0uIojog4mnSyxaPPNQ5WbX+tZXVIHFH9iYPTsSs41U3iKO6gsslq1xuw
Uqx1WcpiCUT16wbw5baM9aVJoLnbrf7cOHoTdl3mp4ppSiKqfzdhyGwgaGqM
JPrH4kJZj0s8VKf0sJfKT0ZUP+PhoeTTroOhk9GeRfhELrfgU5XNiXZFKdLf
W3ChXvdIa7wUGtDvNo9zvg1uSzS/nZopTfp9G+r+KH4KLZVGV6cxxH4euQOb
NGJrd26YQvp/B9oXy7Ajuqag8Muz99NNEsBfU8pR5poM4UMC7JGln+5ny6L3
vv88qOcmwHL6FkbdB1nCjwQIqn/jQ7smh5gnHJkn5iVC7IibcYT2VMKXRHA/
Fh1ccGEq8nQdD9TiJsJBZ/Zl8baphD+JsF12VWOMpTwSnKaOfRdmsCOUhXPl
CZ/uws28d1pF0xXQZHv2uuP5d+G5zUIz/lUFwq+74Pr9yKugvwpoq+3jTE12
Ery3nMo1P6lI+JYE4eZ2p9T6FFHChsNydXlJcHhR28cHrkqEf0nQa1s6peyX
EupaI+rhZZwMgcra35V9lAkfk0HY9BxTXpKGFsCdZzPykgHFTA9JiaERfiaD
y2/kGD1LBV1cuHherREH9GeZGUv+o0L4yoHBeHpn+UFV1DgXMzCXA6W8cpkK
GTXCXw64R4kkNxaqITV99yENoxTYXN3LmOw0jfA5BaaKajRPVp+O9tOldzzK
SYG9tz3tfd9MJ/xOAfO0RyUOt9RRtlpK6bG592CGjXxy3UENwvd7MMDUSRZa
MAONymNC5dyDVTw1D8cpmoT/98CkY2DA6YcmWi2FO2x4H1qq5esSD2kRPdyH
cK/Cc8kftFCECBZA9n0wlbXRyNhCJ/q4DzSzL7XedXT0YQS/wDAVPkgvXPpi
hTbRSyoceHrUvqpcG7EEF85KhZhMx4BkNoPoJxXCwqo76KkM5CVowJw02HtA
iSOlokP0hLF3k9VdHx3E+4IJkZUGpp4N34U+6BB9pUG/6NPQ3Ut1keD4DwzS
IfZthm/tJV2it3Twvm3qMqVHF21rVtV3z0yH3/YHOPP09Ij+0iGxOeUQ104P
JTbkB00zyABZ3/EcrUQ9oscMYCX4zJ//RA/9qFn/oyYjAwwPKgW7vNAj+syA
JYYGTe3NemhhRae12+xMCA4+axH/Wo/oNRMeJ0YbVbfqIb+CS9lqGZnglPZj
iNahR/SbCTXFXywP9OkhzF75mllZwDmfHdQoyyR6zoL7dFcPphYTTcPtdU3P
AvXaBdaxi5lE31kws7/rNtOUiZxub21WnZUNa/x937OXM4nes6HA722W1WYm
wtUyqU7LBh2pgK+iHkyi/2yYPvSN4RzARGexvOcr5wB3zKL4JcaUH+TA62CZ
fdJBTJS84vqY9NYc+PDM9Pm3aCbxhxxYJZra0HuTiWp5ew1aI3PAJslpsU0S
k/hFDqhsr8p6X85EPUvm2BU258DS4zM3llUyiX/kQHp9wiwFPhMpF4+GXFXK
hXmzfDi+P5nET3JBusds2j4GC2F18fba5IL/OcW/0RhT/pILXZsXDv1istBe
wQUjcyFcx87yuD6L+E0uVOz2D9zPYiF/fB3p5lxYpn9ZHi1gEf/JBYX1Et+S
FrJQ+n3cEMU8GBorfDsXY8qP8mD82tYL/StY6KnO34sFW/Lg1bZnrhobWcSf
8mBTi1eJy2EWGkrABLqeB7t8Qi6/x5jyqzzgFz/Kkw9gIcyWNvvnecCZeYlj
WMIi/pUHPWcn1dwuZaHlAsIr5kMuN1QuEGPKz/LhtMzwmEMZCx3CcpDagnGn
t6YFXqf8LR/metoHBuL1a+FYoBH5UNfP+vgJr1N+9/9++TJP7nGf5UPc/nE9
Sfx5yv/wuu2ve4l4/c0VbCgKXEg7fnxaNl6n/JAL7fq00cVPWGhCzHmy/WYu
rHhpOa+2iUX8kQvX+b1LmzDWERhgBBea/LY2eGFM+SUXdn5dK5yE8VrBBs+4
kCj7smLZRxbxTy68Dfz9RxO/T2AHH+ULoL71NE1EWp/4aQHUnJ1Hy5+sj6IG
cYE3FQC/ZUPKfYwpfy2AmZpvud4Ylx3DDQ8vgBFaVk8zxpTfFoD1m9GvSgr6
6NNPTMCnBRDHcvCMV9Qn/lsALo7j+Z8wFsfXY8sXwnaPb+JjGFN+XAhTDq8/
ajvIQrO/vQyV3FQIf66yOzu/sog/F4KLocKQ2zcW2rQvGX0IK4QubagZxeuU
XxeCpFD/1kG8LrDDvCeF8KD/9LQejCn/LoS/Q6voyzpY6NYurOipRXC8bvDg
cDuL+HkReJWvGTuO96t6NWXLno1F0PK9zHAdfp7y9yLYNOBxqAY/37HlrZ9x
WBH4/BV3iuxkEb8vAgkFw3OquP6yuP0ST4pg3UqW5SBiEf8vgkPpSws2TdJH
mK3t7+WKoZN+3dxWXJ/kQTEsifqSuw/jHY+W0/I2FEN2pZHUHoypfPgfn8Nx
EBBaDCdaBp85Ykzlxf/ruDondzcVQ9sTmxIBpvLj//W6pViBciXwLnhX+16M
qTwpgdNqy2KOYtxbfOqN+IYSQE8NFnTI6pN8KYEo190S1rhfAnm8DykBi2vy
ysEYU3lTAoFlHbKrMV6Sq7gk93EJdG0cLPLBmMqfEmCsltvtjLGDQauzv2wp
ZKFWgzsYU3lUCj9anyQnYiy47q71pVBtJ1e2B2Mqn0pBVKl9/BTGGbpnGueG
lMLG+3IhWzGm8qoUyr2NZ1/A+Fmi5YTY41KgDeW+NsOYyq9S0DNpunsA32dI
Q8XwnUwZOFefO3pRUp/kWRmEq5gXKGEssI8c6zI4qX+0uQPXg8q3MkjdSw/b
jfEKWl7Y5WtlMPZjvvenCRbJuzIYNTlFVxfVR4cizvF3NpbBnDCTewvl9Un+
lcGzirQXGnL6SEAHQ5lymF6kkh+A96PysByaOIET3VhP3CAcKNblMFP8fKQx
fp7Kx3Jwnr0xws8Y+4c4ZmBwOcSHmGlGcv7Ly3LIXdKh6YrzF7vnpeyGcqBr
aa+sqfwvP8vhhK2cg66VHtIVfGBKBXRLHDrsMfe/PK2AM2L2X4y89NBawYHX
VYCe9Crjbrwfla8VULl/gVSdny5yFxQwuAJoi54nFgXrkLytgKK+MLGRM9oo
GstFtKECbEaUfLOZNJK/FRB3gK1UXaqGynowwaQrIb7ol/CXRjrJ40oI3jV/
RJHDQJgdqVlWlZAd9+iQm7U6yedKaNw/zH3hREMSAgFerQSDbvEbLgx1kteV
8F2vaxu7TwsJ4mdHfSUwDM78NmnQIvldCQ2xU+/N0aShzQKDkuYB2+HwlTth
6iTPeeAebe/QrqGDTgkM04oHdUfbQ1Ut1Ui+8yCuLcoholwZCezkdRAPXpo0
b/Aa0SR5zwOvJSo+T7froGobHCh1PDjA4CoFNDNI/vMg0W7Sxu5fWsgLEwR/
DYKVvgsttafTyDyA4E7Lo8/HdmmgAL1hldm6CLh9O2hv5bXIfICgwacx9+aQ
JhLQk7YKwaiQc3OdqgqZFxAolTGje7jqKBPbrbATAjGH9b4+dSpkfkDw8I2Z
P3OZGkJ4fOi6hODJDFPv5LuqZJ5AkHedgwyvTEfPZ0R6v0xG0JQQ2PF8tQqZ
LxBcmSM6vn7dDNT+fkSeX4NgY2WkCnuRKpk3ELz2L/COX0RDf244pKW3ITD8
uokl4aNC5g8Ea8VEWkxqtBB26+XRonwY2WYwenyHDplH+NBtdmr/R442moHl
eV6HDxdNYz+Ej6mS+YQPy+883t79VwUZYUN2XsmHf0Q5k6+IqJN5hQ9HjsQy
vNk0tBKXY9t+PoTWXgr7mK5O5hc+HJhv5tjqSkfbcIDAJT7IfO9PeSSjTuYZ
Ppgs/77sliIN4TRfOiuZD0FXSh0LeRpkvuGDkXNZfVExA2H3eaFcw4d3DnFK
n8O1ybzDB47FuI5PpDIKvRpzVKiNDzlDrSdjNaeT+Qefx6+Xrm5BR3exPXVN
qoI5Sh/jJIYZZB6qgj1HhK+P+jJQAY7bF4wqOKQUsdrOVoXMR1WwQMXcW8Vn
GhLQBa2ogqOGw9sf4P5S81IVPPAMl9nUropwOjWl7auCoXMj+2/j7yfU/FQF
n/d+EVdWVEVYTQej/KrAyOvUkjWmNDJPVcHvk7laGfUzkOC3qvNJVeDPuRdw
ciED/Qs/y0Km
           "]]}, {}}, {{
          Hue[0.59, 0.7, 0.75], 
          LineBox[CompressedData["
1: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
           "]]}, {}}}, Prolog -> {{
          InsetBox[
           FormBox["2000", TraditionalForm], 
           Offset[{-2, -2}, {2000., 2.157}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["4000", TraditionalForm], 
           Offset[{-2, -2}, {4000., 2.157}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["6000", TraditionalForm], 
           Offset[{-2, -2}, {6000., 2.157}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["8000", TraditionalForm], 
           Offset[{-2, -2}, {8000., 2.157}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["10000", TraditionalForm], 
           Offset[{-2, -2}, {10000., 2.157}], 
           ImageScaled[{1., 1.}]]}, {
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-13\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -13.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-12\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -12.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-11\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -11.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-10\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -10.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-9\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -9.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-8\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -8.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-7\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -7.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-6\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -6.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-5\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -5.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-4\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -4.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-3\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -3.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-2\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -2.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -1.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox["\"1\"", TraditionalForm], 
           Offset[{3, 0}, {0, 0.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox["\"10\"", TraditionalForm], 
           Offset[{3, 0}, {0, 1.}], 
           ImageScaled[{0, 0.}]]}}, 
       PlotRange -> {{0, 9543.25}, {-13.857000000000001`, 2.157}}, 
       ImageSize -> {302, 182.}, 
       GridLines -> {{2000., 4000., 6000., 8000., 10000.}, {{-14., 
           GrayLevel[0.3001]}, {-13., 
           GrayLevel[0.3001]}, {-12., 
           GrayLevel[0.3001]}, {-11., 
           GrayLevel[0.3001]}, {-10., 
           GrayLevel[0.3001]}, {-9., 
           GrayLevel[0.3001]}, {-8., 
           GrayLevel[0.3001]}, {-7., 
           GrayLevel[0.3001]}, {-6., 
           GrayLevel[0.3001]}, {-5., 
           GrayLevel[0.3001]}, {-4., 
           GrayLevel[0.3001]}, {-3., 
           GrayLevel[0.3001]}, {-2., 
           GrayLevel[0.3001]}, {-1., 
           GrayLevel[0.3001]}, {0., 
           GrayLevel[0.3001]}, {1., 
           GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, AspectRatio -> 
       Full, BaseStyle -> {
        FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
         ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, PlotRangePadding -> 
       None, PlotRangeClipping -> True, Background -> GrayLevel[1], 
       FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> None]}},
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    GridBoxSpacings -> {"Columns" -> {{0.5}}}, 
    BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]}], 
   TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
    DisplayFunction -> (StyleBox[
      StyleBox[
       PaneBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
              GridBoxAlignment -> {
               "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
              AutoDelete -> False, 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], 
             "Grid"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], "Grid"], 
        Alignment -> Left, AppearanceElements -> None, 
        ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"], 
       LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Arial"}, 
      Background -> Automatic, StripOnInput -> False]& ), 
    InterpretationFunction :> (RowBox[{"LineLegend", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             
             TemplateBox[<|"color" -> Hue[0.59, 0.7, 0.75]|>, 
              "HueColorSwatchTemplate"], ",", 
             
             TemplateBox[<|"color" -> Hue[0.083, 1., 1.]|>, 
              "HueColorSwatchTemplate"]}], "}"}], ",", 
         RowBox[{"{", 
           RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8770570142845087`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"ae241f31-d820-479d-b9a2-c270dec9af77"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netT", "[", "\"\<RoundMeasurements\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877057026710782*^9, 3.877057026710782*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"87ab4840-2dd2-49e6-a42d-9ca872fa1d65"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Loss\"\>", "\[Rule]", "7.144784763823964`*^-11"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.87705702730853*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"e1b28663-eeda-4613-a645-64fd92dd5176"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netF", "=", 
  RowBox[{"netT", "[", "\"\<TrainedNet\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8770570298085666`*^9, 3.877057029809721*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"2b208e2c-374d-4d82-970b-7d7214a331ab"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {136., {25.17529296875, 29.82470703125}},
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.87705703030523*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"9b0e7fe3-75a0-4a2d-b7d5-f4f6b4af7be9"]
}, Open  ]],

Cell["5 run the trained network", "Text",
 CellChangeTimes->{{3.8770570520855093`*^9, 
  3.8770570590600166`*^9}},ExpressionUUID->"50b24e4b-c529-4dc8-bf39-\
7a890f22373a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataV", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770570648149576`*^9, 3.8770570648149576`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"d67a9561-8f40-4d19-b59e-ee5beae30f6a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", "8"}], "}"}], "\[Rule]", 
  RowBox[{"{", "9", "}"}]}]], "Output",
 CellChangeTimes->{3.877057066182624*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"5dc2adb4-ab80-40d9-8c71-2283674a77a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataV", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->"In[27]:=",ExpressionUUID->"e51a8102-ede9-4957-8c0c-50c9ee9e34bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.8770571776208363`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"104809cb-790f-476d-8ba2-059bfa1a890d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netF", "[", 
  RowBox[{"dataV", "[", 
   RowBox[{"[", 
    RowBox[{"2", ",", "1"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770570699020805`*^9, 3.877057115435746*^9}, {
  3.877057151252325*^9, 3.877057204902108*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"8758853f-af4f-40d9-9d5f-cd527ac699ac"],

Cell[BoxData[
 RowBox[{"{", "9.`", "}"}]], "Output",
 CellChangeTimes->{{3.8770570736851425`*^9, 3.8770571161535788`*^9}, {
  3.877057183324231*^9, 3.8770572054765625`*^9}},
 CellLabel->"Out[29]=",ExpressionUUID->"c9b945e8-8396-4a9a-bd44-7ec164a38d07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netF", "[", 
  RowBox[{"{", 
   RowBox[{"55", ",", "5.5"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770572160490885`*^9, 3.877057257324422*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"6000eacc-ef3c-4ffd-aaac-4192b9dc0352"],

Cell[BoxData[
 RowBox[{"{", "60.50000762939453`", "}"}]], "Output",
 CellChangeTimes->{{3.877057225952367*^9, 3.8770572575242224`*^9}},
 CellLabel->"Out[37]=",ExpressionUUID->"714e89b1-5fee-4d54-8ace-7fab77e472bf"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["differentiation example", "Subsubsection",
 CellChangeTimes->{{3.877057356757829*^9, 
  3.8770573647197094`*^9}},ExpressionUUID->"d2ebb9c7-87b6-4cc4-9b64-\
55a3146429d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Batch", "[", "n_", "]"}], ":=", 
  RowBox[{"Replace", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"RandomReal", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a_", "/;", 
         RowBox[{"a", ">", "0.1"}]}], "}"}], ":>", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", "a", "}"}], "->", "\"\<PLUS\>\""}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a_", "/;", 
         RowBox[{"a", "<", 
          RowBox[{"-", "0.1"}]}]}], "}"}], ":>", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", "a", "}"}], "->", "\"\<MINUS\>\""}], ")"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a_", "/;", 
         RowBox[{
          RowBox[{"-", "0.1"}], "<", "a", "<", "0.1"}]}], "}"}], ":>", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", "a", "}"}], "->", "\"\<ZERO\>\""}], ")"}]}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", "All"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.8770573420412464`*^9, 3.877057387823104*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"818f7646-f67f-40fe-a95a-1721d1f32511"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Batch", "@", "3"}]], "Input",
 CellChangeTimes->{{3.8770573980067787`*^9, 3.8770573980077753`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"7300d67a-1842-49b4-ac10-533531c39edc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"-", "0.9827836761680984`"}], "}"}], 
    "\[Rule]", "\<\"MINUS\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"-", "0.7242679564298737`"}], "}"}], 
    "\[Rule]", "\<\"MINUS\"\>"}], ",", 
   RowBox[{
    RowBox[{"{", "0.15459865011413676`", "}"}], "\[Rule]", "\<\"PLUS\"\>"}]}],
   "}"}]], "Output",
 CellChangeTimes->{3.8770573985964518`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"f8f82de4-20bf-41d9-b338-fdd60e8995bf"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataT", "=", 
   RowBox[{"Batch", "@", "200"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dataV", "=", 
   RowBox[{"Batch", "@", "20"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.877057420662405*^9, 3.877057425340249*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"3b3fb2bc-2fa5-4472-949f-6c5a4bca0847"],

Cell["class\:662f\:5206\:7c7b", "Text",
 CellChangeTimes->{{3.8770575187503757`*^9, 
  3.877057536623825*^9}},ExpressionUUID->"82069f4c-0847-48ab-85c1-\
f10e46bc1828"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LinearLayer", "[", "6", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", "3", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "1", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<PLUS\>\"", ",", "\"\<MINUS\>\"", ",", "\"\<ZERO\>\""}],
           "}"}]}], "}"}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8770574303515377`*^9, 3.8770574630930653`*^9}, {
   3.877057507125657*^9, 3.8770575152611675`*^9}, 3.8770577288371377`*^9},
 CellLabel->"In[44]:=",ExpressionUUID->"66575fde-bdf6-40bf-9b8b-6afa4f4acf0b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{6, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3, 6}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{3}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"PLUS\"", "\"MINUS\"", "\"ZERO\""}, 
                    "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                    3, "$Rank" -> 0, "$Version" -> "13.0.3"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "4"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "4"}, 
                   NeuralNetworks`Private`NetChain`selected = <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 6\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 6\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    145., {98.97529296875, 103.62470703125}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770577655151935`*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"43acd99f-5395-42d2-8629-aaf9a966ea85"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"softmax", " ", "=", " ", 
  RowBox[{"SoftmaxLayer", "[", 
   RowBox[{"\"\<Input\>\"", "->", 
    RowBox[{"{", "3", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8770576979190483`*^9, 3.8770577097885647`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"6c53aa3d-f967-4bc8-88ff-3b67b9271ed4"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["SoftmaxLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014705882352941176`], {
                  RGBColor[0.33, 0.33, 0.33], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.557, 0.557, 0.557], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}},
                    CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.85, 0.85, 0.85], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   22.23, 18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 
                   7.23}}}]}, {
                  FaceForm[{
                    RGBColor[0.56, 0.56, 0.56], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                   18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {
                   44.25, 18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                   50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                   21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {
                   56.6, 16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17,
                     20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                    53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                    18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 
                    21.83}}, {{53.56, 21.83}, {53.56, 21.13}, {55.04, 
                    21.13}, {56.25, 19.92}, {56.25, 18.44}, {56.25, 16.96}, {
                    55.04, 15.75}, {53.56, 15.75}, {52.08, 15.75}, {50.87, 
                    16.96}, {50.87, 18.44}, {50.87, 19.92}, {52.08, 21.13}, {
                    53.56, 21.13}, {53.56, 21.83}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                   10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                   21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {
                   16.5, 16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27,
                     20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                    13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                    18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                    21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                    "]}]}}, ImageSize -> {40, Automatic}], CacheGraphics -> 
               False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014705882352941176`], {
                  RGBColor[0.33, 0.33, 0.33], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.557, 0.557, 0.557], 
                  Thickness[0.015029411764705883`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}},
                    CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.85, 0.85, 0.85], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   22.23, 18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 
                   7.23}}}]}, {
                  FaceForm[{
                    RGBColor[0.56, 0.56, 0.56], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                   18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {
                   44.25, 18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                   50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                   21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {
                   56.6, 16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17,
                     20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                    53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                    18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 
                    21.83}}, {{53.56, 21.83}, {53.56, 21.13}, {55.04, 
                    21.13}, {56.25, 19.92}, {56.25, 18.44}, {56.25, 16.96}, {
                    55.04, 15.75}, {53.56, 15.75}, {52.08, 15.75}, {50.87, 
                    16.96}, {50.87, 18.44}, {50.87, 19.92}, {52.08, 21.13}, {
                    53.56, 21.13}, {53.56, 21.83}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                   10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                   21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {
                   16.5, 16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27,
                     20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                    13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                    18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                    21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                    "]}]}}, ImageSize -> {40, Automatic}], CacheGraphics -> 
               False], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", FontWeight -> Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Level\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Level\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Level"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Level\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Level"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  RowBox[{"-", "1"}], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox[
                   RowBox[{"Input", " ", "Port"}], FontWeight -> Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox[
                   RowBox[{"Output", " ", "Port"}], FontWeight -> Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox[
                    "\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("SoftmaxLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770577102447095`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"274a07a3-6c98-4518-802e-d8f2ac802c5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "@", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"net", ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "\"\<Weights\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8770578239111032`*^9, 3.8770578239121375`*^9}, {
  3.877057863405964*^9, 3.877057870413171*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"1343c949-ff73-489a-a5e1-9e7efbe21c1b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.009655638597905636`", ",", 
     RowBox[{"-", "0.35125166177749634`"}], ",", 
     RowBox[{"-", "0.04864262789487839`"}], ",", 
     RowBox[{"-", "0.13655468821525574`"}], ",", 
     RowBox[{"-", "0.1623387187719345`"}], ",", "0.6247758269309998`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.17648816108703613`", ",", 
     RowBox[{"-", "0.5113139152526855`"}], ",", "0.17366638779640198`", ",", 
     RowBox[{"-", "0.06410066783428192`"}], ",", "0.03168541193008423`", ",", 
     "0.017183441668748856`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.3973264992237091`"}], ",", "0.010022399947047234`", ",", 
     "0.162825807929039`", ",", "0.7136372327804565`", ",", 
     "0.12775927782058716`", ",", "0.009493952617049217`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.8770578248119507`*^9, {3.877057864135144*^9, 3.8770578710364084`*^9}},
 CellLabel->"Out[48]=",ExpressionUUID->"857b2734-6301-4a7a-be36-d4880c8002de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", 
  RowBox[{"{", 
   RowBox[{"-", "0.5"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770578893576045`*^9, 3.877057913941409*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"2871e8fe-1a7f-4831-9f52-9aa5e9aa13ff"],

Cell[BoxData["\<\"ZERO\"\>"], "Output",
 CellChangeTimes->{{3.877057896282652*^9, 3.877057914205434*^9}},
 CellLabel->"Out[53]=",ExpressionUUID->"8b014992-06a2-4cd8-9e36-41d33f31edb2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netT", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "dataT", ",", "All", ",", 
     RowBox[{"ValidationSet", "->", "dataV"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.877057937432577*^9, 3.877057937432577*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"2f8204fa-3be3-429a-92da-f0b8c8d43f87"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"netT", "[", "\"\<LossPlot\>\"", "]"}], "\n", 
 RowBox[{"netT", "[", "\"\<RoundMeasurements\>\"", "]"}], "\n", 
 RowBox[{"netF", "=", 
  RowBox[{"netT", "[", "\"\<TrainedNet\>\"", "]"}]}], "\n", 
 RowBox[{"NetMeasurements", "[", 
  RowBox[{"netF", ",", "dataV", ",", "\"\<Accuracy\>\""}], "]"}], "\n", 
 RowBox[{"NetMeasurements", "[", 
  RowBox[{"netF", ",", "dataV", ",", "\"\<ConfusionMatrixPlot\>\""}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.87705796889535*^9, 3.877057968896347*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"ea89877a-0bbf-4160-97c3-3c650956cfd3"],

Cell[BoxData[
 TemplateBox[{
   GridBox[{{"", 
      ItemBox["\"rounds\"", DefaultBaseStyle -> "LabeledLabel"]}, {
      RotationBox[
       ItemBox["\"loss\"", DefaultBaseStyle -> "LabeledLabel"], BoxRotation -> 
       1.5708], 
      GraphicsBox[{
        AbsoluteThickness[1.25], {{
          Hue[0.083, 1., 1.], 
          LineBox[CompressedData["
1:eJw1mHk4lO37xm1p00I7oRUpbSLL+7qvlEgh9aYiFZKdYaxjMHbKviT7vmQf
YxkzwyyK9pQUZXuVChEtUi/1e/oe988/jjEzz/Pc13Wen/M8bLZ2O2UrIiQk
tEtYSOjP7///iWxvHFsM71CHQTD7ExOg61lxkWt8P359EuTnjhs+VniJlCcO
pdutOQ9/zcmTf5h34fcvg2X90Z2JnE70I8OqfOf7K/BMT0Ojxf8R/rwD/Nt2
T9HX9D66gLZEFR52AaFOf0MmrwN/nwQsg63Di4vuoCH36bplnR7QpSzbkdnX
hq/nCbPnAk23mQmQ1O2n+cd+ecOz3lIroUV8fH0/sPzYbfL4DhcdXluXEL7L
H4b5SeQeZgu+XwDE6Hnbnx1lIy/7pCC+eRB8s1WU3mDMwvengWF7mYFXPxOd
ttRsCrwdDLwBrSCFG034eUKgW+bOQx2XRuQccas663UofEhkT3SYN+DnCwPq
tGdmzaV6FF6zoYT1ORwqXWckg/wY+HkjYChXZa1YcR3K6YnO7lkcBbaJudtl
3tDx80eDVuwGKnk3HTUJ/0yZ2XQN7u+PdzYIrcXnuQ6qGt4bz7XXoE5lx5jV
GjHw/Pg+8ovsany+WOjUqHolF1qFRk+/Ct1vEgfiIisSLX0r8XnjIVU2l8oN
qkDBOsV/K6kmgMJBnQi/hHJ8/gQotflW/bvyFlr2ZwA6idCrIxdV+rwMzyMR
xhZ8E9ETL0MZdmvUjhomgapHRJfikVI8nyQoVXiWZnWtBClQH+3tPpMMijWj
zIbuYjyvZFgwY+GUr1SMGMRprlilQFcTvbU1pAjPLwVu0Sa2e70pRIh4vC/O
qfBYpoqy9UQhnmcqiFwIIHNZBehB87etIb43gCa9hG6+qwDP9wa8dJX2iy7M
R+ceV8lLhqVB2qZv6z9sysfzvglze+jalvl56O2wrUxe/E0wLk/VUVfIw/NP
h2KpH9xV1rnI/bvsuj2Z6fD+XIe5HjUH7yMDSO80T2XkZKP5pS+kWksyYIX0
onXnH2bh/WRC6c/lAbHzmejaprjlRnWZsPrxIeFq9Uy8ryzY57fza5pvBlqr
dnRJX0sW6ISZb/bmpuP9ZcPmUMFSpkQ6Kjj2a4HTvWwwdOD+fGR9E+8zBx6I
ySsbcdLQnouNwj+f58AmStHz5I1peL+5sCdGkbI57AZie7jORw3lgu/wxfNn
plLxvvPg5YtWWqVVKio6nDy31DsPNDpZL2/1pOD950HU9o0UqTMpaMzIjdL1
Xx6oy8dn+PcmYz3kw5ojc8bJVslo77njsxnB+TCsdaazeiIJ6yMfLLluG8wD
kpCPtaK39cICKK4sEYqTSsJ6KYAM+nSSbGUianEW/bojtgA2lIgqhx1PxPop
gOl9t9XXf0pAoj6D7tNShbCyib13OiUB66kQ1HbtNaLqJKBjfx73ZiGItFqU
/34Rj/VVCIZ6GZqiGvEo/nqaC02uCE7pCFNPF8RhvRXB+xN/O32SjEMvUsnj
+kVFUP91Z8XJiFisvyLIo7uHHxGKRRvzTBxWKBfDzF4TI6WgGKzHYtDtb/5s
JhaDrIlPv6gphuIq2imv+OtYn8Uwq+me8l7uOiqrX2ibo1YCrbqaoS30a1iv
JaDyiG/VYHANfWp9M2zLLoEX/zGdat9EY/2WQOGTwzWrQ6KR2j3uZZVDpfDP
mnZWnEI01nMpHIXn0ZkPo5B/V+bA1/ZS8P9sOSTpHYX1XQZNVhvWp26OQvx+
nwucE2VwKJlnIf40Euu9DBSd3QNzQyLRwg+EoJ6VwUi1a9VS9Uis/1ugSGWc
lpqMQMaf95w7fu4WzDTmNS8oicB+IF4fHvLqvRyBUuYIAwzcAkNq6eYR2Qjs
j3J4a+YwKTYQjl6JEzewKQfqdfkxXk449ks5hN0XvAizCkebJIkDj5aDUJ5W
Qtr2cOyfCphjkfLOjoehqzLEAtwqoEHW9UsCIwz7qQJqnh7d2kgNQ1XbCUF8
qwC1JdFFxUfDsL8qQeq7CfnWqjD0hXj8WUol9EXEp9KHQrHfKiFNrsKirToU
aWoduMcVqoLOqvsNCYGh2H9VMABpWkomoSjoyEr9yIgqYGTWxTRuCsV+rIJy
o1o0/DUEtRt/vG0sUQ2pbh/s6R0h2J/VMHIlLTgsKwRJnL+ruzapGhZ/yeOz
PEKwX6vBMXKgmWwQgk7ZFPH619VAoPhMcad8CPZvDfy6dHn5f9+D0U0Xmk5x
dg18GjBPFXQGYz/XQEONtPXL8mD0SXv3xUbJWuhXWKbYHB6M/V0L3XcNZNiX
gpHUoY2yGf/UwhnRvVuVtYOx32uhz8JtcmxdMPozjoC0WpiStvegfKNh/9fC
XcWfFMdnNHSesLfVq1qwixZJu1FDwzyoBeNFa/dqxNMQ9eS783qydCjcKZYu
40rDfKBDwkqp62bGNJR75vn6HZfpMErzUX+uQsO8oENv8I22wuU0JDAXvJQo
pIPCHR3mzaEgzA862N7e3UnKD0Ijl2pvTI3QwbdHe+E2uyDMkzpQnfLnTewK
Qotsc848V6qDV3OjJw2mAzFf6iBZ9RJtDTMQ7STkwHSqA++5S5veBAZi3tRB
2x2Gm7deIDImjpNZXQdkkcSAnhWBmD91oFvXwZ54GYDcPYmFTNdBxY8fLRqF
AZhHDJh1Xq7f7ByAUv3MTG0OMEA/wyNCUSMA84kBQtac368WBCBmICEgHwac
8+o98vEJFfOKAUNb/JUkc6jodej+J8osBqjqJ8dFOVExvxjw5knZ5h+aVPQr
ihD8PAMknpvpai+iYp7Vg/33cevMl/5oM2GHz6geFraJhnWW+GO+1cMFUTNO
rY8/OkKs+0VIPSikz8pJGvpj3tWDVLqDwfR6f2R3c+x+8516mLxVNyEyTsH8
q4ezW1KPRHMo6Fo2AZRFDfAmZp1UaRwF87ABBs4vPhFoQ0FVBe0GwccbwE7P
kWR7kIL52ABRYwYO3xZR0NNSAoBxDbD26L9ntwz4YV42QK5809Fohh/6Wklc
4GkDqJ6vVDeP9MP8JN4PNWH9tPRD6/7gYHUj2CYs+yh8wA/ztBEg6ftfGYv9
kFYTMeCzjZBXzUYVA76Yr42g+0s89kSDL7LkEAtPb4SpkwaOd2J8MW8bQY7+
0eGtjS+i8QkB9jWCqaL44S/avpi/jWB0RcI6YrUvKiSOx5ZvIvQTC3UffTCP
m6CnZ0JX9I4Pan+gDrnWTfCY6n1WM8cH87kJaPOvuxN8fdBo57bfIcVNIEYJ
KRU29cG8boL7VWEcmrIPWkbg8OqHJrBX3VG2WtQH85sJIaYD42UD3mjva6EA
w51MYE/JcY8xvTHPmSC5ZkxJI8UbnR6a1N7tyoTouADLHFdvzHcm0Ca6xA4a
eiPvkb6fknQmZMZd8opQ8Ma8Z0Katf6xzcLeKJ1Y/7cvTLi3i776Qr8X5n8z
6H13j7zG8kKcT0zfXvVmWJa1Jhnd8MJ50AwfbD55jXh4ocGvJQdb/JpBTkx9
iGTqhfOhGShOfbfLd3shESIO8jjNkPw+P8VkiRfOi2bgjDlcj/vgibb/DmkI
+90MdGm+gn67J84PFlByW7+PF3oiAzHCgbos4C7y5OwN8cR5wgIy+Z/d4lae
yHnxJdUT4Sy42XHaZkbHE+cLC5p6tdSt5T1RPGGPPXdZoFQ2/mV6jozzhgWs
6ItRO16TUd0qbfqqpWx40z4z2c4m4/xhQ9YTidCATDLqXr+D9N2IDX3jVVYM
ChnnERu2bN346j9zMpoljvs6gQ36b2sdS7TJOJ/YMMGpS14sTUYyWxdMtnax
YS4qaFhvzgPnFRtmP799cLrPA+kofaksWMsBrWN1bBbHA+cXB3RT5lNmcjyQ
lcq/ThHnOcBzztpiF+SB84wDB5BXRMNlDxRG4MMxiwPe21pWdRzywPnGAfFy
izUyWz1Q2cGWUaNBDqy6sOit2wIPnHctsNQqtPnde3f04K+Ksn1bWkDr172d
Bffccf61gOGevIjKCnc0+UcOti1wMfbyltVx7jgPW8DorfGKETd3JKkfqfCj
tAX2xu6fdz/ljvOxBQIG0w+HqbmjAye8RvrGWuDm4OVEufXuOC9bQWl9eNPv
/0jorCkRgCqtYEbOruUMknB+tsJ1WnHLzzYSohB4LSK1Qna6wt01JSScp62g
caC6P+0aCWVbEA/MaIXDzgYkjgsJ52srJC5Ic91mSkK8y8QAZ1rBQ23juIc6
CectF8ZH1OsKpEnoLWEXE00u+Gz8fC/nlxvOXy6cbDaQ6ml3QwudCIFRuZDR
1te/I8EN5zEXIibfzlw3d0PKJELwXC5k6+dPM7a74Xzmwu3xKwKbT66ohEX8
QYgHgx0kNZVmV5zXPOD5uyY2hbkiDWI9blt4UPD00JSWiSvObx70vNu5PEna
Fd0ncPPvYR7YpLsWL3jngvOc+H5kijCZ7oIsiPg8bcsDJ6rOQ76/C8534n7h
JxqljrmgidvEwCN4oM+iT2mvc8F5zwNxCxUrkWFnFNhx54F6GQ/oKTr7dGud
cf7zYMm+D70iVGe08j4hkHvE9Q4rCEkYOuM+wAPB1jMxCzY4o/yHjGvS4zxQ
UbwSrvvOCfcDHhS+P20S1OCEVAl5xkjw4XZLRWJJuBPuC3yw9P07oPykE/of
blX4QJWQma2Xd8L9gQ8xrl59H6cdkRlRH0gmfJArMQx7x3PEfYL4vP2g8myC
I/rwIn7RMIkPJSu0GpiXHXG/4MPRE+9sBHsckV8vAYwkPphRmv5+KeyI+wYf
7kfFrJx/6oCW9gV03GHwQWG9V71SgQPuH3w4lRDMuOrhgLIGCMB18+GIzkqt
liMOuI/w4XFe6qof6xzQbsKet2b4kFD2vtt1zB73EwGcOrDtgDPbHnGJuJFZ
L4AjlOE1T+PtcV8RQP9o8vsll+yRKTGOWE0BiGU2Lpvab4/7iwBE7n0ePCNu
j4Y/EAFiLoAlD9VCrvXa4T4jgKpBu+8K1XbIc1xfzJ0qgAzh4GBqsB3uNwKw
8zZa63HGDolPEoGXLQCTLU/0FHfY4b4jgLNRo71y81dR2pRa2z9cAQROa8s+
6rqK+w9xv237u7NKr6IdBJ7ahwRw/e2zXg3qVdyHBPDY0uL05MmriEXErYZI
Gyzt8s1WVrqK+1EbyEr1WGyYs0UnCLmUb20Di9vHHQ502eK+1AY225so/Apb
1P9T8tBGvTYY6FatzaLZ4v7UBmoXL5Vnmdkit3miAF1tA5exs5+3q9jiPtUG
5K+fyO9EbdH//lkV1QbJh5ZHCY9cQf8HlEL4OA==
           "]]}, {}}, {{
          Hue[0.59, 0.7, 0.75], 
          LineBox[CompressedData["
1:eJxFl3k81dkbx0lNi1SkMhkVNUkpcqPUzPk+0oQ2WhSVkq1RJIakZMsWirJk
3/eda7lca6IspbJMadMiIlSkTfyOzvnN9/7j9Xav7z3neT7P5/OQNrLaYzpJ
QEBAXlBAYOLn/18SmoNSJcqvmFuarvxBHkBhQUGh5ps2yjoglGzNS7nexKzs
Vws7Pk8f5Fevfmjwuoa+bwgSBgViXQsqmK/hx9JXdZvAduNYjlcUj37eHHrt
Xssp2xcyhxkZ7wR1S5CU9F1YIcelf38aJierBSxcl8d0Wn/IF7lnA+7ura4J
Hdn0ebbQp5k1NpabwYjdvB+nNXYGDtuKHpMcTqXPd4CvXL8XB72SGfX5+QEe
8uehvS1p+YhRIv2+C9AcE6uy1S2esfv7mnP1QWcYHkLDfs9i6fe7wIE2JzmB
5mhmr4FqsdNNV+DWi/Pd1kfS87jBde7nVV0vwxgLz7TsyMcXwSf8zZz7hdfp
+dxBceOzVQq1wYxHzq/JpR89gDPeInhIKIie1xMuCa8V6jK4xkQ/vBT1cLo3
1Px9y+9HZwA9/yVoP7GoPHCaP1Ms+C1oZIkPTI4alN9u50fv4wv1bnHCM5f6
MPdWnvAT3+AH3b6B1bZjXvR+l2FA36xNfaon83Zvx0Ul7SsQNTJfRkHend7X
H8okwd3IyY1xRUl/ruAEQLv5CbeBARd6/wB418VFAiNOjMhEAdBV8B7kOFtp
OdJ6XIUAi+eq9+85MOHH5ylv3XYNGOEtDgv87Wl9rsEsPeZdmr0ds9zxjmKb
biDI/7D6y8fvH1qvQFDotSrgV1ozXHwbk2NB8LlUJ05B6jStXxBEd2keqFhr
yTD4eEMWwXDfZlbHCvsTtJ7BYLNqTsW+keNMY8mnpW5nQ0CJ08lfWmJK6xsC
oqIF38UTjRm9u1mLRd2vg+sfmytybxyj9Q6FB3tUplQLGzKvX5pKxvqHwhJH
Za9Drw/T+ofBBvmR5AdzDjLWn6UWKESEwf5WMYVp5w/QfoSD0Z2cK2tUdJkf
wu1iFcnhMKq6yHW98l7anwhoU7Y81aS9m/FZcmXWzvwIOBoeKfKrrDbtVyQs
Nj8ct11xBzNfeeuMJ+WRoDJStDlXR4v2Lwpc5XbflW3cysRrjU05WR8FgwPS
f4+7bKH9jIY9u+v1uk5uZhSOFAl+a42GRY5+ZToeQPsbA8tvZ+TNqPuT4duc
+uHdGQP5BX8MRa/ZRPsdCxnp6UEyC1WZRPXAUeEzsSAmtpGnJL6e9j8Wjqtu
qpZdp8z07rQ61/I9Fte/t7HJn0P1EAcrTiXkWX5dyyjqbf8S7hqH/SHe7GSo
ItVHHEx2UJGRSl7D2BvJnjGaGg+fR7a2iyvKU73Eg9P7YaXwb3JMuYXQsNzl
eFB11jKx7Zel+omHGYudBU+LL2eE7J9bfxBLAE1Nbu0j02VUTwkQxYxlDDfK
MFoTxw1NACurDiUHI2mqrwTos0s02jZnCePve93SZVEiyMhMevquV4rqLRFG
jpd8S+BKMu3B//RpJCZCd3d3wJTMX6n+EiF5cpqU5KsFzG+x2uazVyZBUfG/
sQ0q86kek+B6neLH6nRxxgh/uj0nCSzzv34MZuZSfSaBgICLRs1dUSa1YKpp
tHIynD8vWbrVbg7VazKMycsuHj03ixmsePXSlJ8MIyMhMYLbZlL9JkNtlkWc
MDODUa6vNFytlgKS7WdC5G2nUT2nYL3qXfRp+YU53xLxbLguBa4GnLVVhylU
36kwKTksfd0dIab6qf3hsh2pYNx/QE0raBLVeypc8vq+ZZqeIDO1BwvqQSoE
7dym7K8iQPWfBt7euQZHT4+hXR8V9LbrpUHXa17PTM9RROYhDfuhmbZQ5TcU
NIoH4Fka+Bzaraq17Csi85EO0tJX1VsDP6OOX/AXGKeDx0vPP4M3jCAyL+mQ
dGQ9s+fjMFoiii/8Nh33V1M+O2MIkfnJgDJ+YHNK0EdkJokbYJUBCwx2mEc6
fUBknjJAVrZy4I33e5T1OxbEp4yJ+ocLqQ0iMl+ZYBJ4QX7PhX40hI//5Vwm
9PdHVYp09yEyb5lQwue/Hdnbi1Q3rquvFMgCefFiF2aoB5H5ywINzdsfJCK6
kfOWORpenllwyiN+oMDkDSLzmAXhFjaq6tJdqG7Xu5u7ZmZDXV3dM8tfXiMy
n9lYb0Y92p9eopn6tzfPv5YNq7tnf5jT9wKRec3G87anoHW0E+0xTqx6uiAH
Wvu+GPWIdiIyvznQ1peqnmj/DIVauqCkqBy4fNmyXL/7CSLznAM1HQsc/z71
GA1uWnOkSDQX0v61zh8dfYTIfOfC78sm585OfIjE1H6TCt+XC5q9uuIe5/5F
ZN5z4aHJP09dNdvRRDkuXM+FUxaHh0tXtyEy/7lwrP9xg7hoK9LH432sIxe8
vTSCli1qQcQPcsF8pt6rFs4D5KjzRv8vqTxQvFyd07PlPiL+kAcbnPfrvL9w
D8XotkrIGebBzu2NO9KONSPiF3mgd3exuUfbHXTj4I1/ZybkgburWsM64yZE
/CMPDn7futB7eiPqOpob8r4rDzZb91UVNtQj4if52N/mFm/yuo2mmUbrtq7I
B08vjYLwc7cQ8Zd8EBSoihTSrkOrsBx4J/PhXW/60cyttYj4TT5M3bE06sy+
m2gXvk5Edj5ICpkVSRrWIOI/+RC4U+Wy6pkbyNoWN+RDPtjb2elfjqlGxI+4
8I0bOZjSVoWCHfbvNl7HhZYHD5Yzs6oQ8ScuCLZIQMSNCsRzwgKy54J/a9/Z
IJ1yRPyKC2cSj3zWXFiGHl9Ual5ZyoUTFhYmru2liPgXF9Y7h3yPSChBY95Y
8D+4cNHVVZR3iYeInxWAyiMTXyXrYiSNx+EjUwCqmRfUd9kWIeJvBRDDm5d+
2aIQbcHtbncrAH55uWmNfwEiflcARzV6RWpiuOh4aG9DSW0BJCYlmVbW5yPi
fwVgu0q8ufNTHvKJwoYyrRCMqtatgT/zEPHDQmiVUCyfYZKLsuLrNF23F4Lu
vn2Tr0TmIOKPhfA23jfaa0k2up+CDfBKIZibm8fVNGci4peF8GZU3ykmPQMN
Z+IH3C8Eae3pk0QM0hHxz0KQ6242StRJQwsm7EC8CHy8vGR5kIqInxZBaU88
f79GCtpYjAt8oAisbGwO+s1NRsRfi2Au+qK5VC0JGZThhocVwS0X82UtJomI
+G0RzPwYpBflm4BcqrEAnxTBx6Gh2aty4xHx3yKI483rGH0QhxLw9fiLi8HQ
0FAn9Lc4RPy4GGS0pxu9sYtFdY0qEGNUDE4hQxpRR2IQ8ediGMcv9zXR6O29
ZeNuScXwsK0tKSkjEhG/Lp7wnz5r+wgkgu3QrKcYupttTs1A4Yj4Nw/6envD
4a8wpPhY4MK2VTzIGxF5HGIRioif80CFwxEyUb2O9nYObFpzigcp8fHxaHMI
Iv7Og7NSaTEmqsHoTNeTb6J5PDhf0/F8uVoQIn7PgyMGBrWBIYEoDLf/0xAP
DPslj9yxuYaI/5fA1da+qpaKq6hskHf2kUoJeLi7j0pIXqV5UAJZF2oe7HYL
QM+Hk9eXO5SAfU2HbFe8P82HEnj7+vW+pNQraBKOg9iyEni2PlNkMMiP5kUJ
9Mb7VmgE+KLfx90K3cdL4MPQ0JCVjQ/Nj1JoNwl0aGjyRpqT8QRuLp2479Gg
IS+aJ6WwY9eubwPvPZHF9KOcHR6l0LQ8IlRCyJPmSyn+/8O2f7uKB/LH46Fw
uxRSUlO3lJVfpHlTChFhYcH9A24of+6mvLnCfDDQ6P0wtNGN5g8fmpubfdMz
XFGbhNzpzzv5cNvF3FugxYXmER9OqjqLJa11QV/wdR8H8GF0fNx+LceZ5hMf
BoKWaKxQc0KSS6cMVLTwYf/dmKfrHjnSvOKD1KJFIW+6zyO0Yigzfn4Z3hcE
zn4SOU/zqwzssT+0VjigY6tfnPTULwOZZcsi0zPsaZ6VQWNTk6Op2Rnkju3j
RORPHp1ea0fzrQwaMDc22aLU9eVvdz4vA11dXQ/1LbY078rB2MwsRInzD2r8
IyN1rUw59Pb3/wgOsaH5Vw638d+PjVuhgQk5mLJM8rAc5kpI3E5MskSiGl7L
v6aQ9xubLGg+Ev7CtUDrdth1Pekth5LycktRsRM0Lyt+ni80zBwd2I0DcDXL
JD8rYB5+PmKOo3PYXhNPV/y8n6mZGc1TlqMO4QNzK6C2rq5IapEZzdcKUOZw
XilxjFGVIS7gCMskbyv/49d4XLRVWSb5Wwnbeu1aLx06hqaexAJzrIQNHA4n
JuYozeNKWI85LEwfrTyNBV/JMslnlpNL8S8EqsAqv345zkya11UT/RbgcPai
Dbg9VjIsk/xmuQHbzQt1lkmes3wIx+deU5ZJvleB5gKD4eGNe1D/TVxwzyp4
+uLFi4WS22neV0303ywsTAs53aptVEllmeQ/y3MasEDqWSb7AMtxTVyfhX0s
k/2AZQ6Wp9/M6v+Y7Ass/7Tb1dWgaLhQ3ePlVro/VE/4r89aw41oP14fTmtX
T9zPJSxMle4TLPe0+097eZplsl+w7PAIG8Y1lsm+wbLwkwu3arksk/2D5chn
2ODaWCb7CMtr8HimjbBM9pMb/3EljhtJCZbJvsLyblyOy6osk/2F5Zc9OEAO
skz2GZZt+zQmWzuyTPYbln8ZwIEXxTLZd36ygKioNLr+XrlmXyXhiRfZf1iW
w/ZU18ky2YdYLsVxu2FSzX9M9iOWd2C5pC9lmexLLD/9Jqr2218sk/2JZasf
eAEyY5nsUyz/fHmz/D+D3aNb
           "]]}, {}}}, Prolog -> {{
          InsetBox[
           FormBox["2000", TraditionalForm], 
           Offset[{-2, -2}, {2000., 0.9094500000000001}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["4000", TraditionalForm], 
           Offset[{-2, -2}, {4000., 0.9094500000000001}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["6000", TraditionalForm], 
           Offset[{-2, -2}, {6000., 0.9094500000000001}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["8000", TraditionalForm], 
           Offset[{-2, -2}, {8000., 0.9094500000000001}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["10000", TraditionalForm], 
           Offset[{-2, -2}, {10000., 0.9094500000000001}], 
           ImageScaled[{1., 1.}]]}, {
          InsetBox[
           FormBox[
            TagBox[
             InterpretationBox[
              StyleBox["\"0.\"", ShowStringCharacters -> False], 0., 
              AutoDelete -> True], ScientificForm], TraditionalForm], 
           Offset[{3, 0}, {0, 0.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            TagBox[
             InterpretationBox[
              StyleBox[
               RowBox[{"\"2.5\"", "\[Times]", 
                 SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
               False], 0.25, AutoDelete -> True], ScientificForm], 
            TraditionalForm], 
           Offset[{3, 0}, {0, 0.25}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            TagBox[
             InterpretationBox[
              StyleBox[
               RowBox[{"\"5.\"", "\[Times]", 
                 SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
               False], 0.5, AutoDelete -> True], ScientificForm], 
            TraditionalForm], 
           Offset[{3, 0}, {0, 0.5}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            TagBox[
             InterpretationBox[
              StyleBox[
               RowBox[{"\"7.5\"", "\[Times]", 
                 SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
               False], 0.75, AutoDelete -> True], ScientificForm], 
            TraditionalForm], 
           Offset[{3, 0}, {0, 0.75}], 
           ImageScaled[{0, 0.}]]}}, 
       PlotRange -> {{0, 10000.125}, {-0.054450000000000005`, 
         0.9094500000000001}}, ImageSize -> {302, 182.}, 
       GridLines -> {{2000., 4000., 6000., 8000., 10000.}, {{-0.25, 
           GrayLevel[0.8501]}, {-0.2, 
           GrayLevel[0.8501]}, {-0.15, 
           GrayLevel[0.8501]}, {-0.1, 
           GrayLevel[0.8501]}, {-0.05, 
           GrayLevel[0.8501]}, {0., 
           GrayLevel[0.8501]}, {0., 
           GrayLevel[0.8501]}, {0.05, 
           GrayLevel[0.8501]}, {0.1, 
           GrayLevel[0.8501]}, {0.15, 
           GrayLevel[0.8501]}, {0.2, 
           GrayLevel[0.8501]}, {0.25, 
           GrayLevel[0.8501]}, {0.25, 
           GrayLevel[0.8501]}, {0.3, 
           GrayLevel[0.8501]}, {0.35, 
           GrayLevel[0.8501]}, {0.4, 
           GrayLevel[0.8501]}, {0.45, 
           GrayLevel[0.8501]}, {0.5, 
           GrayLevel[0.8501]}, {0.5, 
           GrayLevel[0.8501]}, {0.55, 
           GrayLevel[0.8501]}, {0.6, 
           GrayLevel[0.8501]}, {0.65, 
           GrayLevel[0.8501]}, {0.7, 
           GrayLevel[0.8501]}, {0.75, 
           GrayLevel[0.8501]}, {0.75, 
           GrayLevel[0.8501]}, {0.8, 
           GrayLevel[0.8501]}, {0.85, 
           GrayLevel[0.8501]}, {0.9, 
           GrayLevel[0.8501]}, {0.95, 
           GrayLevel[0.8501]}, {1., 
           GrayLevel[0.8501]}, {-0.25, 
           GrayLevel[0.3001]}, {0., 
           GrayLevel[0.3001]}, {0.25, 
           GrayLevel[0.3001]}, {0.5, 
           GrayLevel[0.3001]}, {0.75, 
           GrayLevel[0.3001]}, {1., 
           GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, AspectRatio -> 
       Full, BaseStyle -> {
        FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
         ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, PlotRangePadding -> 
       None, PlotRangeClipping -> True, Background -> GrayLevel[1], 
       FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> None]}},
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    GridBoxSpacings -> {"Columns" -> {{0.5}}}, 
    BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]}], 
   TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
    DisplayFunction -> (StyleBox[
      StyleBox[
       PaneBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
              GridBoxAlignment -> {
               "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
              AutoDelete -> False, 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], 
             "Grid"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], "Grid"], 
        Alignment -> Left, AppearanceElements -> None, 
        ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"], 
       LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Arial"}, 
      Background -> Automatic, StripOnInput -> False]& ), 
    InterpretationFunction :> (RowBox[{"LineLegend", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             
             TemplateBox[<|"color" -> Hue[0.59, 0.7, 0.75]|>, 
              "HueColorSwatchTemplate"], ",", 
             
             TemplateBox[<|"color" -> Hue[0.083, 1., 1.]|>, 
              "HueColorSwatchTemplate"]}], "}"}], ",", 
         RowBox[{"{", 
           RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8770579695289836`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"a42a857f-e5fd-4d89-b56f-5eee89a6b8e0"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.002544609918204793`"}], ",", 
   RowBox[{"\<\"ErrorRate\"\>", "\[Rule]", "0.`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877057969540469*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"d343f75f-fad8-4aa3-abf6-553d2d00b138"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{6, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{3, 6}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{3}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"PLUS\"", "\"MINUS\"", "\"ZERO\""}, 
                    "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                    3, "$Rank" -> 0, "$Version" -> "13.0.3"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 6\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 6\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770579695467467`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"27f8a844-1532-4113-a7b0-039f70ffd71d"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{3.877057969566744*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"436ba66f-44b9-4302-b3b3-62ee5bd20bcd"],

Cell[BoxData[GridBox[{
   {
    RotationBox[
     ItemBox["\<\"actual class\"\>",
      DefaultBaseStyle->"LabeledLabel"],
     BoxRotation->1.5708], 
    GraphicsBox[
     RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {1., 1., 1.}}, {{1., 1., 1.}, {
      0.22500000000000003`, 0.4665, 0.75}, {1., 1., 1.}}, {{
      0.4892045454545455, 0.6483749999999999, 0.8352272727272727}, {1., 1., 
      1.}, {1., 1., 1.}}}, {{0, 0}, {3, 3}}, {0, 1}],
     Background->GrayLevel[1],
     BaseStyle->Directive[
      FontSize -> 7, FontFamily -> "Verdana", FontWeight -> "Thin", 
       FontTracking -> "Condensed"],
     Epilog->{{
        InsetBox[
         FormBox["9", TraditionalForm], {0.5, 2.5}, 
         ImageScaled[{
           Rational[1, 2], 
           Rational[1, 2]}]]}, {
        InsetBox[
         FormBox["11", TraditionalForm], {1.5, 1.5}, 
         ImageScaled[{
           Rational[1, 2], 
           Rational[1, 2]}]]}, {}},
     Frame->True,
     FrameLabel->{None, None},
     FrameTicks->{{{{2.5, 
          FormBox[
           RotationBox["\"PLUS\"", BoxRotation -> 0.], TraditionalForm]}, {
         1.5, 
          FormBox[
           RotationBox["\"MINUS\"", BoxRotation -> 0.], TraditionalForm]}, {
         0.5, 
          FormBox[
           RotationBox["\"ZERO\"", BoxRotation -> 0.], TraditionalForm]}}, {{
         2.5, 
          FormBox["9", TraditionalForm]}, {1.5, 
          FormBox["11", TraditionalForm]}, {0.5, 
          FormBox["0", TraditionalForm]}}}, {{{0.5, 
          FormBox[
           RotationBox["9", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {1.5, 
          FormBox[
           RotationBox["11", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {2.5, 
          FormBox[
           RotationBox["0", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}}, {{0.5, 
          FormBox[
           RotationBox["\"PLUS\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {1.5, 
          FormBox[
           RotationBox["\"MINUS\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {2.5, 
          FormBox[
           RotationBox["\"ZERO\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}}}},
     GridLinesStyle->Directive[
       GrayLevel[0.5, 0.4]],
     ImagePadding->{{All, 18.}, {18., All}},
     ImageSize->300,
     Method->{
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05]}]},
   {"", 
    ItemBox["\<\"predicted class\"\>",
     DefaultBaseStyle->"LabeledLabel"]}
  },
  BaseStyle->{
   FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]},
  GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Center}}},
  GridBoxSpacings->{"Columns" -> {{0.5}}}]], "Output",
 CellChangeTimes->{3.877057969607751*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"579a0cfd-4176-407a-8489-cc870f61dfba"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.877057969514638*^9, {3.8770580106286945`*^9, 
   3.8770580107733603`*^9}},ExpressionUUID->"2571d43e-8542-4cdf-adfd-\
8ee20e76577c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netF", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"-", "0.11"}], "}"}], ",", "\"\<Probabilities\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8770580152316628`*^9, 3.8770580724614997`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"25649843-4de7-4b0a-abc0-a2eb9fa9209c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"PLUS\"\>", "\[Rule]", "2.382108089923464`*^-24"}], ",", 
   RowBox[{"\<\"MINUS\"\>", "\[Rule]", "0.9749382138252258`"}], ",", 
   RowBox[{"\<\"ZERO\"\>", "\[Rule]", "0.02506178617477417`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8770580158720875`*^9, 3.8770580729569454`*^9}},
 CellLabel->"Out[67]=",ExpressionUUID->"806654a6-bb8d-4be6-b85d-9df421fdb456"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["weather forecast", "Subsubsection",
 CellChangeTimes->{{3.877058164895743*^9, 3.8770581691058416`*^9}, {
  3.8770591145282774`*^9, 
  3.8770591179674563`*^9}},ExpressionUUID->"ec8706e0-d085-42fe-8e05-\
a5d92dd7eb5c"],

Cell["\:56db\:5929\:9884\:6d4b\:7b2c\:4e94\:5929", "Text",
 CellChangeTimes->{{3.8770591237925663`*^9, 
  3.8770591280501366`*^9}},ExpressionUUID->"ea66b813-1a4a-4308-aa5f-\
61e3b6d0de3e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"WeatherData", "[", 
    RowBox[{"\"\<Harbin\>\"", ",", "\"\<MeanTemperature\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2000", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2021", ",", "12", ",", "31"}], "}"}], ",", "\"\<Day\>\""}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8770582518345423`*^9, 3.877058276367546*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"56aac923-8030-4a99-beda-a05b2a2b1d38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"Joined", "->", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8770582623767743`*^9, 3.8770582623767743`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"9c0ff40d-e6a4-4ccc-a0bb-a80be80f6ba6"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1:eJxUXXXcE0cTPtwhSHEJ7hDc4XAoFrxQJMWlQGgLxVqCOwR3CO4Q3OFwh8Md
gicvFtzhezPbme8e/gDmtzbP7t7u7DOzm6ztejXqGFPTtEJZNC3yb/Qf/ePQ
J5XVfwsZ0X+5sw37T/Y4IrKvbrS8I/OIpw1Ll4rIZt9oedLBd3laJSNZWxQt
966Q8OqScLGI7DgVLbeKZJhXIiK73mG6N8vw/8pPKhKRjdrD/0t3F43I4T+H
c3nKb18w/L/2d5DsPC7lKb/n9XDWt2RE9mcc8aRyrXsDUq0/RnKgBss1Sbb1
jpaXuqMbbE+yPlfSCY/7iJQvTvhfRsvRifcGXKL8ZrqRrI/CX20k5yd9HD2j
5bwRACsLEP5ZIxk/9Yf3YLT8rGF0DWuoPuPZyP/0eUDp4dSjoD575VHcHo2H
s/sorr8g4Z8+ivujMOHfP4r7k/orEJJ0km2pRjMeqk+vOJrbI33dXUbzfMhP
+KeM5vI0P8w9o7l9SteeSPm8hD/5GJYpv6vcmP/GMyONt7ejpFP7xqQxXH8+
wr9zDNefk/A/jJZpeO4RPmfSsVDeU1pkhb/dWOiPwPixMJ9t2zk9mcJ/byz0
pzvROMZPeHwlxnH71D9m23H8PZCsjR3H7eci/FvGQX+47oxjfai/vPHHc/ns
hL+oyFQ+3CpazhIZ7sykj33UeBgf50bJn43w3xzP+qUg/HEmsP4f90fwF57A
6Zoewd8yWqbpUYHy68Oj5YE0ITTCv34Czx+q33ctWo7kTtg8N+GPOZH1yUP4
C07k9nIQ/ubRciNSMDnhHzLxv/FvFYPwr4mWD0W642A6wn95IuuTivD/kHTK
b8836UllSk74JILH2WQSt6dG9d9J/H18rhTBv3IS9188Gv8Lk/773p6ej6Tb
vk3i7/1dRNZzezn9XkR2N/RK+Uh/+QZ6oT1zmZf1TUr4TS/jS0D4P0v+QERf
V47J/33fS2JG6vPWnyztRdKNfpN5fGJH0sOLo+XIaKRanyIi289M5vqTRGTn
h8mgnyfrFB6vtBHZX2eKfD8ROdBnCtefisbfN0XmB+E/OYXxpI6ku99iui/z
VJ5v9ki6WWvqf/XnuRVJ1/6cCv3pmD9V5lckv+vYVNY3G+F/NZXHN01ENjJM
Azzh6tMYj43wu6dxf5D+zjnT+HvKSvgPSzrp738xjfXPRfjTTuf5S7KtqshU
Xu8xHepzz5zO5dPT+B+Yzv1H/Ws+nc76Un4t9QzOT/3j0GfI90P4u0l6fsI/
bQbvb0UI/74Z/D3lIPzBGVx/PsKfcibndxD+CjN5/6Dyns4zZX0h/JNncnvU
/4HdM3n88hD+x1w+fzHCb5vF+ak9d9lZrD+15+swi/XJTfgnSrrCv3MW9w/p
73gg+UkfV5LZUJ+3FMrGb7N5PS5O+MexPKkk4d8mMuF1BmbLek34E85h/Un2
F58D/RFoM4fXh6KEf4ykU/v6ZpaTlSH8t+dw/5A+vnhzOZ3aN4vMlf2N8Lea
y+NRivCPnMv7DZV3+Tl/Tepv7425bH9QuhF7HugTLjQP+sPeYh7XT/o5h83j
9ssT/nVSvjThvzqP91tqLxBjPvcX6WsrMJ/7g/DozeZz+RKE3zMf8a+ez/YL
1W9eErkc4f8xX+wrwp93AetH9bkaL4D+8f6zAOozVixg+6cs4T+/gO0TSrd/
lXSqz5lrIc9nSvc4F0J5/wCRqb8CSxdy+6Sv7dxCsfcI/yfJT/q7s/t4flJ5
Xz0fjxfVb/7tg/q0xT7+PtX4n/bB+Lrec3pGqt9rX8T4qH7j50WMh8Yz/Nci
7v+KhH/hIp4P1L7zxCJuj8p73izi/lT4My1mfBUIf02RdcL/B8vHKF2ft5jx
kuw+uhj60xeW/NSemX4Jzx+Steosl6byjl5LeP5TedfsJawvjZf3kMjUH8bz
JfD9hdMshfrtVZZyf1D/On9fCvPLM2OpnDcIv8HlS9P3HohayvpQuu2nZYxP
rX+VloE+7q7LYL75pi7j9YXSzb3L/hu/JjS+WnAZ60v5HSmW8/iTvq7yy7m8
mv+dRFbj710O8zG8azmMr/3Rch4fhT/ZCh5vNf5lVnB5mo/+9ivg+wlMWCHn
I8K/YwXrS+n6fazPnXgljIev5ErQx3Rx+iQ1/uNWwvg6tq7k8aL2XHdXwvri
TbAK1guj2CpID7dexf1Hsn205Fff/6ZVPL7U/55bq2C99cddDfMj4FgN+W2/
rub+JFkfsZrHU43/htUwnr7rUp7634y1Rs6PhL/QGtDf8csawOcaKvnV/F8r
+Wn+GVfWsD1SgPBra3k/pfXann8tjwfNZ2fTtbA/eAavlfMP4V+1lutT+9/F
tYyX0m3fMb+eZx3sP+5G68A+8Q1aB/aGuXydnEcJ/3mWS1N7ji/reL8he8KV
cz33B+nrbbAe9DP6r+fvTe1/S1huT/1jP7ue56fC/3E99w+V92TbgPZP3Q2s
D/VfoO8G2O9sizbwekz16ac28PdI/e9+t4H7i+wlXxY/2G9mbT+3n5nw/yXp
JDsW+Ll9so9cx/3c39kI/2s/20d5CX/GjWDvhWts5P6h/PbeGxlfFsI/d6Oc
Fwn/kY2sT2LC/3IjnCcC6TaxPU72tK3aJra/fyL8PTfx+e9Z5DzinrWJ9c1O
+A9ukvNTJN18tonPI3EIf5rNaP9W3gznFVf3zYwvGeGfvpnxUX5j/2a0f0Ob
WX+y5+2ptvB5Yw+d/ypu4fFcH5E9XbbIeZHwT9ki58XIeSSwZwvje0vnvydb
oL/05Fu5POFxl9sK9rOv41bOT+cBc9JWGE9t11Y57xL+h1vhvO1Kuu1JZYI/
4kGkfW/pbdwfaYwI/nYiZ4jI4fHb+DyTOSLbt6PsvLeN9aXztSfRdjjP+0ts
5/46Tef/tpL+PSLbxm7n8lki+fUt23m+Z4zI7jvbGT/xL774O1gmvsIsukPO
SxFZa70D+BLHqB3A57g27uDxJn7Ae3MHrweK/4mzE/idcOGdYq8S/pY7eT8j
Psw5fKfs74R/vcjEl/iv7WR9FP8TcxfUbyu4C/gHvfku0M89ZJesF4R/jcjU
nnl5F/CDmrYb+b98LNek8q4mkk78jfff3cBPGSt38/5F/Fz4wm7gO+3fOF1T
/GfuPbK+Ef6Ge2Q9JfwD9/B40ngElu0BfWzmHuS/Pkt9NF7uHHuh/3319wLf
ZvbbC3ywtmSvnNcI/5m9rG9pwv9hL6/vJHuz7hN7kvDX2cf7TTnC32efnHcI
v28f78/UnvPkPtkfCf9bzp+f8Pkz7xf7mvDX2i/2DOH/c7/Y84R/PssPFP97
bL/Yr4T/1X7uT5LNDIacFwh/DZGpfxxuA/nfOYacDwj/YYP7pyLhf2Fwf5Ac
TnuA9atE+KseYDwVCH+PA7x/keyZeYD7vzzhP3CA+4/0DTw9IPYY4U99UM5P
hF8/yPUR/+zudpD1IX1901iuSfnNfQeBb9dCB7k9Ku9IeYjrp/5wVTgE/LO3
8yFuT33/kw/B9xvefYjx0njaHx/i+hX/bTvM+en78ZQ9LPYG4e9wmPuX9AlM
PCz2K+HfeRj6T39wmPub+s+d5IicTwl/qSOMn8qbvx2B+a2NPyLnPcK/7Qjw
+a7AEeT/Ex5lWfH/xY/y/CQ53Oao2L+Ef8xRsVcJ/+ajsB54bku6Wv/iHeP9
xE74ixzj8STZ1uoYlyd+Vx95jNfDT7T/+48Bf+u7IfXRfmHGPg79rRU+DuuN
o4XIxBe7hh3n8ikJ/7rjwPcaV4+zfrSfhGOcYP1Ithc4wfpReWezE7wfpiX8
nhO8HhAe/+oTvB6SfoFLJ8TeIvw/UNbznhT7j8a/8UlOJ37b989Jxqv47xUn
Yb/QLpzk9ql/HV9P8n7/hvjfXKe4fhvhd54CftoYcEr6P2IfhJeeYr44oR7B
f+4U2zMfIunOT6fA3vBkPy32C+GvJzLx0YG/T3N7iQj/4tNc34+Ifvrp08Ln
0vi/P83j9ygi++xnGE8swv/zGbAXtT5nxD4j/nfhGW7/VUR2nTjD+9lrsn/e
nAH70Mh0lutPFJHDNc+KvRLJb//jLOB1zpN04mM9R8+CfesPS36ylwPpz4m/
JCLbqp8D+1bvdY77J1NEds8Wmexj36FzrB/x0+bzc8C3a2lNXt+ovKOKyfgz
RGTX76b4TyKyd4bkJ30Mw4TzaDjKhPOD/afzYJ86K52H9jxdzwM/7p96Xr4n
wr/3PI8XnQdswfPcP1ReT3EBzhPu8hfEXiL8nS6I/UD4vRe4feJbtd0XeH+h
85Tj0QXxtxH+ZBdB9pa5COdZo/1F8Q8S/gkX5Xsm/Dsugv/Bef8i9xedlzyJ
LwG/7S95Cc+/rkuAzzbukvjnCP9Wkem86b57ifVR/EeCy/z9Ej9nFrsMfJDW
5jLrS+PrGH0Zzu+uTZd5P1P8763L3B75Z4y4V1g/hd9xheun/rL/ekX2B8I/
4gr0t2fDFbE/Cf91Tl+j+N9YV4FfsBW6CuOn/3JV9kvCP/Qq7z9Un2/tVdl/
Cf8VKU/1aTGu8fpI88WR/xro62p6TfznhH/wNeAXjVUiVyL8F68Bv2v/fo31
U/x/nuvA33kaXQd+wj/ousQPEP7l18W+IfznUda/SH7C6855Q84PhL/BDajP
7H8D+EJt6Q3gpxxnb7D+iv/+eAP4JG+2mxKfQPjr3gS+Ktz3Jo+v4r8W3YT2
nKdusj2s+L93nH8NzU9/llusD/HHgdq3xN4m/H/dAv5ZX3BL7BnCf/wWt6f4
39e3gO80M94GflSreRv4bUfv28AXuubelngHwn/kNvC7xkvJT/xxON0dnj8k
26vdgfqcPe/weqL4/1l3eD1Q/o+DXH4S8XWBZ3fkvEb409zl+tX4V76L/H/3
uzx+JPum3wX/i7n/LveH4v+jOD0/9b8jVQDqc1UUWfG/XQKsn5r/UwLgHwnv
CQC/an8i5ak9Z/J70F+ecvfYnqTy/o73uD7F/066B/1v28XlMyr+8+E94Cvd
Se8D3+4rfZ/nC/WX2e4+zE9twn2YP47tkq74/3v35fxH+BM9gP41Sjzg/lTr
X9sHsB/ax7Icpu/PueUB60/6ee48wPGP/xD49UDRhzz+lG5r/VDsccI/6iHw
9e6NnF/x8b6bD3m+KP9XnEewP0RvePB9Olo+gv51DX+E3//6R9wfyv937RHw
neGYj2E9shcUWa1/zR/D/ukZ8pj7j8r71zwGvjRw+TGslzbtCfDVer4nXF59
/02e8Pel1v9/n0B95son4I/QLj5B/9e3J9zfpK8rd5DHg8p7GwZhvzIGBsEf
HV4WhP3Jbga5PdpvnJ+5fE2FP0eI05X/p34I/A+BfiHIb1sSkvMT4T8T4vaU
/fMhxPOT9mdf1ihOJ3vBrIOy1jeK68tI+H0iZyP8J6OE7yL8b6PAXjAyP2V7
U/H/tZ7K+Zbw//mU+1/5/+c/lfMc4T/2FOwJ/yspT/ZRIMMzTid7yFbjmZwX
Cb9bZEp3zxGZ6vcdfgbnEfPFM+ErCX+652j/VH3O9gb1j6vHc+DrvTOfA99u
HHgO/oLw0+esr4p/SP1CzmOEX38h5y3C3+0FxHP4p73g8VHxL/teSLwO4Q+9
YHv+C8W/pHzJ+qj4lwovgd/3dX7J9VN/mZNfgv2u7XkJ9rfj8UvWNx3ht4XZ
3qZ4F2/ZMJxXjA5hOR8S/omS/p7OPzslPUznvwdSX0rCn+QV4PWXeiXnO+K/
f3vF+lwm/nf8K4mXovPftlcSb2NE8Aei5feR48a7MJ3/Er6W8Y+km8Vfw3lQ
a/ua9Y1J+Me85vPKETr/bX7N8/8bnf9uv+b2iF834r1hfIkj9YWLvJHzXUS2
t3oD8VbOkZI/fkT2+N+wvsGIvv4bb5D/j/1W9CH8hd+CP0Fv8Rb6yz3sLfgT
fOveMv64NP5X3zJ+8mdoMd9Jf9H5t8A7ng/Ep7uavZP1JCJ7Pe8Yf66IbKyW
dMV/XHrH8434dvsPkSndmfc9xNt5Gr/n+ii//5/3wO8HVrzn8af2bRekPPEb
+tf3EL/ozvUBZJ/zA8Y/DvjA3yvxJ9qyDxDf6Dj3QdYzwv/pA+Mj/sSb/SPL
pL9R7yPw0eG/PwLfb1/8EeKDnac/yn5I+N9LOpX32z9x+8QPB37+BPy7rY+k
k776wk/iHyX8JyS/in99IzLxSWamz8C3abU+Q3ys44/PwI+55n2G8t6jkl/h
D39mfZT/I/0X3q8V/1n9C+jn7PVF4hkI/+wvEC/tP/QF2gs8/wLjY0v7FeJx
9SpfhQ8h/L9/FX8k4Z/xlecftW8aX9leofLaU8lP4+v46Rvwea5K34Cf93b9
xvOJ5o8x9Rt+/3slXcW/Br+JPUT4U3yH/vCU/w58u7+TpNP3F/B+Fz6G8O/+
zvNP8X+PvkM8szvZD+ADfWV+QLy02f4HxBtrE38AH+3YIbLy/9yX+ijdm1gL
WuOrjZLRstKX8odd0bKqn/rTPi5atqwHzq3RsiU+2nM3Wv4vXpTwJ4jB9ZEc
KBaD66P5ZmsTg9un/tFHx+D6ib90b4oRBP/PrWhZ4aH5ZcaNGfzPXqT+0IpE
y5Z4Zcev0bLFP+MaES1b5p93g6ST/sb1mEHr/hOOFYvTaT7YC8UKWv1bzl9i
Ba18rGdoLMafmvCvjQX1Ba5Ey4r/ovpsMWIHgf/MHzto5UfdTWNz/1D8rm9w
bK6P+FBzVbRs2Q+0S7EZX1Qk3fE9NujvyhMnaF3vvY3iwHgYg+Jwfhqv8PJo
We0n1yL12c9Hyxa+3PklDrdH/ktPzrhB637ubxCX2yN/daB/tGzZz2xLo+X/
9u+IrJ+NG7TaI+6PUl75v7PFY5n4UrNuvKDVn679He+/+ZDqBe1/i+IFrfuh
61Q86R/a/9/FY7xkLxlZ4nP71J/h2vF5PMi+sf8VPwj894L43L7a/4+j7H8d
n8eH7L1AxgRBq31lq5lA+pfsv94JuPxX2v/nJoDyviMiK/v3ZYKg1f7U0ifk
74PsQ0e1hEGrfe7qGS1b7DXvLMmv4j8OJgxa7eHws4Tc34r/TZOIZeKbnZUT
sb4UX+DpnojH8w3Fv09PFLTaj4H9iaB/bVGJoD/0VImDVr7bXTExf1/ZCH+X
xEHrecacIukUr6HtlXQV//EkMc83Ff+RPAn0h7dcEi6v4n86Jglaz3fhSUm4
fyjdvisJ9IfzYRKeT2RPe5Im5fFQ8e+lk0L+QLuknF/FP01IyuuJin/anjTI
6zvhv5eU8RA+X6JkXJ7OH2aJaNkSj625knF5Os87xiaT9ZHwb0nG+lB93jvJ
gtbzjBHfxv1D8yFc1Ba08q/21ragNV7JOcoGeDwbbayvin+7yekqXjkQJznX
R/rYHMm5vIp/apkc8Q8Xmc7HvvUsN1Hn/2vJWV+FP1aKoDW+2VEwBeNV/Ffz
aNnCn3mHiKzO/2tSQH3hyyKr8ddSMj7C68yXMmg9T3qapAS8/n85v4r3DKxM
yfOJ+AnbxZRB63lO/yb1EV/vzp2Kx4fq9zVMFbT6J8yBqVgfxf8uT8V4FX4z
VdDKJ7k+p+L+VvxXjp+gvFFfZIW/H6bbl/wUtMZLO8/8xPWr+P8PnK7i1fxZ
U3N5wheokzpo5RNsfVHWfakZnxr/k6mDVv+B7y3KZuY0rI/i/2qn4XQ1//9M
E7TG87nmc37FN3iPpeH9St1/eJVG7AvCnyEtj6eK/6uRNmjll53utDw/FP83
h+Waiv87nDYI/OcLya/4v3TpuH+In9SrpmP9iF9190gH9flmpuP2Ff93IB2M
r/ZM8iv+P3V6ltX819PD/PN2Sx+08rvGtPT/6Zuf2g/vS8/6kWwPiazGP2UG
bp/q91RgWfHN/s4ZeHyU/2Oy5Ff8954M3P+K/32cAfrXbcuI+Mtm5PYV/90h
I6x32qSMQSuf6diZMWjlZ10PWFb8qDdJJm6f0o1SmQBf+DdOV/ywfXwmGD/n
tkzcPo2fJ5ApaOWb/QkzM37F/xfPDOuBrW3moJXP1sdkhvrdmzPD9+a7nTlo
5TfNeFm4PupfrWgWWC8drbLwekL7mWtkFl5vaH3x+rPAemLcyMLzQfl/Y9uh
v+yF7Tx+Kv65hR3GyzPMDnj86+xB4D+v2nH9i5mV09X9jwJZYT1xN8satPLx
Po/I6vtfnRXWe+1y1qD1fonjR1bA68qbDfrL2zgbf99q/fsnG/c/7QfhFdmC
Vr7afoHzq/tAzq/ZWB8V/58rO3+/Cr8ze9Dq7wgMyA7fi21Z9qCVX9fPZWd9
1Pr3KTusX77sOWA9MuvlgP1L65cjaPWPORbngP3adZrleSr++X2OoNW/bthz
yvmJ8P+cE/Y7e5+c3D+U7lyYE9ZTz4mcPJ6kr/9NTtZf8f+ZcsH42Wrl4vFT
+P/IFbTy3e55IhP/6juai9tT/HcYZS1DbsZD+4+jem4ur8a/V27WX43/7NyM
T83/Q5Jf+X+eS34V/542D8wvZ5U83J/K//t7Hsjvn5EnaOVvA4akkz1oe5on
CPf/fsobtN6XdFfKy/Yr8be+rnl5/pH9bk7Ny/Y08f3avrysv7J/g3nBfnGl
yBe08uPe8vmgPaNTPjjvhL35eH2keBn77nx8viV73fkoX9Aav+FJlp/Lkz3s
L5Mf7P1A+/x8PnhA/OfE/EFrvI6+I3/Qyve67+cPWuPBfIkLBK38qlmyQNDK
J2u/FeDzSGwjgndrASjvvVsAzqdGgoI8/95F5HCxglI/4W1TENpzji7I84Xq
92wqKOMRkf23CnJ7FE8diFsIztO2IoXgfK//Wgj6wz1C8hNf4NtQKGiNLzOv
i5zeIC0KA3/gKFSY+5v4B9cvhVlf4r+8QwuL/R+RjbUiE38RvlI4aOWj7DEc
jI/SnfkdPF9yEf6mDplvhH+wg+cz8SmBVVJexTtfknTis/TvDtDPnacI8DG+
RkXkPEv4BxXh+azuu68oAvU5zhdBvucL1ufNWZTzE99sNCgatPKD4f5Fg1b+
2760qPALNP5ni8L893wsGrTy2f5sxYJWPjFQt5isX4T/b5EV37momKznhP9U
MbFfCP+7YqwfyWaW4kErf6n9XBz5rr+KMz4aH9eC4sj3HC8u50fC/7q4rI+E
P2MJmA/2miVg/Jy9SwStfLhnbgnZnwn/EclPcuBlCdDXlr6k7L+Ev1pJ3p9U
vG/PkpDfN6tk0MqnmgdLBq18vvacyyv+3ZGmlNgDhL8yyt7uKBvTS4l9R/j3
l5L9kfBHcfoO0s+ZqjTInoql5bxL+LuUlvMs4Z9SGuarbS+XV+8l6E8kXcW7
Jy8j5y/CX66M8B+Ev2MZnn/Ev2lezq/ek3DskvLUvuthGdZH8f1Jy8r+SPhL
lw1a/RPhdmWhv+0TyrK+6r2H7WVhfDz3ysL89icqJ/sN4S8hMs1Pm6tc0Mrn
62PLwXrh3lJO+D3Cf6ec8AWEP355Tlf3HYqVF3uN8Ldm+b/7DqPKAz/s3Vge
1hPjZvmg1Z8UjlOB+4/0szsqwPfibFkB+FLP8Aqsj+J711cIWuOVA9dEpv3A
FqsirKd6wYpsv5F+7uYVYfx8QyrC/DDXVGT9qbx2RfITf+7QKsF+5MonMrXv
bVKJ89N+YvyL+cMrJZ32F/vFSryfkL/V+a0S9xfh9eTWhX8k/A11KB8YqHP/
0H0h23Kdx1/Nf1MPWu8TuT/rwtcR/hyV+XtbH9mPzfqVWZ+YhL9/ZW6f2nMs
qSz8IOE/UxnGx/uhctAaj2xkrRK03kcK16kStL6fYe9bBco7fVV4v6b923Oy
Ctgb/rdVYD8PZK7K+pA9Y6tdlfFTvLX+Z9UgxDvPrxq0+od9x6oi3/9K6qP9
R8tYTfwDxHfXqAb8ustdDfrPO6ea2BORdONwNeDXwy+qAX9pT1dd5ktEdlat
zvlVvEOP6sCv+mdWB/43cKA69yel255Vh/b11DXEHxKR3XoNno8UX+3rVoPb
I/vWnCZyNsK/X/KreOdQDf4+yD/gSlmT8ZDsrYCy0blm0HofLjy5powX2X97
JD+173xck9uj9j22WmIvEP6ytUDfQIdakN82qRbyvTtrAd/mflAL+Fxfktpw
XjBL1WZ91HsX7WoDXsf42rzeqHjvbVJe2fsBya/4/oQ/iz1H41/8Zzgv29v+
DOcl5xjJT3yCZ7Okq/Pe7Z/BPxCIV0f8Q4S/aB2e/9Se3qqO7P+Ef6Skk34+
fx3xTxL+G3Xg/KnFqSv7G+EvXJfxEb/talGX66P54R1WV9Ybwr8O84ev1oXz
oj1mPbFnCH+BemLfEf5m9eD85PdIfuqfwOp6cJ63XZZ0dd79UQ/Ox+689YG/
8jWuD/yk+U99rk+d91dyuopPdlzgdBVP5/oq6Yrvy9WA+SR13nU2YPtB8T0D
GvD+qeK9lzUIWuMvnecasH6K7/zUAPwD/uxOOE8H6jnB/2Drx/IlxfcsdgJ/
4j7tZLzEN/reO7k9xXfaGzIexffWacjzQfGdfRqyvorvWNgQ+d4TDYPWeHzj
TUP43sKZGgEfaa/VCOan849GjFed9+c1gvHyH23E/an43nAj7m/F92RozOOj
4v2qN0a+s1dj1l/xfbMbA/9uHmoM/gvtRWPgHx1pm3D/qHjPKk2AX/H+3gT6
y5jRBPwBYaMJ16f4vqdNgE93/tQU9PdUasr4Fd/VtSm3r+Jdpzbl+hTft68p
8Nd6UGSq352iGfBDvvLNwJ9kdmrGeBTfPbkZ+rt2NwP/h+sRy2HFdyVrDnys
UaY516/inds35/FX+Cc2Z30U37ejOfDpnvuSX8U7J/4FxjNQ8heYr7bffgF+
Ux/3C/Dh7q2/8Pet4n3v/gL8q5mgBfDrWvEWOP/biKz47tEtgG/0bmoB/hLj
Vgvgk8NxW0L99iIt4Xt3/toS1gPPiJbcPwr/hpYw3wPXWwJfbIv9K/CheqFf
Ib/7l1/B/+Ib+ivwu+baX+H7067+CvuTI0Yr4L9d+VvBeutt2grmszG4Fegf
XtUK/Cn2S1xexVs7v7eS8zjhz9Ma5ou/UWuoLzCoNedX3/+K1nLeJPznJV3x
/V9aw/rly9lGzgOEv0Ebbk+t/wPaoL9jaRv4fl1n28D34P3I5RW/aWRry/2h
+M66baE9+99tcf1b1Bb8qZ5TXF7F3/vftQX9Allc0L7tZxePh3rv6i9JV/7O
BS5ePxX+4y7E/xplLdNvwNc7av7G6Yrv7c2y8rd45/4G9oVxRGSyj8IvsT57
+nY8P1W8c7V2YG94eraD+vyz2sn5jPAfbAf2iu15O9ZP3fdK0x78L+7K7WG/
9HVvj/6O6e3Z/lD2j9Ee7CNHVHvw37tSdZD4JMJfsYPwQYS/i6QTXx6e0oHL
U7p9r+Sn8s4nHbg9snc8yTuCPeov1xHiLwIdO4L9afN2BPtR39UR7FH3w47c
nuL7k3bi8tSeWboTnA+09p24/yn+1TGhk8RbEf7tnYLWeGjvvU5gnxuJOoP9
Hi7RGeJp7K7Ocp4l/GNFpvo8WzqzPgr/nc5wXgrE7xKEeO9iXYLW9x/11l34
/ER43KO6MN+s3jvc2AXPPze7AP+vxe0K5z2HoyvEB7ladgX/g3d4VxhPY31X
xq/s/2tduT8pHsseq5vE7xD/WbAb8POe5t0k/syI4B/STeKLInJgTTeIh7Nd
QVnXukM8nDtfd9aX4qd8TbpD/Jz5b3fhXyOytqp70Hpf2XFR0mm8XN+6Q/yc
N/fvcH43Gv4O5+PwwN/hfG5f/juXJ32c5u8SnxaRPZ9/5/HIRfhz9AD+LFC/
h/hHCH//HsCv6kt6iD1M+M/0EHuf8H/oEYR416w9JX6J8NftKfEnEdnRt2fQ
Gj/q8vUEfs97sqec7wj/W8mv4n0z9+L5oOKda/cC/s35Zy/ZLwj//F7iHyT8
x0RW+F+JrPi/jG7oH72GW84LhN/txnjPOe6g9f68edgt6xvhf+kOWuOnHel6
S7wU4a/aG/nvHr15vFS878zeXJ/Cf0BkxX8+k/qIL3Om/oNl4qs8+h/gP/B3
+wP8B4FpIiv+d/8frA+1p4cknfRzp/yT5/NPhL/Cn7JfEP7OfwJ/pk2RdOJP
HXsknfhK1+M/Yb55bX+B/8Yoi3K4w18wX+yTJF3xnzv/4v1Ujf8DljUq70/S
h2XKHyjVB+a3rV0fGF99fB/xXxP+bX3kfEv4A31kfyT8CfvKeZXwl+gr9iDh
b9sX+f8xfcW/Tfg39xV7g/DflvLqvet4f4t9SviL/i3xXIS/1d9iDxD+kZKu
4v39nK7i/wM3/hZ+hPDH6Qf8u164H/D97hb9xN9P+IehbK7rx/2n3ru41g/8
WY6Y/WG9cBXoD+17m/WX8zrh9/SXeCrCv7o/jIf9cn85HxP+H/3B3+DJO4Dx
Kv9X4wE8fyi+PfDPAPhebSsHwHqoXxgQtL5P4f46gPHR9+PLNRC+V9M5ENe/
gQPBv+dYNhD4YNc5KU/teT+JTN+XkX2QxCcT/nqDhB8k/P0GCX9E+BcPClrf
a/KcHgTfu//9INaPygfs/4h9Qvjr/AN8ud7nH/h+3Qv/AX+J78Q/uP6/kXQ1
/pn/hfXFUUtkdd/jj3/he/TO+zdovX9gHJV04q/D4X/BvrBnGMz2Cr1H7aw+
GOOdew1G/nv2YLFnCP+hwcBP214Mlv01Ur+e1iPxAYS/iofnB90X8v3u4fJk
H5gzPGCPaAc8EM/teOrh/qX3JVw/DYH4BW+lIRCPYHQdAvZkeKqkxyT8+4Yw
HuIPncEhQev7GZ4UQ4Hf9ZcXmfIHOg1F/JOHgn2n7x4K+rkfDYV4eF+yYWDP
mmWGgX2tdRgG8RaOiZJOfLprx7Cg9b0S7/1hrD/payQezvNF2f8lh0O6/bfh
8j0T/nGSX9n/WyWd6vffRTmQYIR8jxHZVnyE+Fdo/NuMwHiX0SOAH/dtkvLK
/r8l+Ynv1uKNDFrfN3EUGQn+DNevIyF+3jtipKwvhH+DyNSf4esjWX96r8Ue
exR/b+q+Z6FREH/s+WUUxNv4h4pMfHJgrcjqveOro3h+EB49xmg4f7rzj5b1
jvA3HQ3nK3OwpNN4a6tHA1/vuDSa12vF/34fjef/PGPEviH8jcZA/G140Bg8
/60YA3yE87zIiv/7Mgbi5/05x0L/BBqMFX894R8wFvnfpWPhvO4+Oxa+L9/H
sbK+Ef5s46B/tHrjID7f8fc4jPdeNE7iFQj/qXHATxjvxgGfGM4yHvhC+8/j
AY/zr/EQj+ZZMF72e8J/fDzwIYHXUl6995xpAvDDes0JwEe5e09ge0K99zp3
AuhjHpkA/KEWngDxlo70E4Fvc1WbyPqpeO+eE4EvMmZJfvXe8cGJEK9sfz6R
+0vxX2kmsT6Ex1N5Evefeu+j+ySIhwtMl3QV72tMAj5Sj5oE/gt3Ki/jV+/d
VPRyfYr/7+IFfbWpkk6yY6+X9Vf85xNOz0j8uDf5ZK6f9DXKTQb+NdxxMoyf
3TsZ/R+7pLz6/h9OBj7cn3QKjFeg9BQob2s/BfgkfcIU8J+4t08Bvtt3bwrw
hWaiqRBPq5WcCvGrDtdUiP92jZ3K9Sn+a8tU4AeNO1OBjw/Hnwbx1fZiKDtb
T2N9VLzzqGk8vyjdv1HyU3rgJsse9d5L3OncPs0f3cFyE/Xed8vpPN/U+A+f
Dt+HuX469Id2fTqMtyPWDOh/V8EZGO/dfAaMtzGE8//33tUazq/ixe1XZrB+
av5rMyEe25NvJvD9/iYzIb448O9MiBe2rZLy6r2biyyr9yvc3yRd8f+5Z8F8
NxvOQv/PIJZV/LRjucjqvoM5C/hD7+dZwIcbOWbLeY7w15+N9x36z+b2FP+7
ZDbw854zs+F793+YDf6CQNY5MH9sdefA9633xXS3bw7Gu5+cw/NZ4X/L5VV8
upZlLstq/GvPBf7Y9SfK3vlz0f95bK6c/wn/q7lyHiP8GefBfSVnjXkwXzzu
eeBv9c+ZB/tj4PA84NttL+eBv1FPNx/4XHfV+XC/y9djvtzHJfwz50O8uHZw
Pve3Gv9n88Hf50q9gOenGn99Afg3jW4LcP5PW4D49y9gfVS8c2gB2EOelAvl
/En4KywEPj/QeSGsd7YpCzHefc9C9H8/lvKK/7f5YH6ZZX3gv9U6+tj+UPcd
J/nAXnLt9IF97H3gC1p/z8ZIsgj42nCpRcCP2tstAnvYOX4R9I9n2yL4/vyB
RdwezadAwsXI/5dYzPqR/aC3XQz3G9xjFuN9v81SXv3eze3Fwg8R/vhLgL91
FF0C8Q2uVks4v7rvOXIJ2KeGfwnYb+EbS1h/sq/tcZZK/BbhL7wU4sM9LZay
fR2T8A9bKudrwr9uKZxnbNeWQryTHnNZEN77LrAM+Gtfs2VwfjA9yyBeXluz
DPwRjsvLIN7E9WMZ8MPevMuD1vcHjcbLJR6b8P+zHO4f21cu5/MK/f6T88Jy
iE/zfF0O8eL+XCsgnijgXAHnCdvAFVIfjf+yFcA3u8+tkPNoRPZ9WgHnczP7
SohX0+qvlPGIpDv6rRQ+m977XLwS4rG8p1dK/Bvhf78S4s3C9lXAv9vrrOL2
6fe4nH1WQbyWZ+Eq8WfQfe8Tq4B/CbxZhfx/5tUQH6/XWg18jPsPkXMR/nmr
IZ7aPLoa+CPtleQnPsaRYQ3ir76G9afztrfXGrmPG8lvzF4j9zUicvjQGu5P
Ff/9Yo2sL4Q/7VrZX2n8q6wFftn/+1qIJw3MWAvxrrYDayE+Vn+6Ft5fcP+0
DvmfSuuAbzS7Sjrxddq0dbKeEv59Iiv+M7gO+DtvivViLxH+8ut5fyQ53Gk9
xEPbJ68Xfzbh3y2yin9+tF7sS8KfbAPEswfKbJD7f4S/wwbgW/WJG+S8Svh3
iKzi3+9vEPuD8Cf2Q3y5VsoP/LvjNz/0v2ucH/hM71Y/9K9x1w/8aDjBRvBv
2ItvhPcmnG02Qry6ZzSnK3+Nf9NGmC+BWxslnorwx9sE/LpeZBPwc+5fN8H7
FL4Rm8Q+IPwbNkH92o1N4E9xxN4s9g7hL7RZ7BHC/8tmiY8g/EM3A18YXrsZ
+c+rUl69dxJji9gThD//FvAX+ZtugfyBwVsw/nv1FuDn9Utb0P/znetTvy/p
y7NV7ncR/kZbwR+g/bOVyyv+f8VWsYcI//mt4B/wftkq53/Cn3Mb8OHhBtug
/+wDtsl5jPAv3cbzWd1/OLsN6vN/3Ib3H7Jth/lhq7dd+A7C//d28G+5F20X
Po7wn9oO/inz3XaJLyT89h1w/8Lx8w4c/792AL/vXbADxsc4vgP0C7/eAeuF
PdNOmL/OmjvBv+fpvRP8S/65kq7uvxzZietfeCfg1dPvAv+Tu9ouGG9fT0kn
vtyctQviqbVDIpM/zvFcZKrPlWa38EmEv/Ju8I8Z3XcD/x6eLvmpPbuxW+JZ
CX/UbtkvI/uJJ9Ue4Mf9FfeAfRHoskf884R/6p6g9fcj9b17ID7A/WQPxHf7
ku8Fe9Ustxfvu3XaK/wm4ffuhf3UtWsv7N/eh3vhfRQj6T64zxQuvY/1fUXv
vbTfB/Hszgn7gF/3bN8H8QL+e/vkfRjCn2g/5LeV3C/jFZF1137Wl+xN99j9
wE/6tuzn8SB71byzP2h9L09LYAStv7foKGYAv+9qbSD/PcqA+HVjowHvjYRv
GmA/2+MegHhwp+OA3M8j/C0PgP/AP/wA3NcMrD8A8Te265Kf8OixDgKf6y54
EN+7aX6Q9Sf9zCEHIR5GW3sQ/BOOK1Kfeu9FOwT3P735DsF5xGhySO7fEf5/
RVbxz6sOwfnYefGQvP9E+L8dgvOCP/dhwBdoKDLxtbZBh8HfoC8/DPjc5mGw
l32fDwO/b+Y4AvE6WoMjEF/k6H8Ezm+uJUcQ/5kjEH9lfJD8Kv4l61E8/9YV
WfG/fY/ieye+o3Af2H/yKPCBgbdH8b2TLMfgfQ+99jF87+LPYxj/Nf8Y8Afm
sWN43/v1MXj/xpHxOMSLu2ocBz7Z6z7O7an3HuYcB3zhw8eBb7O/lHQV/5vu
BPBHnqonIF7O3+ME8EWBmSfY3lD8z8ETwHfqz04AX+lOfRLeT/HpJzH+s9tJ
4JO16SeR/9h/EuLJXaGTyP+lPAXxm0aFUxj/3vkU6GOfcgrv++85BfyY5/Ep
qN9vOw18UKDsaXgPwNbxNPB5+qTTwDe6d56G+nwPOL/6/UgzyRnwH2ilzyD/
3e4M5HeNP4P897YzyH8GpD713nfCs+A/sZc4C3yxs+1Z4JM9Y87C/PJvPgt4
A7fPAj9ri38O+HW96Dnga92tzvH8VfG/I88h/+0/B/VpN89BvLMjjgnx3K7C
JvS3t4XJ46veux5myvmH8K8zwd9gvyb51XvXMc+Dv8hT4Dz4W/zNMD3gOQ/1
2dacB75cvyz5Vfzzj/PgL/DlvQDx52bjC8j//4vpjpUXYD67Lois5v/XC+Af
NHJdBP467LwI/iL7wIuAx7nsIvibPOcuAh/r/3QRvpdA9kvAV9vqX+L5qd67
6XcJ1gf3YpbVe/K+05d4fqnfO31/CfwLWtbL4E9w1LkM9bn6XIb4Ze/Cy/Ce
h3HiMvDj4TeXwV9qz3wF7hc4a12B92w8f1yB/vbPu4Lf/9ErMB9tr7C8nuEq
+EPd1a/C/Q1fL5HVey+zr8J4aYevwv7geHEV4mtdaa+Bf9Rb5Rrsx8bv14C/
DM+4BvXZD1yT8xXhf3oN37v46Try/5Wu4/rf9Tr4N2zTrsN+ou+7zuOrvv/g
ddgffSluwP5plr8B/get8w3wZzom34D3TFy7bwC/7n10A+wBI9lN7g/13kmZ
mxC/be9wE+57OSdiumfHTbhf5L9/E+ylQOJbUL+t1C2Iz9Z/uwX+cfe4W7Cf
+rZKurr/dvcWvneX8Da8f+Iofhvvv7W5jff/Rt+G+4HGptsQPxC+dRveT7HH
uxO0/r6Ns8gdsBc9v94BPts/4g7w2YENd8Cest24A+/Z6LHvcv+QPu5Cd4V/
I/y/3MX4h6F3IR5aW3dX7icT/qt3wb53xQhAvIU3fwD4UKNpQO6nGhH8gzHd
vjoQtP5+j/NSQM5HdP77HgA+15/nHsb/N7oH8TC2f+7Jeyd0/ltxD86z7vP3
4Lzk+3KP9af2zZz3wb7XnPe5vLJ/B9yH9/1cS+8L30r4z97n+ZCNxv/jfYx/
zvYA9LHXewDxa86/RVb3nxc94P3hG/G/p6S8eu/0Hco2+8Og9f1s/eeHEN/t
/uuh+Gsism/BQznfRGTzuOSn++7aG5QdmR4Bf+6q+Qj4dW/vR5xf/d7X3EcQ
fxg+8gji1+zhR8D3O9M/lvEk/NUeA//g7/kY3mcJzHoM+tsOSflchP/5Y+Db
3GmeAF/iq/wE+EGzO8rajCdB6/veDuMJxGO6oqQ+9XuPqYIQb2pUDEJ8a7iL
yIr/mhoUfyLh3xsU/xzhfxKE9zf8yUMQ7x0oFwI+09YpBHym7g3J/TjCvysE
fKLvIden+CwzaRTw3VqZKIi3dbSPAv7KNSEK+ETv9ijkv+5FwXsx4URPge+z
lxRZvf/hegp8tGfsU9n/Cf+Wp/D+RODOU7GPCX+CZ4i/2DPgc92tnwGf6Bv1
TOwRwr/xmdgrhP+W5Ff8Z9znyP87niP/3fK5vK9J+Ic/R//H+ufibyb815+L
fU74Y72A+eQp+ALK+5u/AP0CQ16A/8K29oWcLwj/lRdyf47way/lfED4870E
f4DZBGVt8Eux5wj/qpesj+J/L76U8y3h/yay+r3T3GHgp8MNwxKPR/gHhfH9
m+WSTvH3HjMM9y38n8PQfiDHK+DLbQ1ewXzS+78S+4jwL3kl9j/hP/MKvg/z
wyvgq7Vsr9H/U/c1jLer72v4Hry+1/BetXHyNfhrwm9FVvxvlje8XtN65qz9
BuK7PX++EX8s4Z//RuwTwn/sDdwfsb1+A/cJ9IxvYT1213gL/lqf+23Q+nsI
5py38L6KduQtvEfuePmW6yf+2JXuncQzEv6q7xB/j3fwvkt45juoz37wHcR7
O5+9g/e4PKnfw30Nv/6ex1e9d97tPetL5W3T34t9Qvj3v4f3V9whqY9kX8oP
sJ+ZFT6Af1zr8gHuQzmmfAD/omvPB7EPCP/jDxB/btg+sj1Cv88cLvtR7jtF
6rd3/Aj8rnMSyp6dH6F9/wMpT/HOgSSfhH+O5LeV/gT+Y73dJ7i/5h7/Cfzb
vm2fgtbfYzQDn+B9Fi3RZ/BXO0p8hvtkrrafoT+9Yz5DvLmx+bPEXxP+259h
/tnjfwH9nUW/gL3qafUFxsM/UvIr/t//Rfh6iv+++QX9/3G+wvvZ7sJfwT/v
a/FV9nfCP+wr2Jfa+q/AbzuufYX4clfMb9Kf5P8u8A38C0azb/j+ieebvDdD
+Nd8g/gI52UpT/y058c3uF/pz/sd/BWBxt/B/rb9+x3se33ld4gvcV/4Du8J
+r5KeeJnzVw/wL7VGv6A85Rj4A94f8O17Ae8N+I9J/kV///pB7wvHs6uhaz3
ee31o+X/7BvC3y9atrzv6Fks+dX573S0bInPDbyPli18oS1rjJDVH6DXiRGy
xnu5+8SA9n0LY4Ss+MwTMaB97W20bImPdmSOyfqq+L9aMbl+9f7HH9GyhY8x
5kXLFr45fDRatsRr2V9Fy//50wl/hlghK3/rqR4rBOf/XrFYP4V/Nsq2w7FC
Vr5KfxEL2nenjR2y8tG+KrFZf8V//x6b8ar3P2bGDln5SseB2CErX+N6yvX9
x3/9FCdkfZ/XqBSH85Mc7hqH61P89zROV/yQc1+ckDV+zhPk+hQf6U8Rl/VT
8e/l44asfIatM8r6ZM6v+Hr37riA1/eIZRXfayaLx7Li/8vGC1n5G0eHeFC/
a2I8GC/vjngwP4z7LKv4wHDi+Fyf4r9Ksaze23b+Fj9k5bc84+LzfFH8/9b4
ISt/HrgbP2Tlt20JE0C6Xlxkxf+0SQD6+EYnAH3MTZJf8V+3E/D4Kf43XkIu
r/i/Igm5vxT//WtCHh/iC40RCXl+qvj3DQkZL+W335D6FP8bO1HIyqd7CiUK
Wd+n8f+SiOtX8c9DE7G+JNvWsaz4av1qImjfHSMxzwfF/+dPHLLyx2bTxPA9
a57E/L0o/Ku5vOILXZcS8/xV3//3xKwP1WfkScLtK/63UZIQ+H/+SRKy+rec
K0RW792fTwLz1/8lCXx/gZxJQ1b/gc0pshr/AUl5fir+eynKvrNJYf6YH5OG
rPy0lj0Z41H46yXj8aZ019/J+PtX9x8WJeP5qta/U5xfvX8efpcM1ke73cb9
r+Lff7YxXjX+f9l4/BX/v4Dl9ur9n+O2kJUPtb2xMX51/yNTcq5f4a+ZHPT3
9U4O34s5NznUpx1NDt+PI5yc+0f5v9KngPngrZYiZPVXGD1ThKz+svCsFNwf
yv9zKEXIyt86n6eA+etJkzJk9a/4K6cMWf0Xge4peX6q/W9GSli/dSMlt6d+
7zgKZV+qVDz+Kv6/YirGr+6/dE3F/UnrmWNqqpA1Hti1N1XIag94n3B+xU8a
yX9iWfk/y0XLV///ewz2Tj9xfWQ/OL0/sf7q/btdP3F/0H7ufyjl1ftfSVPz
+KjfeyyTOmT1P+jtU4N94J6A6b7tqaH/zHssq3h2LXEa1keNf0mR1frvElnx
32PThKz+AWNLGtZP8f930oA+9gRpYTycxdKGrPfzPK3TwnrgH5U2ZOV3Axsx
3XZL6lP7X9x0LKv935EO97+W6bh/1fsvw9NB+9qGdDC+juvpEH+s9Nx/6vcu
C6YPWfl2o3l61o/iF8JD0nN9Kv55reSn+ATnlfQh631Cj5YhZP29Hn++DLz/
ZiP8TUQme9g2OAN/T+r9w1UZuD2KF3FfzMD60vnI9y1atvDPZu6MnF/FfzfK
yO3Tec0xKFq2vCfiWh4tW+J3vGZGrp/iWYzPUh/VH86RKWR9n8TeIFPIej5y
9s8E/eFZkilk5av9ZzL99722ot+HD3zIBP1py5Y5ZD3v6HUzc39Q/7j7Zmb9
VfyHT2Q6D5gnM7P+iv9+J/JHev86S5aQ9X0OV+0sIWu8lvfPLNwfxAcb87OE
rHxO+FgWnm8q/ut1Fsan3v/MaA9Z46U9NURW53+3nfGq90/mRMsWPth2RNKJ
P9Ff2kPAf6TLyvMrbkT2Vc3K/U/vlZs9omXL70Vps7JyfcQvOw5m5e8jF+F/
Junq/evU2WT+EH49W8jK54e7ZWN91Pvf07MxfuIPnPulPPHTnlC2kDW+zp8y
O39/6v3fCtm5fsX/dsnO46XiH6dk5/YU/7knO3+Piv9+LPnV+x+2HKwP8e1a
uRxQ3tFRZMV/TMoRssbHendKuuJ/HuSQ743wJ8nJ+lJ/2kvnZLw0H5ztcsL8
8IwXmdr3b8sZsvLLgUBOOc8Q/kS5WB/1/keJXDA+7ra5QlZ+yDdG8hO/Zm7O
xfURv6bdycXtq/cP4ufmdPV7h0Vzh6x8ibdV7hDwXyNzh6z8bNifm/VR/P9N
Tlf8ujNOHu5/6l9PYZFJH3+LPCErfxoYlofrU+8/rM/D+ir+71oenj8Kf8y8
IevvB/oK5GU8lG42E1m9/zIEZceavHIeIvyX87L+avx/SH7Ff+fNF7Lyk+HG
+SC//d98rC/NP+fKfCErf+m5kE/WN8L/NR/0fyBXfi6vfu+wYX7Gq37vcWB+
GA/3MklX8b/nJJ3Km5/y8/dF/aHlKMCy4j/rF+D21PvH/QowHirvXVwA9DVO
F+D1kr6n8PsCPH7EV9qzFuTxVe+/1Cko9g3h71MQ5o9/YUHWV73/f6Ig10f9
YXsr9dF9Fj1zoZD1vQd3rUKcTvyq749C3J/k3zLnFWL9yT+oHZP89P06XhWC
79OVoTDrq/BXLxyy8oNGL5HV+xezC3P9iv8/XJjbV++fvyjM/UnruSetg/FS
f/urODhd/d7p7w6uT43/TAePl3r/+oAjZPUnu586QlY+3fdTEdnvCH+lImI/
EP5uRULW9yoc04qErO9bufZJelzCH5R0ip81UhSV/oyUD5cvGrK+r2HvXBT2
J+fkojBent1FGQ/ND/+jovB9B5IVC1n9m7ayxcR+IPwdijE+ik92TywG+7Fv
RzEYP/O+5FfvHyUpHgL/Z6niXJ5+D9r1m6STPeAdVzxkfb/E2Irp4bsiE157
whKsP6U7i5cIWe+redqUCHE8Nfm/R5eA/TmwqUTIGp9su12C9Sd7TY9Xku1v
+v0Rd5GSYn8R//1rSWjPHFES939/SRhfxw2R6fcWXbFL8fpP8efeQqWgv41f
SoWsv58ZHloqBPEP60rB/HJeLcX9q+7/xSgt9k9E9ucvzenEjwealg5Z+W6b
pzTUr68Wmd7vc18qLd9/RPZ9l/rIPjbzlBF7JyJrjcvI+kDz/58yPF/V+38r
ynB5Ff99vkzIGp9tfCkD9no4Z9mQ9X6h3VmW8xNe54Cy3B7dR/QsLcv60PnQ
f7ZsyBoPE/goMvHVtuzlQtbf39TrlQtZ36tz/10uBO9fLCrH66viP0+VA35I
e1+O9zt1/rOX5+9P8b8/o+z9q7zsb4R/QXnZrwn/cUlX/O+b8mLPEf5MFUD2
1KwQssbn+3uLTHx1YG4FsfcI/1Epr+KfwpJO/eVOXzFkvU/sq1aR11fFf/es
yOdT9XuPsyvKekP4D1Xk+tTvHT2vCOdzb5pKYh8S/sqVoH/C3SsBv2ifUYnb
U/ffDSmv4t+iKsF5059K5/5U419RB7y2rjrwC/pUHfC69+pwvvU90eG8byav
DHydVr4y8AuOTpXh/O3yVgY+yLurMveP4j8eVg5Z4w/DSatAe/YyVYDfdbav
Av3hmSD5Ff+9vQrwq4F7VZjfovcdbImrAr+nl6wKfIfbVRX4TN/YqsC3mluq
An+n3a0K/KojQTXuH5JdxaoBP+VtXQ38Bcaoasj/beTyNUlf+61qzA8p/jdu
dS6v3j9xVOf8JPtbVmf9Ff87vHrIGo9q21Ad5pd+vTqMpztWDe4PxX8WrAH8
qdm8BvBX2tAawLc61tYAPtF1pQbwx16tJvCTRr6awPeFm9SE/rEPrsn9r+K/
V9WE8fNcrBmyxiP7v9Xk8Vfxv7lrAX9oa1SL8an450G1gK93L+f09tR/PrMW
8NXm51rgf9By1ub6lP+jQW2en4r/7l8b/BfeJbV5/VT855nasJ6GP9QOWeOJ
7dl+5vGk92KcdX/m+kn29P2Z9Vf8v+9n4EcDJ3/m8VLj/47r86j45yx1kP+s
XQf60/enyIr/nV8H+FXteB0eX8V/v64D/ghXxrrQn94adaH/DXdd/p4U/jl1
wT9nP1IXxtP5UvIr/jddPfBP+avWg/kS6FGP+1/x/7PqwXjqB6W8Gv9n9fD7
T10f/DumXh/8d1r3+uBvcUyvD+uTa399HP9Qffg+jJQNwJ8SrtAA+Hx7lwbA
rzunNGB8iu9/3ADmY8Dm5PFXfHc5J4yv3tGJfP8kp/AFhHenk+eHind+4OT+
VvHOSRvyfFXrfemGrK/yd7ZryP2l/H3jGwLfamxrCP7qcIDTlT/RnqgR8M3O
Eo1AP0/bRqCPf0wjLq/8PZsbob/3TiPQV4/fGNYrd1GRFd/dqjHsp+bIxmw/
qfeuNzZmfRTff7Mx8O2uOE2AD/cWbsL6qPeuWzRh/Oq9u2FNhN8i/OtRdl5r
AvywJ2ZT8Lf7CzQVPonwN2sK5W1DmrJ+ZG/oa5rC/uy+3BTsMd+PpuCvNfM2
E76I8DdpFrLel3P8K+kq3nllMzn/E/4LzVgf9fuOX5sxfnXey9VczneEv2Fz
sL+dA5tze2Qve5Y1F76V+O5zzZHv/dSc61d8b45feP6R/a3X/wXKu/uJTPFC
vsWSX913PP0Lnz/o/KR9kPyEz5G1hZy3CX+dFnAe8PZpwfWp9/4WtmD96LwR
PtFCzlN03n0r9VH8izNzSzzv1GrJ68E3wv9HSzlPEYh5LcEfYDvWUvhmwv+q
JeBzZ/gV+f7qv4K/wOz1K5zXtTkiU/yV47CUV+9dvvgV8HjTtoLzoFFFZIpX
Cv/eCvhP+8xWMp8isvNAK5kvEdnztBWcr/0/tQa+KVCpNX8f6r53t9Zcf66I
rE9rzeWJ/3Tvax2yxk/6gq3l/BSRzRRt5HwVkbUKbeR8F5EdndvAedI1uQ2f
14hf9+5uE7K+P2I8aiPnt4gcTtYW9LeXbcv9o/iODm2Bz/NMbIt89462Yt8T
/vttgQ+1JXEh31PKJf4Wwv+bC/gd3zgX66P43q0iK74vIPmpfkfC34BvcxX/
Dfhtb5vfgI83Rv8GfF5402+Ax377N2jPGa8d8JGeIu2Az/X/2g74rcCIdsDf
2/ztWF/if/Qb7cAf4o7dnmXiH32F2oes8ZfmL+2BP9WGtWf91e+9rWsP/Ljr
antZfwh/jA6sn4r3zd8B+Mtw0w7gL7B7OoSs8dHO1R3EX0j4L3UAvtn/XWT1
3kuejnLeJPyNO4L/Qf+no+xvhH+FyKSf73xH2Q8J/xdJV+9d5OoE/gWHs5Oc
Hwj/gE5i/xL+pZ3Enif8ZzuJPUb4P3aSeAzCn70z2ycq3r1eZ7GfCP/fnWV/
IvyLOnP/Ujx24JSUJ9n2vjPrr977sHdhe0D93unPXVg/Fe/+Vxexfwj/gi5i
rxD+E11gvBxvugi/QPgzdZV4FcJfs6vYP4S/t8hq/Od2lf2Z8B/tKvF2hD/c
FeaPJ3038H/4q3UDf1mgZzfWR713Mrsb+L/0Q92AH3Y/78b1K74zTXfgP83K
3WE91X7vzvkV/hndhe8g/EZ36B9vVHdYX41Uv8P6EK74O/hX7F1/B3+ic6rI
xNd69kp+xXc/kfrUfZfkPcBfYSvfA9YLvVMP8F+4vT24PvX97+oB/Lb5sAfw
tVqynrDfOsqITOmu9j2B3/dO6Mnjpfje7T15f4hD+O/1BH+EPXEv4HOdJXux
/lHE97p6AZ/pH9tL9oeIHNjSi/cP9d7x3V7An+oJ3CF+/4Psn2JuHm/l726N
6eYoN9hP2iY38KWOW+6Q9fezXXF7Az/qdfQOWX+/2mjZG+IFwsN7c3+TvWTf
0Fv8nxHZeR3r88T6g9drsg/9Bf/g/qTfdww0/yNkjTe2DZV0Fe+8VtLVeydX
/gA+3Kf9GYL3TvKhrDX9U+Yb4R/8J/S/a5XIxP96L/4J9qnx7U+wd8O5/wJ7
3t5IZPXe86C/uD/o/OBZ/hfY437zr5D1vZHA57/Yf0/2lS1nH2hPb9CH61Pv
XffvA/F1viWSrvjOM33gvKJ97AN8qiNbX1lvCX/dvnC+9PbtC+dvw9cXzufh
k30hXtX+rq/s14Q/y98w3z21/5b4BsL/p8iK75//N9i3tuN/A7+uv/5b/KeE
P2M/4G98NfpBfLPp7gfxPdrcfrI+Ev4jkk7j43rZT/ydhD9dfzz/VO0P+cM9
+sP5wT5L0im/82B/ON95nvWX9Zjwpx6A8V76AIg3snUfwPnVfdfpA2D+uPcP
AP7WFxog+ynhTzkQz78VB0I8uKPLQG5PvXcyZSDU790zUNZfwv9Y6lPvndoG
YbxzuUEQf+vsOIj7W8W7TxoEfIZ/5yDQL/BgEPSnLek/0D966X9k/yT87f4R
e4rwj/8H4sXMbZKu8N/7B+PdE/0L8WGuEv8yf6XO/23/Rb5vzL9sv6h4583/
Ar9lvyPpiu+JP1jsIcJfdDDwef5Wg4FPC4wcjPGeGwcDv6vf5PT8iu+K4+Hy
6vcuC3tYn4qEv4UH+AxtuAf0caz3AH/ruuYBftAbcwjExxoFhrD+Kt692RDg
4+xDhgAf61wzhPtf8d2Xh0D8q/+H5Fd8Z96hEJ9razIU1hv936HAn7lXDuX+
Ue+dXxjK9Su+9+tQ7k9qX8s9DPRzNBwGfJ1r4DDGp/juZcOAvzfODQN+O/xp
GPgH7DmGA7/vrD+c+1O999xvOLTvXzwc4sUDpzG/7cNw4A/1rCPAX+euMwK+
d1+fEcCvmwtHwPhpJ0dAPLfj7QjgS12ZR8J4eGuNhPhy44+RMJ7heSO5fcV3
H+N0j8L/CvN7MoxivIrvrj4K+O9Ar1Hgn7HNGcX1KfyHWVbvx7hfjAL+2pd2
NPhvzCqj0d/TYzSMj2Mm5ncdYFm9R+99Ohr4e+OnMaBvuNIY4Jft3cZwfvXe
97QxoJ9n3xj43vzBMcDXB1KMxfGvMJb1Vf6OzmNhvXFPHgt8tW/3WKjPfIT1
abZxMF8cZcfB/RtXh3HAB3snSn61/u0YB/dhwvfHQXy5Pcl4ltX6X2o8+B88
v42H+eYfx7LyFwa2jkf+OzAe7BM94QTg493FJ/D4KvxtJkA8ujla0hX/vXkC
xAs7bk+A/csVbyKsJ94iE2G/M36dCHx2eITkp3S7fyKvP+q97xsTIR7ZE3sS
8Nv+QpPgflTgl0nA39uGTQJ/ub6O09X9JvfVScCP+2J4YTzN/F457xH+Zl7h
bwi/xwv7pWu1l/Uj+817yQv2sfHdK/FYhD/PZIl3IvyNJ4P95fxnspzXCP8K
SVf89/nJ3P9kTwW+SDrVb8s1Bew13TmF9Se+2j1AZLKPfUunhKz3/8yzU7h9
dd/x0xSwFxzZp8r5kfDXm8r6qN87/Hsq6GMsmsrtKfvv1FTWj+xF+3tJV/av
fRrXp/D/PA38Af6/pkF8fWDBNKjPdmIaxCfob6ZBf7szTYfx89WcDny+2Xt6
yHr/WZs3HfhOx9HpcN5whacDX+1NPwPOY0a1GVzfB4r36TkD+GD77BnAPzsP
zcB47+czuL2YhD/NTClvRPBXnin8eeS8aft9Zsh6P1SfMZPPE/SehtuQ/MTP
+qJm8vgT32ymmgXxYlqlWRI/HpEdXSWd+HDX1FkQD+7dOwvi140ns+A8H04+
W/jzSH328rMh/tfZaTbwpR7vbIgP9e+aDfxM4OFsiL+2JZsDfLReZo7EIxH+
9pKu3vueMEfulxD+7Ziu3Z8j3wvhTzyX06m/XCXnQrye1zUX+BZj7FyZLxE5
vGUuxH/Z786V8Sf8CebB+HqKzQP+yd96HvB7gVHzgN+0bZoH8Zz6rXnA17jj
zgf+yeeYz/qr925bzgf+ShsxX9Z/wr9hPvBZrutYnzfWgpD1vRmj4ALmS27R
/G++AMbXPnQB+BucaxdA/KznygJZ/wm/tlDOC4Q/30KJryH8TRcC368PFlnF
u69aKPePCP9FkdXvHX6T/NSfWh4f8I+ORj7g21yDJF3FOy/3Af9smCKr9y4+
S36S7TkXwfg5GyyS/ZDw918E/e9fIrJ67+LMIt7f1XsPHxeJP5nwZ1ss9i/h
r7uY09V7330Xw/dl+hazPUL1aacWi7+a8L+T/Oq9kyxLYP54ay+R+02E/88l
wqcQ/vmcrvwL9uNcXsUzO18vkfMm4c+4FPxZ/hpLof6Ae6mc1wj/3KWyvxP+
I0vhe3G/RNmXbhnES5tVl4F/Ruu5DPhUx6xl0F+ug8uAv/Y+Wwb+ISP1coh/
D+vLubz6vc/uy2V/JvzTlwOf7tm/PGR9z8gfWg7rZSDlCuBfbRVXQDy53mUF
xNO6p6yA+nx7VkD8rfl4BeNR33/yleBvcZRbCf4cV0dJp/nsnbQS5quxc6XE
+xH+Byvh+7InXSX30Ql/6VVyP5/wt1slfAjhH78K/X/bVkF8v+2elKfx0xOt
DlnfU3GXWM3lVbx329XgjzTHrAb/gLZlNfS3485qxkv95Yq/hvletf8VXQPr
ndFqDcTTh0euEf6Z8G9cA/HGzptrYD/yxFkL/kx/4bUQPx1ogbJt+Foeb8Kn
r18L8fvua2thP/fFXMf6nib+u8A64Bu15iLTfugYsg72K9eadcLf032vy+sg
nt34sQ7si3De9XCfyN5kPdy/cf67HvrXs3I9+EP8F9aH4Peuv64HPLbcGzie
m94H1xtuAPvNPXAD+Pd9yzaIPRTBa54TWd13+7wB7EtHDj/cl3PV98v6FJG9
/fzA3xuLRVbxL6dFVvz3B5ZVfK0z60Yeb8V/19kI8ar+PhuR/1y4Efhu28mN
cF9Sf7sR4hHcmTdBPLWv1iaw180/JF299zF/E8RTO45tgvhp16tNcp+N8GfY
HLK+N2NU3wznoXCvzVC/fc5mrp/8Ic7DmyF+2PNiM9yf9afdgu99VNki/k3C
32MLxNfqM7dAfLX7AOdX7236nnL6f/HeP22F+7mavhX5n25bgX90TdsK50fv
PixvBLfC+SacYpv4nwl/hW1wPnZ2lnT1e0+Tt0F8k3/3Njz/PBJZ4bdtBz5c
L7td9hvC32E7nCd9E1lWfLi5YzvjUfF+D0RW5/8kO3i+qveuS+0APsP7m8jq
vY9xO+A9l/DWHeAfsQckXfGfCXcCf+YpvhP9P212Qv8FRu+E8bVt3gnt6bel
PjX+8XaJfUP4i+zi/qL6zF93QX3ayF3Qnw7/LuBTXTd2AX/tjb0b7nMbhXZD
fHz4l90Y/zZsN7zH4ly3G/wznqu7wV/kj7GH+Q41//OLrMa/2R7g23XPHuBf
3aslv+I/L+0B/4L5fQ/cz9fy7oX4e0fjvRj/+M9eeF/Au2Iv8FHG+b3AX4a/
SLryf+TaB/3pdO4D/TwD9gGf5V+K6YGz+yDe3vZpH/B7evb98L6Du95+iA/3
/b0f+b9F+zHe//R+fO/j/X7gy1x2A/Tx/mxAeeMvA997WGDAemI/YcD34Hxj
QHueTAeAj/bXPAB4A70PcH4V7zvvAPCt+lEpr/jv8AGM/0x/EPhBs9pBuB+g
9ToI4+WYfRDeE3EdOgjx5t7nB4HfNdIcAj42XPkQ+j9+P8TjQ+uFc8Yh4NM9
Bqer+wL+qEOsn/J/pDoM8eS2SofhfoTe9TCv72r8px6G9ca3V2Tl/3hyGOaH
luII+F8c5Y9wfxAf7up0BOrzeiVdxfvvOgLx3eGHKNuTHYX4dWeZo+Cv8rSX
dBX/POEojHdg+1GYT7b7R2E91xMfg/XCXfIY7E8+1zFYr8yxx2B+aVuPgb6O
u1Kf8n8lOA58qrfYcTkvEP7WIqv1f9RxWJ/tm47z/FP7363jgM8T9wSsr37H
CeCfAy1PgH62ESyr90n0DSfkPjHhv34C7CdfrJOw3poFT4K+2i8neT6q+O+h
J4EPd609Ce9Bea+chPerDO0UlA/nOyV8BOFvekrOz4R/8CmwtzyrJF3dd7so
srL/vp0C+9OW5zTEO+iNTsP7Yu5Bp+E9NN9ykdXvfZun5fxD+L+cBv+xI+cZ
sF9dDc7Afubtfwb4bGPJGYivDp85A+3ZP54BfZzZzvL4UPueumfBfvL3PQv8
c8B3FuJpbKfOwnsx+ruzYN+6s5zjdPV7j7XPQfyQ+ec5uI+oLTgH8QiO4+eE
vyD8r88BP+3NaMr9ZMJfw5TzGOF3m8CX2+eaYE87j5gQr+N5aUI8sz/d+ZD1
fcZA1fPyfgXh73ke8c86D3y3++B5OJ/4np2H85CZ+gLEK2mVL8h5jfB3vwD3
p13TJZ34XO/+C8CfGqELcJ4Op7wI51F7xYsSL0b4u0g6xV95plyE85h/z0WY
P4HHF7m/1PgnvwR8iF7uEsT3ujtegvO+b9Il4APMnZfgfKs9vCTx6xHZkfQy
vCfiKn1Z4pUIf7vLwE8b4y8DvxfeJjLlt9+7DPyFM9EViAf2lLgC8bf+tlfE
PxE5XwfGSDrxC7YtV4Bf1e9cAT7XHf8q8JW+old5PVbvPbe6CnyONuqqnH8J
/8arPB7qvYObIqv43zjXIF7VKHwN4lnDLa4Bf2Mfzunq9x2d6yW/eu/62jUY
H3/M68A/Bwpch3hMW/PrEH+uD7kO7zW411yX8zbhv3wd+FPzh9Sv3nvOd0Ps
O8Lf5Ib4Rwn/vyKr945X3pDzAuG/cAPjv7/eAD7MnvumnD8If0OWVTyuZ+BN
iD/2L7sJfGPg3E3gS22fpbx67znHLYnXIPz1b8l9SMLf7xbEK5uLb8n7e4T/
zC2JByH8H1jOT7Ir622xdwh/ndsSr0P4+9yW+APCv/C2nLcJ/8nbyH+/lfy5
CH/mO8A/+mvdkffICP8fdyB+2zZfZIX/2B2un/Rzv+L6PCT7MtyV+ADCX/0u
9I/mviv2COGfcxf4Rdfhu/jex4u7wO8ZaQPAV4erBMB/Ye8RQP57ZgDeJ/Ec
4PLH1HsnT0Wm+RL46R7waTb9Hrxvo3cTWfk/pt2T/ZXw77sH7ZnBe9C/Wsr7
cn+M8Fe4D/3n6nwf+Hfv5PtiTxL+3fclHoDwP0LZbnsA/jpn2QfAP3s6POD5
qPw/Ex/A9xrYIfnV+D94AN+nnuQh4HGXegjfn++3h+j/GfcQ5qO27aH4rwl/
4CHo50r4SPgUwl/8EfDjRptHEK8eHv0I1mP75kc8v9R7V7dR9sR7zPUp/rvI
Y+DPA78+hveCbCMfg/66X/Kr+PcbKPtiPwlZf9/XLPRE+F/C3+IJ3L9wDHsC
9wNc657Aeue9+gTWMyNGEPxn4fxB4LftzYJcH73X7PQEwR/iWR3E934uBSW+
m/B/D8L9IlveEM7/xiF4z8T9T4jx0nzzrQjBezbm+RD4d7WvIegPR64o8Ke4
nFHwvpl3QJTEZxP+pVFw/yZ8NkrsFcL/SepTv3eZ/Snw+Z56T8VfTO+d/P00
ZH2vOrDoKcR7204/hfdK9PdPIT7AbX8G9pvv52fcf/Q+nfnXM8ivLZT89D63
48Qz5H/fPAtZf9/Gm+k52KNGzech6+91h3s/h3h7+7zn0J7z6HP0f4efy/0/
wp/+hdz3I/un2gvwP9h6vYD3SPTZL/D+36EXEG/he/4C37tL81LGPyJrVV5C
fIfj95do/894Cfy+13gJ8bJG1EuM/0kVhvgbe6UwvnfYNSz30yKyZ2pY7MGI
7N8bhvN14ImUp/OjLcUrOO/q5V9B/JK70yux3wi/9xXw7+auV/D+ofZI8iv+
P9lriKdxlXkt6zfhb/8azlfGhNegf3j7a4gvtt9/DfyBM/Eb4Lc9Jd8Av+Z3
vYHzdmDsG7z/vPUN8NX63Tf43nWCt1yfin8r9hbvu7d+y/hU/N/ot8A/ODa9
hfc5XLckv+L/4r6D+g3HO+BXwi3fAT9jH/EO+FrnhncQX+u5/g74LX+s9/A+
RaDge65PxX/+wukq/lYf+h7e13WvfQ98p++KpFN+U/sA73Fo+VlWfJej6Qd4
X8Q1WNJJ9q6S8or/u/gB3/v4hrI9z0d4n8PZ6CPwyZ5BH3n+qfjn5R+5vIr/
NSWd9LN9+Sj7P+HP+Qnep3U3+AR8ka//J3g/xVzyiceP4sG1s5JO+BwfP/F4
VSL82T7z+FJ5b93PwF8afT/zfFf4fZKu4n9Piaz4z3efgb/1ZPkC8eP+2l8g
Xjnw5xeYf7YFX5D/P/4F/APu11/AX+bL+BXig80aXyHeVuv9FeLrHXO/Qry3
68hXxJvuG8a7V/2GfG/PbxBv7pz1De7PeA5+A/7T/0zyK7479Xd4/91W+Tvw
z3r371C/e/p38D/49n+H96DN0HdoX0v1A/wFjoo/AL+ryw+Y394pkl/Fe+/5
gfHujyW/ivdNrkVZ9XWWi5Yt37enY7Rs5fsncbq6jxDYyen/rXcPo2ULH68n
jRFl9Te4S8eIsrbvaxctW/wp5vho2aK/tp3T1f0Bxz1OV+91uBLFBH28JWKy
Pur3TdvGhPLhMdGymn9q/LewrN7rcd6JGQXvm8SPFWUdP3/RWFHW7zXQStLV
fB8VK8rqP9I3xuL+Vf6Om9GyxV/lixM7yjofzcKxo6zrtdYyNrTnGC75lb9r
Pcvq/ov3WrRs8d8aMeMwPvX7tgXiQH/bm8eB/nEOkXS13q2Jw/Wp8b8cB9oL
/BBZvW+VL26U9fcE9SZxeXzU9/5vXBgv38q43D/qe78QF/F/43T1Po0jd7wo
q3/B1TBelPX78w6MF2W1N4xl8Rg/6Rc+Fy1b+GP7Zymvft8jR3xOV/t9/fhR
EO/QT2R133MxyrYz0bLlvTL9Q3yuX+33WRMwXuLHfXUSRFn5WbNPAm6fZM0n
+YnPdZwUWdk7b6NlZf+q9y4yJ+Ty6r5bLZHJ/gn/kTDKGl9sn5+Q61P3HY8l
5O9P+XtfJYTx9mdIxPNXve9dPVGU1f6xuRPx90n66nOiZcv5wH04EY8H6et7
kYjbV/EeaRNHWd/H06omjrLysY4eibl8IGJvu2ZGy8qep98r9B5IHGV979l4
mjjK+nuL4Z+SsH5RZO/rSaKs8SnObkmirPy5Z1oSbo/OF/590bKFnw4EJV3F
+6RMyrJ637RCtGyJv3Z3FpnOA77J0bIlXsXcnZT1I/tVe5yU+0e9b2hLxv1B
7bnKJuP21PuWHf5X1XXHv5R80ezaZfXoneid6J3oneid6J3oneid6J3oneh9
Re9E7wRr2SSItjo/33v33t87+e9+5mXenJl5b+6ce+a++EHj93x80+IHjfux
yF61yb+3PIkfNJ6vtcc1B435v11FzNI+2k96W5uDxvyigclmuT/pec27f9oG
/ZgtoDbtZ52xEgSN+1FPwQQ6/lG2v2UCwUe2aaLaxD9YdyQIGve/jvsJgsb4
hDtGQu0Pmv/5EgYh30mzhEHI9zIuodyf97tetVnvdSch4v8tkZRzvpM8ieR+
xA+YmyQKGvk42+hE8vww37VZyv/je29qfZzv4pfEcj3r/XIllvuz3rFhYnn/
8fcNXYmDxvwZ7g2J5f7E7/quqc18z/fE8v4lvsWSPYm+vwl/vST6/iP8w9Tm
fBdrk+h6RvgvJ5H1gvhI89ckcj/i42xZkur7mfDbk8r7nL/vN1ht5rtWJQV8
pktJBT/zPZ+S6vNJ+DMmCxr5H3fNZHJ/zncwIJmsl6xXrpY8aOS7An2Tq/9C
7V+WXPCRbTuj5Zyv5m3yoDE+4kmTImjUx/orp5Dx5e8T9k6h6xm1f3EKXc+p
/SelnPlcdySFvE+Zr0yZUtdPGr8KKaU+5mt7ptT1m8ZvQUrpbyp3HUsp96P/
e1/I9YtpPALJUqk/RfjLpQrKeUjC3y2V3K844Z+bSvqD+XqflnO+kmAqaS9/
nzBJarkf9ae1TGoZb45XdE4N/eWelVraS7bvENqRZ6mDwFcnTCP4qT57yTTQ
n64OadR/IPxuLWf8+9MAHvPTNHA/W/y0ML+cxdLK/ODzCm3TSv9xvqKpaaV+
zlezN63UT8+j9bH+n/g3R5x0ul4S/sLpZH7R/XyOdEHQ609KFzTGsyy70gWN
fLj9oZQ/4XhVTIvcn8e/gCVojE8EWlh0/Sb8EyzSftbrbkfbec8SNOrRPdHT
S/2cn9maPmg8j2Bqlj5o5NOtY9MHjXyZY2t6fb/aovDf/mkb4om+aBmCxvhA
JHcGeL9ZGmeQ9lF77KMywPPv2pRB+pvfXzcywPs5YMoo85X12jnVzkL4G2SE
9cE5ImPQeH7Hsz5j0Ph9R//VjEFjPmrT94xBo77dmi2TlFN9jrqZpJy/Tzg0
k/oLhH9NJrk/8ZERv15P+UssXzLJ+5nzVWXOrP4d4a+dWf7P3ycelFn9F+Ir
V2bW9Tuq/80XM8P9bB8zi39E/LYzQxZpH+fnr5FF/RfC3z9L0Kg/Ny3PAvez
ntP/kx7b8T4L+CvudFnBP/NVzRo05juJ9Mmq/kCUbVmaNWjMr20/rf/nfCVv
sgaNfKw3dTb116LKA5WyBY3n08y9ssl8Y/91UTbYTzhPZAsa+UTPq2zQHn+K
7OCvmyqoTfVbe2SX/uTzevOzB418p/todp2fUbYvrDbvX5LmkPpYr1s2R9Co
v7B3zaH+E+Gfk0PnV5TtPaz/J3828E8O6Q/W6yTOKTb5g7bSOXX+E/5OOYPG
/IOemTmh//wHc8r96XrTM62P9RoJcoH/6SiRC+p3t88VNPK9vum5BD/nq9yX
K2jUE1n+ygXjYY+XW+7Peu2iuaV+zk/dRss5P/OU3EGjHsW8J7fUT/1he5Rb
32+EP3Ye2P94CuVR/4Lwt8oD+2HTpDxBI99r3ZlH+oO/T/Ugj+Dj79P/kVfw
8Pcp8+eV+liv3Twv7E8t4/MGjXox+7a8sh7z/u1uXn0/Ev7frTK/+bxuXivs
J81NrXI9n1ceo+U8/7dYZb1l/LesQeCrf80n7WG+Onc+9Q8If6N8wDc5RuYL
GvlC98Z8sF/2Xc8n40F8QuRHPvVfCX+O/HI98/X18weN/KpreH7hZ/i89rr8
6h8Q/iv5xT/g73N9k/r4vLstawFpP5/XrlNAxpvPaw8pIPhZr766gPozhN8v
/+d8qtbP+n8+r5+pIPAt7loFgZ/yDZTy//IVrCio/jXhv1BQ5gfna/hQMGjk
h13pC0n/UP4Db/VC0l7OV9KvkPgTvH/3FFL/jfCflXLm/53v9P/MX6YtLP3H
/FWVwtI+1uv2KSx4WK+8RMs5X8OpwjBf3K8LA7/nS1UE+LRIxSJBY7zA4iwC
/WNfWET6n/NVHC8i/c387csi6u8R/uRFpf3M35UvCnyZrXtR4L+c87Sc8R8p
KvOL53+oqLSH+cukxaC/rbZiwPc5uhQDfs89W8sZ/5/4/8jzYjJf+PuUiYoD
Xnup4oDX1bG4+vOEf0Zxef44XnFAyzle8bfYTzg/tbmE3I/KncXF5viAp10J
uT+P/7QSMD9M+0pI/cxfPykB/J4jbklpD+MvUhL619e6pO4XCe/ukkEj328P
qM3fY4xVCtrnLVhKxo/mf6BlKWiveWIp6F/bjlLwPnPe1/8z3hilcbzzlYb5
YWpeWvqP5/u40jB/HV4p53iI+w7W5/utjPrvNN55yuh+j/A3KQPvU/voMvK8
cH7mzWXU3yf8N8vI/Zmv/8UG/LM5ly1ojG/ZGtqCxviJ0yXXt+X8LBtswMf6
r9lgfE0/bPi+z14W1gtHvbLwPnQPKyvtZ33u2rKwnkUu6//5e4Rfy8L7156l
nMxP/h6DvVwQzmcNLif9QetZYJXaHJ++VE7aw+dzPpWD/nJmLI98fc3ycj2/
7weUh/XRtKJ80KgHtZ4vHzTG2x3/lgd+1m2pIO1hf69aBeUXCH/fCtK//D2O
ZRWkv/h7lGcqBI3xdtdbvZ752jQVpX0cn69cEd/3vSvi+25xRfA/nCcrin/H
fGWkovjv5K/5U1ZSPo7wV6wE/Km1ZyXBx/nZFlQCf9p9rBL4G74XanN8Plll
8H8s5SoLHlrf7d0qo783tzLw515fZfBvAsHK0l/s7ySpovwc4S9TRfCzPqFz
FfA3PbOqBI3fL/QfqhI06ldMz/V6ypdtTVgV5oOjZFXBx/g7VMXxd6Md2V81
aMxfaHlaNWjUX9vjVwN+2VVMbdK7eNtWU36S8E9Vm/NT7q0WNOpnbI+rCX7q
P2ec6rA/8BSuDvEQv6M68vWTq+v+mPDvqg77CcfD6tL+t8TXx6wh778ttN8t
UAP4gEiLGsrnE187oUbQmP/avr0G3M91r4aMP81Xb/Sast+K7ovCb60ZNJ6/
NjerGTTqzWxja8p85vPJW/V6zk96u6buH6N+/mi1tD+jyk15aun8i7KtjWvp
eEbZjlG1pH+Z79lUC/hk3w39f5YoO2KqLddzftactWF/b29QO2jMb+EaUTto
1IN519fW/Rfhv1ob+Evz99qCl/MTZ7MHjfpLZ1078POeoWj719j1+SP8l+1y
P+a7vtj1+Sf8metIOednqF0H+a5BdTR+RvhX1gH+x3KxjrSX8X+so/s/wp+h
rsaXCH+NurrfI/z96+p6RPiX15X1m2zbuboyn1if+L4u8MWedPWgPn/Vehpf
JPx968n/Gf/SeuKfEB/nOF1P10fC/6aevI+JH/alri/rDfO9leoDv2npVV/f
n4R/kdiVme89UR/u532l9bE+OUUDWS8Zf4UG6q8T/h4NgF90zm8g9dP/PUfV
Zn16WP9P42lK1lD6g/OzlG0I4+3o2hDiH+45DdUfIvyHGwJ/Hfmnofo3hD9x
I+CT7aUb6f6N8HdqhPhnNpLxYn3ywUZBo37V/KyRzB8e/wSNdX9P+Es0lut5
/Ns3RvzTG2s8m/Dv13Lm+/9qDPy/I14T4O/dRZsIXsbfpon6N4R/ShP1lwj/
Hv0/ldsfNUG+P3ZT3b8S/kJN1f8k/K2aAv9untQU+su2U8o5H4jzQVN93xP+
P5opv0b48zcDftvUopnUx3z/+GY4/tv0es5PcrcZxJt8vzcXm8+n5G0u9+f3
X9PmUh+9D+xjmgP/7trSXPkxwn9Ly1mf/GsLwGfO3QLeh7ZGLeB94hzZAvhk
z8YW6j8Q/ustgP82mVrC/605Wkr9/D3K+i3l//z+H94S3p++dVpO/Ru50lLj
54T/m5ZT/gl71lbSH1Sfq04r5bsI/5BWcj3dP7C6FfDXZn+roDFfhe1zK8FL
9TszOcRmvruWI2jUC/sHOqT9VL9ppQP5/gsOjNd9cEj/0PrhTt8a4se+6q2V
HyT8/Vorn0zxek9riC/bz7YWvMz3v2sN6503bRtYDwJV2og/RfFnc582QWN+
NdsStJ2n2gC/6nndBuLv/lRtpb2fiO+u1Fb6l/NzO9sqXx5lOxa2BX/Mfbwt
+NO+l22Dxu91R5K30/g9jX/5dqpXoPHv3k70DfcoP/m8dnJ/8o+8R9qJf/WG
9AqhdoKf6jMnbS94PxDfb2sPfLqzS3vQb3hmtwe+1f9ne51/Ubbpn/agX7Am
6qDzh/CX6oD+b8cOGu8m/DM6qL8VZUcOdAga9c+WvzvAfstu7oh8Z/GOgpf3
P+066nocZQemddT1Kso27+uo8zfKtj2R+jgfiDNuJ+BrPUU6Qf/4W3fS+Uz4
p3SC/Yp1t9r8fZ5AJ3keOD9LrM6gl/EV7CzlnJ+lpZbTftAysbP6B4R/R2fY
D7nudwa9kzdGF3n/EJ5Avi6o12reBdpjG9dF+ovPZ3q7CD7+HuGdLsBn+3/r
CvyoKW9XqZ/57iZdYbwdo7tqPI7wb+4K+0Pfza66XhP+X7qBPs2SqxvwdfaG
3UBf6HJJOZ/v927oJv3Hes1ravP+94farM/O3h3u76zXHfgEz7DuwI/613YH
Pt50pbvgZX3q1+4aTyb8WXoIHj6fbe8B/IZvcA/xh1ivuKqH6iMI/6Ueur4R
/k89kP/J2BPu763ZU/qX8Q/oCfy289+ego/H1+KU+vn8fTUn8C2mfk7QD1qX
OYHPcpxxwvPnfovlvjS9xP9j/XnlXqA3tfTuBfyufXEv1ZcQvpO9IH7gjWg5
519I2Rv4T3NFtG09e8v1rD9f0Fvax/zesd5yf9Zfv+gN/KMpeR8YH2u5PnB/
Rzcsd8/tA/yKz9dH/UHCH8T/W5L0Bf7YXqYvtM/Vua+MN39vclZf4SuZzz2E
15ufaznn307YT/UChL9kP3g+PB36wXj43f0gHmE60A/4YevTfuJ/cv6J+P1l
fDn/cjGxWV/va9sf5kNkan/gYy17+8vzxfzu4/5yfx7/OAOkP/n5Lqw2f2/U
MQD4X/PkAVI/67F3STnn13A+HKD7L8IfcyDMX3+BgcCnmVoOhHiVdcJAGF/H
9oHI794bqP4+4Y8+CMY7Yh0EemdLs0GAxz52EMRHXFu1nM9f3B4E9QeiDYb4
iznPYNAf2xoPBv2wc9RgiO94Ng2G58t/Y7CMB/PbvwwBPbQ15xCIXzgaDNH9
COEfMQTiP771QyC+F7k6BN6nlu9DoH/t2YaiHr3uUHk+WY89dCi0L7BmKMRP
zJeHgj7Y9mWo4GM9buZhUj+fP6g9DPTj/kHDQG9sWjUMngfrxWHAXzs+qk3r
pzvDcFhPfDWGw/s80n84vA8ty6Xcyfz2ueGw3rreDwe+25tuhOqhCH/VEbrf
Ivx9R8j9Of/w0hHgXzhPj4D2e96MAL7en9oF8W5TZRfou629XKCfdixyQfvd
J7Sc3/+vsDySYiT4L5YKIyE+be8xEvh61/yRwNd6j44EvIHwSOh/c7JREP+2
lR0l/k0Gwt91FPgfnjmjVF9E+A+PkvlFeE3BUcAPWxOPBr7aUXo08KfuTmqz
fzNzNPhTkYOjUY/+bDTw6a4SY0BP4W0/RvhK8ocD08egfmX/GNAL2/5Sm/Ub
8cZKe/l7g0XHir/9K+FtMxb2K6apY4PGfNHWPVrO35d/NFb3H6TfiT0O+Ftf
oXHiv5P/H2k1DvRGlknjlD+g8d45Dvhv14Nx8nx+Jv3OH+NVH0T6pfzjdb/j
i8LfYrzsD1l/PX686sejbOe28ajfujte64+qz//7hKAxP+PPF3zQ+D1Ha9MJ
0n7ajzrGTAB9unvLBNBP+25NCBq/vxT5daLc/zrx2bknQv32RhNV3058/ki9
nvXHGydKf58n/Ncnwv7TbJok7SF9li3HJOBrnPUnwf7bM3wS6Jf96ybBft10
dRLs763fJun+Jsp2ZJ0M/I+7zmTgv31DJqueKsqOrJ6M+mP/ZNBD2j9rOfEh
rkxT5H3L+t1aU/R8S5QdGDhF4180/iunAB7bhSn6fiH8H6bo+57wp5+q8T3C
X32qrB+cb6H/VH3/E37PVN1/EP6zU1G/+m4q8J++tNOAT4xUmQZ8lKXPNH2f
EP4l03R9JPynpkF93tfT9P1P+FNN1/WR8Fearust4XdO1/0A4V84XdrL+aaP
T4f6/S+1Pvq/KYVbbNL/Wsu7dX0k/N3d6q8R/nlaTrbviBv6KxJya7yV8Ced
oedNCL9tBtzf1WWGns8i/LNnSH9Svo/AnzPkflRu/mcG6MttiWYC3+0sNVPj
u4S/40yNXxP+GTOlPtI/mw7q/xn/33o92Q7zLNVTEP7is6D/fe1mqX9L+KfN
Un+L8O+bpfsTwv9E6ouQ7Yo7W/0Nwl9kNvC7gdazga83T5kN89G2e7a0n/n8
wGzd/xL+WHNAD+wvOAf4UVOrOeqPEf6Jc0B/7dgxR8aL2uO+r/Vxvp0Yc4H/
jeSbC/EUS/O5cN7BPm6uvD/o/e3yzgU+2HtnLujLA7/N0/074c87T8pZv99k
HvLZo+cBH+7ZPE/3A4T/5jzdLxP+X+ervozw55oP88fRcD68n9yu+aAn9m2Y
D3xx5Np80FtbfswH/t+efYH8n89f1FsA/LR32AL1nwj/WrE5/mG+sgDOD9i+
Sn2cv92ZZaHyWYTfvlD3/4R/sJazfn/1Qnh/Wi8thPe945OW0/i5My6C9cJX
cxHw4ZEBi+B9bVmxCPhb+3m1ia91/btIxpf01V7LYlz/qy0GvtncbzHEH23L
9Ho+v3FmMbyPPW8Xiz9F/oA/zRLQu5uqLBG8FH+w9l4C/oRj8RJYD90n9f80
f32RJaB3jqRcCvPdUnEpxDvtPZeqPoTwL1iqegzCf0yvz0Lj/2Kp4KP2mpMv
A723rdwy1RsT/m7LwJ/yzF2G/o9vWRC+txlaBs+jNYkH4gWOMh6M53fW8jD5
P7M84M9GDnnAf7I890B77AmXAz/tKrkczmt5O6AdcC8Hfbf5wHLUrz9dDv6U
M/4K9b8If7EVoIfwt10B/phpmtqU78S6dwX6v49XwHlAd5yVgM9XGO2IYyX4
35bJK8E/tu/SctZvP1wJehlvzFXANwcKrNLxjrLNLVdpvCPKtk1YpfGfKNu5
fRXsnzz3VsF+xB99NZzHNOVbrfqDKNvaTMuJr3aMXa3PR5Tt3roa9Nq+2/J/
5lMi0dYA32rJswb2V/bGa/D89ag1wH94N62R9xvvd2+sgfO25l/Wis35RnKu
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
48+XXfqP4iWOZtlDRr7bPTa7jCfj36rljP92dpgflt9ySP8w35cnh/Q342+c
Q+Ybv/9GyfUcvwlsygHtN9/Ucub3f8kpNo9/zpwwvzwNckp/Mf4ROWG+mDbI
///Lt3Atp/Q/8/vfsX53tlxwva9uLnleOZ/O0FzSf6y/X5tLxpv1x5dzSf08
/7/kkv5n/XHm3NI+5rtr5w6B/nqw2Kyntq3KDficF3NL+xj/x9wwPv4MeaS9
zHfWzBMy8sHWAXlCRj7bsTwP9If7nP6f4znp8oaMfL+lWl65np/3vnlxvi/N
K3iY3z2dF56vwJu8Mn94vqexCl7+vmdlK9Tv7GWV9rPeepGUM5/rP2GF+WaK
WKV/+LxFynzwvDkq5IP1wN1Dyjle5pufD+4fOYq25YX+n9f7ZPlDEM8rm1+e
P37eu6rN+TR8+aW9jDeYX/Bx/D5xAajPU7oArAf+TgVCRj7cNKuA1E/rs/VQ
Ad2PE95nBULGeKs7QUFY/3wlCsJ8ibQvqHwI4XUXDBnjK/b9BeF5dv1VUPdr
hDdeoZAxHh8oWkj3+4S/bSFY/2xTC0n7MhD+PYUEH7Xf86iQ1E/rvz92YekP
8i9MhQuDv2d1FA4Z9b6OSYVlvPh71jsLh4x8v+9BYamf+OXIH0WUPyH8BYqI
v0L+kr1FEajPNb5IyBiP8G4rAv5C4G4RmD/m6EXBv7RZi4I/5GxaNGTMp+wZ
UzRk5MP9W4rq/onw39Zy4pet0YpB/Y7cxXT/TvgbFZPx4fj9yGLgj0c2FgsZ
+V7LjWLAx9pNxeV62j+5chQPGfUq3vrFpX3s3w0vDvWb1xfX/TPx2VeL4/7m
W3FpP/mjnqwlQsb8F/46JaQ/6fvppqElQka9k3VNCamPvh/k8JcIGeMT7s8l
YHx9mUqG5PtEhL9WSeXLCP+gkuCf2leW1P1k1P1cF/T/dH/vh5IhY/6QQPpS
IeP3i8w1Skl76P+2/qXU/46ynZ5SIaM+zXO2VMh4ntb/rhTsx0zpSsP+x1q1
tMw/Oo/r6FM6ZNQ3u5eUBr7Yd6q09B/pjSOvS0v7WJ+cuoyOX5Rtr1RGx5fw
O8vI9cQneBeW0fcR4T+u/2d+41UZmU9k21LYgG9zlrdJ/axP7m7T543wz1Ob
84sctYWM+VGtYZs+D1G2I2lZwU/5S9y2svJ+oPb6upSV+vj7YLPVZn7rcFlp
L+fL/acs8H+uROWkvdR/3lLlgD8PdCwH/I95ZjlpL/EltoPlgO90/l1O5jfn
VzCXl/9Te/3Fy+v7kfC3Ly/+BOfLnV4e+DvHvvIho77V/aS8tJfHP26FkDF/
eaRIBeBrLG0qQH32KRWA73ftriDrLfN7AbVZrxyrovQX8efmQmpzfolWFaF/
nRMrqj9N+HdUFHysT/6jkuDh/Nj5K0l7WK/avBLwne5xlYDv9HkrSf00/yJ3
KgHfbvm9MvK5eSvLeDHeJpWBr/eOrqzvU8K7uTK0x3wL67P9WkXXA8KbqwrE
IzwNq8h6QvEIv6uK+ueEf2MVWb85n8z1KuqPEP4fVZSPIPzZq0r9nE+kntgc
z4gMqwrjY1mn15Ntv1IV+HvX16rSH/S8erNUA742YK8m7eP4xRAt5/FeXU3q
I/7XeamatIe/B/mpmvobhLdWdbme+euB1ZX/ILwrqsv85PjF+erAp/v+ra7+
A+G11IDnx1K9Bs7vfjVwfi/Tcj5/cUb/z99/e1sjZPzeoDltTeCPbVVqQv84
e9cUvJwPe3FNeD/4T9aU+xH/b3qt/6d4jjVVLeVnCH/FWvD+dfesBfh8C2pB
/CByrJbcj/NnvKwVMuqp7clrSznZ3m61lW+h8Z1bW+6fhcb3SG2pn2xbSG3+
3mESO7xvPGXsIWO+DX9nO6xXptl24B+tf9pDRv2z47ld+ofXs4R1IH5rmaE2
f8/wQB2tj+LPT+uEjN9P9MavC+troFjdkPH8lLldXeALbdPqyvhliLKde+sC
/+95XBf4Vn+cetreqOtNRerB/LG2rhcy6qkdk+uJf0T5mN276sn74j3xsQ/r
hYz61EjM+rpeR9mWgvWlv4n/tbfUcuLnXBPqh4zn2bzb6wNfHLhXX/Cxvxaj
AfB5tnwNwH9yNmsAfLBnbIOQUS/r39oA+s90p4G8v2k/Y/2tIfgzjjwNZX7Q
91DcjRuGjPm6faMahoz6gsgmvZ6/R32zIfin9l8aQf+7cjaS+c3f82vQCPAF
RjTS9Zzwb1Cb+st2Tf9P/pbzeyPYT3iyNZbraf/ir9sY8JqGNZb7sb+2tnHI
qG9xXNb/83nQL41h/+HL3ETjbTT+tZuEjHoXy+AmsB+zr2qi8SbCf1HLWW/8
sYnGzwh/hqYaPyP8NZtCe20D1OZ8h+eaAh/rf99U+of1RpZmUs7nX6s10/cr
4e3bTNYL1hstbQZ8ue90M9UfEN43zWC/a0nTHPh7e+XmMJ6uXmh7FzUH/iBw
ojnwK+aIlrO+OGULXQ9pvCu0kPZy/oseLYA/8M+X6znfh+lYC2k/66tftFD/
hPAnaynzh8/Llm0p6zHzz11byvPP/NuclrDftPhayv04n3mwJew/XYlbIf9W
ulXIqN8LdGoFfIB5Viu5H+/PD7UCvs35rJX6N4Q/gUP9A8JfwqHxdcLfwSF4
mH93O6Q+5mP2O1RfQPj/cgB/4IvXGvjzSFGxWa9qadta/QnCP7U13M+1R23G
/0ht5l9jt4HxMxduA3ygzaE2620ntQG+ybOzjfrrhP9BG9UzEP6YbRF/gbYw
Ho4WbYGvdI9vK88P53/Y1lbqZ/7xblvgyyzR20H9dqvYrPd1NW0n84X5xzHt
gI8PbGmH/OvtdjKf+Pt90doL/8ff78stNufj8DRqj/zzSLzetKm99B/xzdYb
7eX+jN/UIWTUh7pzdIDx8tXvgPz78A7IR67voHodwn+1Azwvrm8dZH5w/CFr
R+BjA3U6Sv2sLx/aUerj53+NlP+X/8XfUe7P8ZfPHWH++TN1Chn11abanaD9
1kGd4P3iWCn2f/zrhU7Qv74PnZCPTd9Z5g/r62t0lvtxvuf+nQUf9bfL0xni
I96zneF9FnjXWcaP9ebpusD7wVa1C/D7zj5ddL9A+Jd0kfpZb35Kr+f4yxup
77/vV6buKjbHXyp1xfnv7Arzwbewa8iof44c74r8+6uuwDfbU3QD/tJVvhvw
497u3YDPDMzrBvczH8XrbeFuUL8zaXeIt3ls3eV55fdfl+7wfJvmdIf5bj3c
Hd6vjn/U5vdfoh7AF/pK9YD3baRjD9U/Ef6ZPWS+Mv6DUs7fY3T93QPiS15z
T7ADxXtCPMfcvifEM23Te+r+mfDv6wnrl+dJT92fEf64TuDbTUWdEG+0tnFK
/zH+KU7gy927nbp/JPwBJ8SDI7F6QTzaUqgX+Bf2Vr2kfuZjd/SC+wXu94L2
mf/orft5wpu/t/I/hLe52nyeblzvEHyv2tsb/C/TXbU5v/PvfYB/deTtA/jc
TfqA/+Qb3Qf888jmPiFjvmbLrT7gj9p/7QvtceXqGzLqrb0N+4JeJeDqq3wl
4d+o5XEJ//W+Uj/xv84ffQU/n6fM3g/4aX+9fsCHm4b3U70b4V/XD/xfxxX9
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
T3MWSBQ27v89LRIJHv6e4vhE0j7mF7YnChvPF1vvyfX/6aejJw4b+UC3NTGM
p69pYulfPu8+JrH8n/nFrYl1fSX8t6Wc+Q9XtCRge3MnCRv1gYFGScJG/s08
SsuZX92UBOfvjSTSX4zflFTw8XnvHEmlfRxfaJA0bPz+oXVE0rCRv3asTxo2
6rXdV6U+5qd935JC/0SyJhM8zK/VTRYGfnFoMqmPbNeaZPJ/znfhF5u/jxj4
nEzGl/mVzMmhPbbaaDsHJQ8b+SzPyuTSXj7vfyE5jIfpY/KwkZ+zZkgh/cn8
Wo0UYWP+and/Kef8Dj5PirCR/42cTSH9x/rR9ynCwC+mSynjwfkuqqLt7ZNS
2s/62SVSzvps8+mU0L+2NynDRj7YmTqV9Dfnu6iUStrP/JozlYw/88uLUsF4
WE+kEjyM/xXW506ROmyMF/nKp5bnifXD3dXmfB/zU0t7mV8/mlrq43zL4dTS
/3R/b9I0UB6wqc38atc00N+2OWmgv5yH08j9mV//J43MJ863nCitjB/x0abS
aQUP8+udtJz59ZlpZf1i/AfTwvPt+1uuZ740Yk4n92P9aIl00l7mV9ung+fL
uy8dvD8CT9LJeDDeeBaYv7ailrAxXuhsY5H6WC8+xQLvD/9uC9zP9MgC7bHG
Tq/+POEtlB7Wa3er9PJ/5pMnpof2RHakl/Hj8X6QHvrH/kcGqZ/51PwZoL+8
zTNA/YFxej2vV9syQP22uxlgvffkzRiG+FGTjDJ+rI8fk1Gu5+d7S0aYT45b
GeH96/41k1zP+thcmcLGeHCkYSbBx/HzkZlkvBnvxkzwPnZdV5vPh/zIBP0R
yJ5Z5ivxj+b6mWV95fVtuJZnoPFel1nqo/XVcyWz1MfnY75mBv/BlDULrAfW
OlkAn2NIFvCX3KuzSH8z/kty/X/66E9ZpL94vDNlhfe/vVbWsJHfdQ3MCv3j
XZEVxidwXuz/4gcfsoaN/KwtfTapj/xhZ/Vscj31h6ef2swnL8sm85Pxn80m
/cffE3mn5eQPONJmh/2Fu0r2sJHf9fXOHjbmo4gszg77Bcup7NJeOl9of50d
2utKlSNsPK/nrZgD9l+BnjnAnzUvzCH+JeGzHVeb/FXnyxzgz3qS5wyDfqJc
TpkPhMfUPaf8n/3TeTllvaH8hI4jOaU9tD9wh3LKfoC/H5gkl+63CX+ZXHI9
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
      "]]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{3.1556736*^9, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->FrontEndValueCache[{{Automatic, Automatic}, {
      Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}], 
      Charting`DateTicksFunction[
      Automatic, DateTicksFormat -> {Automatic}, "TickLabels" -> None]}}, {{
     Automatic, Automatic}, {{{2.9979072*^9, 
        FormBox[
         StyleBox["\"1995\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.1556736*^9, 
        FormBox[
         StyleBox["\"2000\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.3135264*^9, 
        FormBox[
         StyleBox["\"2005\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.4712928*^9, 
        FormBox[
         StyleBox["\"2010\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.6290592*^9, 
        FormBox[
         StyleBox["\"2015\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         StyleBox["\"2020\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.9446784*^9, 
        FormBox[
         StyleBox["\"2025\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {2.9979072*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.0294432*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.0610656*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.0926016*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.1241376*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.1556736*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.1556736*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.187296*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.218832*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.250368*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.281904*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.3135264*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.3135264*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.3450624*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.3765984*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.4081344*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.4397568*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.4712928*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.4712928*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.5028288*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.5343648*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.5659872*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.5975232*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.6290592*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.6290592*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.6605952*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.6922176*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.7237536*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.7552896*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.818448*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.849984*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.88152*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.913056*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.9446784*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}}, {{2.9979072*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.1556736*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.3135264*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.4712928*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.6290592*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {3.9446784*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
         Rational[1, 72], 0}, 
        Directive[]}, {2.9979072*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.0294432*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.0610656*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.0926016*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.1241376*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.1556736*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.1556736*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.187296*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.218832*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.250368*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.281904*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.3135264*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.3135264*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.3450624*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.3765984*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.4081344*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.4397568*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.4712928*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.4712928*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.5028288*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.5343648*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.5659872*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.5975232*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.6290592*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.6290592*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.6605952*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.6922176*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.7237536*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.7552896*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.818448*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.849984*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.88152*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.913056*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}, {3.9446784*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
        0.009722222222222222, 0.}, 
        Directive[]}}}}],
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{482.25, Automatic},
  Method->{
   "NoShowPlotTheme" -> Automatic, "OptimizePlotMarkers" -> True, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{3.1556736*^9, 3.8498976*^9}, {-31.39, 32.56}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{{}, Automatic}]], "Output",
 CellChangeTimes->{3.877058303054122*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"0c4ebb27-0b42-4b60-bddd-56f5d2a5c2ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"date", ",", " ", "temp"}], "}"}], "=", 
  RowBox[{
   RowBox[{"Normal", "[", "data", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8770585471925926`*^9, 3.8770585609986725`*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"e6086cbf-53ab-457a-897f-a7ba29509001"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"\"Sat 1 Jan 2000 00:00:00\"", 
       StyleBox[
        RowBox[{"\"GMT\"", "\[InvisibleSpace]", "+", "\[InvisibleSpace]", 
          StyleBox["8", NumberMarks -> False, StripOnInput -> False]}], 
        FontColor -> GrayLevel[0.5]]}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"2000", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0"}],
            "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"", ",", "8.`"}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"-", "15"}], "\"\[Degree]C\"", "degrees Celsius", 
     "\"DegreesCelsius\""},
    "Quantity"]}], "}"}]], "Output",
 CellChangeTimes->{3.877058565139631*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"90160d4e-5943-4753-b120-d82730c6b16b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "@", "temp"}]], "Input",
 CellChangeTimes->{{3.877058569944745*^9, 3.877058572150365*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"95b064ab-a10e-4793-adab-742f36a3170d"],

Cell[BoxData["Quantity"], "Output",
 CellChangeTimes->{3.8770585725908675`*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"b2b4b38a-c1af-4c59-86f0-fb8a814775de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data2", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "4"}], "]"}], "]"}], "->", 
     RowBox[{"#", "[", 
      RowBox[{"[", "5", "]"}], "]"}]}], "&"}], "/@", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Normal", "[", "data", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2", ",", "1"}], "]"}], "]"}], ",", "5", ",", 
     "1"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.877058824825968*^9, 3.877058827759575*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"fc321dc0-8839-4f55-9c32-31cd43dd2b45"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "15"}], ",", 
              RowBox[{"-", "16.5`"}], ",", 
              RowBox[{"-", "23.22`"}], ",", 
              RowBox[{"-", "23.06`"}]}], "}"}], "\[Rule]", 
            RowBox[{"-", "19.94`"}]}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "16.5`"}], ",", 
              RowBox[{"-", "23.22`"}], ",", 
              RowBox[{"-", "23.06`"}], ",", 
              RowBox[{"-", "19.94`"}]}], "}"}], "\[Rule]", 
            RowBox[{"-", "21.61`"}]}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "23.22`"}], ",", 
              RowBox[{"-", "23.06`"}], ",", 
              RowBox[{"-", "19.94`"}], ",", 
              RowBox[{"-", "21.61`"}]}], "}"}], "\[Rule]", 
            RowBox[{"-", "19.94`"}]}], ",", 
           TemplateBox[{"7972"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "23.72`"}], ",", 
              RowBox[{"-", "19.94`"}], ",", 
              RowBox[{"-", "19.83`"}], ",", 
              RowBox[{"-", "15.56`"}]}], "}"}], "\[Rule]", 
            RowBox[{"-", "18.89`"}]}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "19.94`"}], ",", 
              RowBox[{"-", "19.83`"}], ",", 
              RowBox[{"-", "15.56`"}], ",", 
              RowBox[{"-", "18.89`"}]}], "}"}], "\[Rule]", 
            RowBox[{"-", "22.67`"}]}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "19.83`"}], ",", 
              RowBox[{"-", "15.56`"}], ",", 
              RowBox[{"-", "18.89`"}], ",", 
              RowBox[{"-", "22.67`"}]}], "}"}], "\[Rule]", 
            RowBox[{"-", "22.61`"}]}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{53.60009765625, {3., 8.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{43.29931640625, {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 94, 31026761111888853060, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{50.3173828125, {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 94, 31026761111888853060, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{37.037109375, {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 94, 31026761111888853060, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{64.001953125, {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[31026761111888853060 === $SessionID, 
   Out[94], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.877058846619193*^9, 3.877059625447101*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"df6a4588-39c4-429a-b1de-2cc12ec6efca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Partition", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", "3", ",", "1", 
   ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770588800007024`*^9, 3.877058888295865*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"4a682dc2-58f0-46cf-a873-1db9cae4b7b6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.877058888704239*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"7be74790-84a1-469f-84f5-2f537ea1a1a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", "data2"}]], "Input",
 CellChangeTimes->{{3.8770589912578564`*^9, 3.87705900568839*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"ebdba6fb-a93d-4aac-9275-9a8e55da5e80"],

Cell[BoxData["7978"], "Output",
 CellChangeTimes->{{3.8770589956669865`*^9, 3.8770590062641277`*^9}},
 CellLabel->"Out[75]=",ExpressionUUID->"2d3a5376-5d65-476f-a3d5-3a16414fc635"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataT", "=", 
   RowBox[{"data2", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "7000"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dataV", "=", 
   RowBox[{"data2", "[", 
    RowBox[{"[", 
     RowBox[{"7001", ";;", 
      RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8770590214013824`*^9, 3.8770590214028826`*^9}, {
  3.8770590930411186`*^9, 3.8770590958717566`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"8919ad3b-8b54-45a4-a238-8f916bda099f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "4", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "4", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "1", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"FlattenLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "4", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "->", "\"\<Scalar\>\""}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8770590265547757`*^9, 3.8770590490959873`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"88e55a42-c589-47c0-8369-287e41eb852f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877059208513957*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"b05c6ec1-abcb-4c5c-96a2-268e5b0f7afc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netT", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "dataT", ",", "All", ",", 
     RowBox[{"ValidationSet", "->", "dataV"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8770592108986883`*^9, 3.8770592108986883`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"90ec77e7-b4df-4e95-9700-89edf8892b66"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"netT", "[", "\"\<LossPlot\>\"", "]"}], "\n", 
 RowBox[{"netT", "[", "\"\<RoundMeasurements\>\"", "]"}], "\n", 
 RowBox[{"netF", "=", 
  RowBox[{"netT", "[", "\"\<TrainedNet\>\"", "]"}]}]}], "Input",
 CellChangeTimes->{{3.8770592356517315`*^9, 3.877059235652728*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"5542db36-c537-4797-9263-8f731865622c"],

Cell[BoxData[
 TemplateBox[{
   GridBox[{{"", 
      ItemBox["\"rounds\"", DefaultBaseStyle -> "LabeledLabel"]}, {
      RotationBox[
       ItemBox["\"loss\"", DefaultBaseStyle -> "LabeledLabel"], BoxRotation -> 
       1.5708], 
      GraphicsBox[{
        AbsoluteThickness[1.25], {{
          Hue[0.083, 1., 1.], 
          LineBox[CompressedData["
1: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
           "]]}, {}}, {{
          Hue[0.59, 0.7, 0.75], 
          LineBox[CompressedData["
1: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
s+puOqqXhMZ10fn/GkzHBw==
           "]]}, {}}}, Prolog -> {{
          InsetBox[
           FormBox["100", TraditionalForm], 
           Offset[{-2, -2}, {100., 1.911}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["200", TraditionalForm], 
           Offset[{-2, -2}, {200., 1.911}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["300", TraditionalForm], 
           Offset[{-2, -2}, {300., 1.911}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["400", TraditionalForm], 
           Offset[{-2, -2}, {400., 1.911}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["500", TraditionalForm], 
           Offset[{-2, -2}, {500., 1.911}], 
           ImageScaled[{1., 1.}]]}, {
          InsetBox[
           FormBox["\"10\"", TraditionalForm], 
           Offset[{3, 0}, {0, 1.}], 
           ImageScaled[{0, 0.}]]}}, 
       PlotRange -> {{0, 413.00454545454545`}, {0.789, 1.911}}, 
       ImageSize -> {302, 182.}, 
       GridLines -> {{100., 200., 300., 400., 500.}, {{0., 
           GrayLevel[0.3001]}, {1., 
           GrayLevel[0.3001]}, {0.30102999566398114`, 
           GrayLevel[0.8501]}, {0.47712125471966244`, 
           GrayLevel[0.8501]}, {0.6020599913279623, 
           GrayLevel[0.8501]}, {0.6989700043360187, 
           GrayLevel[0.8501]}, {0.7781512503836435, 
           GrayLevel[0.8501]}, {0.8450980400142567, 
           GrayLevel[0.8501]}, {0.9030899869919434, 
           GrayLevel[0.8501]}, {0.9542425094393249, 
           GrayLevel[0.8501]}, {1.301029995663981, 
           GrayLevel[0.8501]}, {1.4771212547196624`, 
           GrayLevel[0.8501]}, {1.6020599913279623`, 
           GrayLevel[0.8501]}, {1.6989700043360185`, 
           GrayLevel[0.8501]}, {1.7781512503836434`, 
           GrayLevel[0.8501]}, {1.845098040014257, 
           GrayLevel[0.8501]}, {1.9030899869919433`, 
           GrayLevel[0.8501]}, {1.9542425094393248`, 
           GrayLevel[0.8501]}}}, Frame -> True, Axes -> None, AspectRatio -> 
       Full, BaseStyle -> {
        FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
         ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, PlotRangePadding -> 
       None, PlotRangeClipping -> True, Background -> GrayLevel[1], 
       FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> None]}},
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    GridBoxSpacings -> {"Columns" -> {{0.5}}}, 
    BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]}], 
   TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
    DisplayFunction -> (StyleBox[
      StyleBox[
       PaneBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
              GridBoxAlignment -> {
               "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
              AutoDelete -> False, 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], 
             "Grid"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], "Grid"], 
        Alignment -> Left, AppearanceElements -> None, 
        ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"], 
       LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Arial"}, 
      Background -> Automatic, StripOnInput -> False]& ), 
    InterpretationFunction :> (RowBox[{"LineLegend", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             
             TemplateBox[<|"color" -> Hue[0.59, 0.7, 0.75]|>, 
              "HueColorSwatchTemplate"], ",", 
             
             TemplateBox[<|"color" -> Hue[0.083, 1., 1.]|>, 
              "HueColorSwatchTemplate"]}], "}"}], ",", 
         RowBox[{"{", 
           RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8770592363273582`*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"bc057cf8-d29e-483d-b541-bb76fb8ff7d2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Loss\"\>", "\[Rule]", "10.395575384179793`"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8770592363380513`*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"1d58e5e5-2dd6-46b3-a2f9-ed4675f14019"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart = {
                    "Inputs", "Input"}, 
                   NeuralNetworks`Private`NetChain`part = {"Inputs", "Input"},
                    NeuralNetworks`Private`NetChain`selected = 
                   NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {139., {56.97529296875, 61.62470703125}},
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770592363435373`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"83e0657c-a82a-419a-b8b0-343926a5cd09"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "202"}], ";"}], "\n", 
 RowBox[{"dataV", "[", 
  RowBox[{"[", "n", "]"}], "]"}], "\n", 
 RowBox[{"Round", "[", 
  RowBox[{
   RowBox[{"netF", "@", 
    RowBox[{"dataV", "[", 
     RowBox[{"[", 
      RowBox[{"n", ",", "1"}], "]"}], "]"}]}], ",", ".2"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8770595347224565`*^9, 
  3.8770595489454536`*^9}},ExpressionUUID->"a9ab3acb-5295-45a0-b5c8-\
0ac3623045fa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"3.17`", ",", 
    RowBox[{"-", "0.17`"}], ",", 
    RowBox[{"-", "5.39`"}], ",", 
    RowBox[{"-", "4.17`"}]}], "}"}], "\[Rule]", 
  RowBox[{"-", "3.06`"}]}]], "Output",
 CellChangeTimes->{3.877059535641656*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"f93a224b-9bef-4fd6-9d11-81da27259ea2"],

Cell[BoxData[
 RowBox[{"-", "2.4000000000000004`"}]], "Output",
 CellChangeTimes->{3.877059535644166*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"b1a0a019-0bf6-4fed-8d07-46a6dcac5073"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Round", "[", 
  RowBox[{
   RowBox[{"netF", "@", 
    RowBox[{"{", 
     RowBox[{"3.3", ",", "5.5", ",", "4.0", ",", "4.5"}], "}"}]}], ",", 
   ".2"}], "]"}]], "Input",
 CellChangeTimes->{{3.877059334908003*^9, 3.877059334908003*^9}, {
  3.8770594956241317`*^9, 3.877059514153116*^9}, {3.877059553256147*^9, 
  3.877059559408416*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"185e9994-df24-4dff-bdd1-a01641e9a8de"],

Cell[BoxData["4.6000000000000005`"], "Output",
 CellChangeTimes->{
  3.8770595149025564`*^9, {3.8770595561137686`*^9, 3.87705956002346*^9}},
 CellLabel->"Out[90]=",ExpressionUUID->"96372d09-3600-4092-81ee-c41968ffcc6c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data2022", " ", "=", " ", 
   RowBox[{"WeatherData", "[", 
    RowBox[{"\"\<Harbin\>\"", ",", "\"\<MeanTemperature\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2022", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2022", ",", "10", ",", "31"}], "}"}], ",", "\"\<Day\>\""}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.877059584193508*^9, 3.8770596149040084`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"7292be99-df1e-4ce2-9669-13d182230d59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataTest", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", 
       RowBox[{"1", ";;", "4"}], "]"}], "]"}], "->", 
     RowBox[{"#", "[", 
      RowBox[{"[", "5", "]"}], "]"}]}], "&"}], "/@", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Normal", "[", "data2022", "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "2", ",", "1"}], "]"}], "]"}], ",", "5", ",", 
     "1"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8770596307526655`*^9, 3.877059635856572*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"e2a45957-afed-4f03-a999-db3f49b1bc47"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "19.78`"}], ",", 
      RowBox[{"-", "16.94`"}], ",", 
      RowBox[{"-", "18.06`"}], ",", 
      RowBox[{"-", "20.28`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "15.89`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "16.94`"}], ",", 
      RowBox[{"-", "18.06`"}], ",", 
      RowBox[{"-", "20.28`"}], ",", 
      RowBox[{"-", "15.89`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "20.06`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "18.06`"}], ",", 
      RowBox[{"-", "20.28`"}], ",", 
      RowBox[{"-", "15.89`"}], ",", 
      RowBox[{"-", "20.06`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "14.78`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "20.28`"}], ",", 
      RowBox[{"-", "15.89`"}], ",", 
      RowBox[{"-", "20.06`"}], ",", 
      RowBox[{"-", "14.78`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "20"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "15.89`"}], ",", 
      RowBox[{"-", "20.06`"}], ",", 
      RowBox[{"-", "14.78`"}], ",", 
      RowBox[{"-", "20"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "17.61`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "20.06`"}], ",", 
      RowBox[{"-", "14.78`"}], ",", 
      RowBox[{"-", "20"}], ",", 
      RowBox[{"-", "17.61`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "19.89`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "14.78`"}], ",", 
      RowBox[{"-", "20"}], ",", 
      RowBox[{"-", "17.61`"}], ",", 
      RowBox[{"-", "19.89`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "21.94`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "20"}], ",", 
      RowBox[{"-", "17.61`"}], ",", 
      RowBox[{"-", "19.89`"}], ",", 
      RowBox[{"-", "21.94`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "20.89`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "17.61`"}], ",", 
      RowBox[{"-", "19.89`"}], ",", 
      RowBox[{"-", "21.94`"}], ",", 
      RowBox[{"-", "20.89`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "23.67`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "19.89`"}], ",", 
      RowBox[{"-", "21.94`"}], ",", 
      RowBox[{"-", "20.89`"}], ",", 
      RowBox[{"-", "23.67`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "16.72`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "21.94`"}], ",", 
      RowBox[{"-", "20.89`"}], ",", 
      RowBox[{"-", "23.67`"}], ",", 
      RowBox[{"-", "16.72`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "14.44`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "20.89`"}], ",", 
      RowBox[{"-", "23.67`"}], ",", 
      RowBox[{"-", "16.72`"}], ",", 
      RowBox[{"-", "14.44`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "19.61`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "23.67`"}], ",", 
      RowBox[{"-", "16.72`"}], ",", 
      RowBox[{"-", "14.44`"}], ",", 
      RowBox[{"-", "19.61`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "21.61`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "16.72`"}], ",", 
      RowBox[{"-", "14.44`"}], ",", 
      RowBox[{"-", "19.61`"}], ",", 
      RowBox[{"-", "21.61`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "21.44`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "14.44`"}], ",", 
      RowBox[{"-", "19.61`"}], ",", 
      RowBox[{"-", "21.61`"}], ",", 
      RowBox[{"-", "21.44`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "21.72`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "19.61`"}], ",", 
      RowBox[{"-", "21.61`"}], ",", 
      RowBox[{"-", "21.44`"}], ",", 
      RowBox[{"-", "21.72`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "21.33`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "21.61`"}], ",", 
      RowBox[{"-", "21.44`"}], ",", 
      RowBox[{"-", "21.72`"}], ",", 
      RowBox[{"-", "21.33`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "22.06`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "21.44`"}], ",", 
      RowBox[{"-", "21.72`"}], ",", 
      RowBox[{"-", "21.33`"}], ",", 
      RowBox[{"-", "22.06`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "18.06`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "21.72`"}], ",", 
      RowBox[{"-", "21.33`"}], ",", 
      RowBox[{"-", "22.06`"}], ",", 
      RowBox[{"-", "18.06`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "17.67`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "21.33`"}], ",", 
      RowBox[{"-", "22.06`"}], ",", 
      RowBox[{"-", "18.06`"}], ",", 
      RowBox[{"-", "17.67`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "17.11`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "22.06`"}], ",", 
      RowBox[{"-", "18.06`"}], ",", 
      RowBox[{"-", "17.67`"}], ",", 
      RowBox[{"-", "17.11`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "15.72`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "18.06`"}], ",", 
      RowBox[{"-", "17.67`"}], ",", 
      RowBox[{"-", "17.11`"}], ",", 
      RowBox[{"-", "15.72`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "15.28`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "17.67`"}], ",", 
      RowBox[{"-", "17.11`"}], ",", 
      RowBox[{"-", "15.72`"}], ",", 
      RowBox[{"-", "15.28`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "14.72`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "17.11`"}], ",", 
      RowBox[{"-", "15.72`"}], ",", 
      RowBox[{"-", "15.28`"}], ",", 
      RowBox[{"-", "14.72`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "14.44`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "15.72`"}], ",", 
      RowBox[{"-", "15.28`"}], ",", 
      RowBox[{"-", "14.72`"}], ",", 
      RowBox[{"-", "14.44`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "14.89`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "15.28`"}], ",", 
      RowBox[{"-", "14.72`"}], ",", 
      RowBox[{"-", "14.44`"}], ",", 
      RowBox[{"-", "14.89`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "15.78`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "14.72`"}], ",", 
      RowBox[{"-", "14.44`"}], ",", 
      RowBox[{"-", "14.89`"}], ",", 
      RowBox[{"-", "15.78`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "16.22`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "14.44`"}], ",", 
      RowBox[{"-", "14.89`"}], ",", 
      RowBox[{"-", "15.78`"}], ",", 
      RowBox[{"-", "16.22`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "15.22`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "14.89`"}], ",", 
      RowBox[{"-", "15.78`"}], ",", 
      RowBox[{"-", "16.22`"}], ",", 
      RowBox[{"-", "15.22`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "15.83`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "15.78`"}], ",", 
      RowBox[{"-", "16.22`"}], ",", 
      RowBox[{"-", "15.22`"}], ",", 
      RowBox[{"-", "15.83`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "16.78`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "16.22`"}], ",", 
      RowBox[{"-", "15.22`"}], ",", 
      RowBox[{"-", "15.83`"}], ",", 
      RowBox[{"-", "16.78`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "18.61`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "15.22`"}], ",", 
      RowBox[{"-", "15.83`"}], ",", 
      RowBox[{"-", "16.78`"}], ",", 
      RowBox[{"-", "18.61`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "17.56`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "15.83`"}], ",", 
      RowBox[{"-", "16.78`"}], ",", 
      RowBox[{"-", "18.61`"}], ",", 
      RowBox[{"-", "17.56`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "13.72`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "16.78`"}], ",", 
      RowBox[{"-", "18.61`"}], ",", 
      RowBox[{"-", "17.56`"}], ",", 
      RowBox[{"-", "13.72`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "11.61`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "18.61`"}], ",", 
      RowBox[{"-", "17.56`"}], ",", 
      RowBox[{"-", "13.72`"}], ",", 
      RowBox[{"-", "11.61`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "12.78`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "17.56`"}], ",", 
      RowBox[{"-", "13.72`"}], ",", 
      RowBox[{"-", "11.61`"}], ",", 
      RowBox[{"-", "12.78`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "9.5`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "13.72`"}], ",", 
      RowBox[{"-", "11.61`"}], ",", 
      RowBox[{"-", "12.78`"}], ",", 
      RowBox[{"-", "9.5`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "10.94`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "11.61`"}], ",", 
      RowBox[{"-", "12.78`"}], ",", 
      RowBox[{"-", "9.5`"}], ",", 
      RowBox[{"-", "10.94`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "12.44`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "12.78`"}], ",", 
      RowBox[{"-", "9.5`"}], ",", 
      RowBox[{"-", "10.94`"}], ",", 
      RowBox[{"-", "12.44`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "17.28`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "9.5`"}], ",", 
      RowBox[{"-", "10.94`"}], ",", 
      RowBox[{"-", "12.44`"}], ",", 
      RowBox[{"-", "17.28`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "19.5`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "10.94`"}], ",", 
      RowBox[{"-", "12.44`"}], ",", 
      RowBox[{"-", "17.28`"}], ",", 
      RowBox[{"-", "19.5`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "18.11`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "12.44`"}], ",", 
      RowBox[{"-", "17.28`"}], ",", 
      RowBox[{"-", "19.5`"}], ",", 
      RowBox[{"-", "18.11`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "17.28`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "17.28`"}], ",", 
      RowBox[{"-", "19.5`"}], ",", 
      RowBox[{"-", "18.11`"}], ",", 
      RowBox[{"-", "17.28`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "14.78`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "19.5`"}], ",", 
      RowBox[{"-", "18.11`"}], ",", 
      RowBox[{"-", "17.28`"}], ",", 
      RowBox[{"-", "14.78`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "15.78`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "18.11`"}], ",", 
      RowBox[{"-", "17.28`"}], ",", 
      RowBox[{"-", "14.78`"}], ",", 
      RowBox[{"-", "15.78`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "13"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "17.28`"}], ",", 
      RowBox[{"-", "14.78`"}], ",", 
      RowBox[{"-", "15.78`"}], ",", 
      RowBox[{"-", "13"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "16.28`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "14.78`"}], ",", 
      RowBox[{"-", "15.78`"}], ",", 
      RowBox[{"-", "13"}], ",", 
      RowBox[{"-", "16.28`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "17.44`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "15.78`"}], ",", 
      RowBox[{"-", "13"}], ",", 
      RowBox[{"-", "16.28`"}], ",", 
      RowBox[{"-", "17.44`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "17.72`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "13"}], ",", 
      RowBox[{"-", "16.28`"}], ",", 
      RowBox[{"-", "17.44`"}], ",", 
      RowBox[{"-", "17.72`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "17.22`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "16.28`"}], ",", 
      RowBox[{"-", "17.44`"}], ",", 
      RowBox[{"-", "17.72`"}], ",", 
      RowBox[{"-", "17.22`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "11.28`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "17.44`"}], ",", 
      RowBox[{"-", "17.72`"}], ",", 
      RowBox[{"-", "17.22`"}], ",", 
      RowBox[{"-", "11.28`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "6.89`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "17.72`"}], ",", 
      RowBox[{"-", "17.22`"}], ",", 
      RowBox[{"-", "11.28`"}], ",", 
      RowBox[{"-", "6.89`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "3"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "17.22`"}], ",", 
      RowBox[{"-", "11.28`"}], ",", 
      RowBox[{"-", "6.89`"}], ",", 
      RowBox[{"-", "3"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "5.56`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "11.28`"}], ",", 
      RowBox[{"-", "6.89`"}], ",", 
      RowBox[{"-", "3"}], ",", 
      RowBox[{"-", "5.56`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "5.61`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "6.89`"}], ",", 
      RowBox[{"-", "3"}], ",", 
      RowBox[{"-", "5.56`"}], ",", 
      RowBox[{"-", "5.61`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "4"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "3"}], ",", 
      RowBox[{"-", "5.56`"}], ",", 
      RowBox[{"-", "5.61`"}], ",", 
      RowBox[{"-", "4"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "4"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5.56`"}], ",", 
      RowBox[{"-", "5.61`"}], ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "4"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "6.94`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5.61`"}], ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "6.94`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "2.56`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "6.94`"}], ",", 
      RowBox[{"-", "2.56`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "2"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4"}], ",", 
      RowBox[{"-", "6.94`"}], ",", 
      RowBox[{"-", "2.56`"}], ",", 
      RowBox[{"-", "2"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "6.61`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "6.94`"}], ",", 
      RowBox[{"-", "2.56`"}], ",", 
      RowBox[{"-", "2"}], ",", 
      RowBox[{"-", "6.61`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "7.83`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2.56`"}], ",", 
      RowBox[{"-", "2"}], ",", 
      RowBox[{"-", "6.61`"}], ",", 
      RowBox[{"-", "7.83`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "4.83`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2"}], ",", 
      RowBox[{"-", "6.61`"}], ",", 
      RowBox[{"-", "7.83`"}], ",", 
      RowBox[{"-", "4.83`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "1.33`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "6.61`"}], ",", 
      RowBox[{"-", "7.83`"}], ",", 
      RowBox[{"-", "4.83`"}], ",", 
      RowBox[{"-", "1.33`"}]}], "}"}], "\[Rule]", "4.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7.83`"}], ",", 
      RowBox[{"-", "4.83`"}], ",", 
      RowBox[{"-", "1.33`"}], ",", "4.11`"}], "}"}], "\[Rule]", "3.72`"}], 
   ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4.83`"}], ",", 
      RowBox[{"-", "1.33`"}], ",", "4.11`", ",", "3.72`"}], "}"}], "\[Rule]", 
    "0.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.33`"}], ",", "4.11`", ",", "3.72`", ",", "0.72`"}], 
     "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4.11`", ",", "3.72`", ",", "0.72`", ",", "1"}], "}"}], 
    "\[Rule]", 
    RowBox[{"-", "1.22`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3.72`", ",", "0.72`", ",", "1", ",", 
      RowBox[{"-", "1.22`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "2.94`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.72`", ",", "1", ",", 
      RowBox[{"-", "1.22`"}], ",", 
      RowBox[{"-", "2.94`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "0.67`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "1.22`"}], ",", 
      RowBox[{"-", "2.94`"}], ",", 
      RowBox[{"-", "0.67`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "4.94`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.22`"}], ",", 
      RowBox[{"-", "2.94`"}], ",", 
      RowBox[{"-", "0.67`"}], ",", 
      RowBox[{"-", "4.94`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "7.56`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2.94`"}], ",", 
      RowBox[{"-", "0.67`"}], ",", 
      RowBox[{"-", "4.94`"}], ",", 
      RowBox[{"-", "7.56`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "5.11`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "0.67`"}], ",", 
      RowBox[{"-", "4.94`"}], ",", 
      RowBox[{"-", "7.56`"}], ",", 
      RowBox[{"-", "5.11`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "4.5`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4.94`"}], ",", 
      RowBox[{"-", "7.56`"}], ",", 
      RowBox[{"-", "5.11`"}], ",", 
      RowBox[{"-", "4.5`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "2.06`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "7.56`"}], ",", 
      RowBox[{"-", "5.11`"}], ",", 
      RowBox[{"-", "4.5`"}], ",", 
      RowBox[{"-", "2.06`"}]}], "}"}], "\[Rule]", 
    RowBox[{"-", "1.78`"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "5.11`"}], ",", 
      RowBox[{"-", "4.5`"}], ",", 
      RowBox[{"-", "2.06`"}], ",", 
      RowBox[{"-", "1.78`"}]}], "}"}], "\[Rule]", "2.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "4.5`"}], ",", 
      RowBox[{"-", "2.06`"}], ",", 
      RowBox[{"-", "1.78`"}], ",", "2.5`"}], "}"}], "\[Rule]", "2.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "2.06`"}], ",", 
      RowBox[{"-", "1.78`"}], ",", "2.5`", ",", "2.89`"}], "}"}], "\[Rule]", 
    "3.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1.78`"}], ",", "2.5`", ",", "2.89`", ",", "3.94`"}], 
     "}"}], "\[Rule]", "2.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2.5`", ",", "2.89`", ",", "3.94`", ",", "2.83`"}], "}"}], 
    "\[Rule]", "1.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2.89`", ",", "3.94`", ",", "2.83`", ",", "1.5`"}], "}"}], 
    "\[Rule]", "2.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3.94`", ",", "2.83`", ",", "1.5`", ",", "2.28`"}], "}"}], 
    "\[Rule]", "8.39`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2.83`", ",", "1.5`", ",", "2.28`", ",", "8.39`"}], "}"}], 
    "\[Rule]", "1.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.5`", ",", "2.28`", ",", "8.39`", ",", "1.28`"}], "}"}], 
    "\[Rule]", "0.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2.28`", ",", "8.39`", ",", "1.28`", ",", "0.89`"}], "}"}], 
    "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"8.39`", ",", "1.28`", ",", "0.89`", ",", "1"}], "}"}], 
    "\[Rule]", "3.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.28`", ",", "0.89`", ",", "1", ",", "3.06`"}], "}"}], 
    "\[Rule]", "7.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.89`", ",", "1", ",", "3.06`", ",", "7.22`"}], "}"}], 
    "\[Rule]", "12.61`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3.06`", ",", "7.22`", ",", "12.61`"}], "}"}], 
    "\[Rule]", "13.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3.06`", ",", "7.22`", ",", "12.61`", ",", "13.33`"}], "}"}], 
    "\[Rule]", "0.39`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7.22`", ",", "12.61`", ",", "13.33`", ",", "0.39`"}], "}"}], 
    "\[Rule]", "1.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12.61`", ",", "13.33`", ",", "0.39`", ",", "1.17`"}], "}"}], 
    "\[Rule]", "4.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"13.33`", ",", "0.39`", ",", "1.17`", ",", "4.11`"}], "}"}], 
    "\[Rule]", "7.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.39`", ",", "1.17`", ",", "4.11`", ",", "7.83`"}], "}"}], 
    "\[Rule]", "9.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.17`", ",", "4.11`", ",", "7.83`", ",", "9.33`"}], "}"}], 
    "\[Rule]", "12.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4.11`", ",", "7.83`", ",", "9.33`", ",", "12.94`"}], "}"}], 
    "\[Rule]", "5.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7.83`", ",", "9.33`", ",", "12.94`", ",", "5.17`"}], "}"}], 
    "\[Rule]", "5.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9.33`", ",", "12.94`", ",", "5.17`", ",", "5.72`"}], "}"}], 
    "\[Rule]", "7.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12.94`", ",", "5.17`", ",", "5.72`", ",", "7.17`"}], "}"}], 
    "\[Rule]", "6.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.17`", ",", "5.72`", ",", "7.17`", ",", "6.06`"}], "}"}], 
    "\[Rule]", "8.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.72`", ",", "7.17`", ",", "6.06`", ",", "8.89`"}], "}"}], 
    "\[Rule]", "7"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7.17`", ",", "6.06`", ",", "8.89`", ",", "7"}], "}"}], 
    "\[Rule]", "5.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.06`", ",", "8.89`", ",", "7", ",", "5.33`"}], "}"}], 
    "\[Rule]", "11.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"8.89`", ",", "7", ",", "5.33`", ",", "11.33`"}], "}"}], 
    "\[Rule]", "19"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7", ",", "5.33`", ",", "11.33`", ",", "19"}], "}"}], "\[Rule]", 
    "20.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.33`", ",", "11.33`", ",", "19", ",", "20.94`"}], "}"}], 
    "\[Rule]", "9.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.33`", ",", "19", ",", "20.94`", ",", "9.06`"}], "}"}], 
    "\[Rule]", "9.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19", ",", "20.94`", ",", "9.06`", ",", "9.67`"}], "}"}], 
    "\[Rule]", "13.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.94`", ",", "9.06`", ",", "9.67`", ",", "13.33`"}], "}"}], 
    "\[Rule]", "10.61`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9.06`", ",", "9.67`", ",", "13.33`", ",", "10.61`"}], "}"}], 
    "\[Rule]", "15.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9.67`", ",", "13.33`", ",", "10.61`", ",", "15.94`"}], "}"}], 
    "\[Rule]", "6.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"13.33`", ",", "10.61`", ",", "15.94`", ",", "6.44`"}], "}"}], 
    "\[Rule]", "7.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10.61`", ",", "15.94`", ",", "6.44`", ",", "7.28`"}], "}"}], 
    "\[Rule]", "9.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.94`", ",", "6.44`", ",", "7.28`", ",", "9.28`"}], "}"}], 
    "\[Rule]", "11.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.44`", ",", "7.28`", ",", "9.28`", ",", "11.78`"}], "}"}], 
    "\[Rule]", "5.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7.28`", ",", "9.28`", ",", "11.78`", ",", "5.44`"}], "}"}], 
    "\[Rule]", "5.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9.28`", ",", "11.78`", ",", "5.44`", ",", "5.83`"}], "}"}], 
    "\[Rule]", "11.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.78`", ",", "5.44`", ",", "5.83`", ",", "11.22`"}], "}"}], 
    "\[Rule]", "15.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.44`", ",", "5.83`", ",", "11.22`", ",", "15.72`"}], "}"}], 
    "\[Rule]", "23.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.83`", ",", "11.22`", ",", "15.72`", ",", "23.11`"}], "}"}], 
    "\[Rule]", "17.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.22`", ",", "15.72`", ",", "23.11`", ",", "17.44`"}], "}"}], 
    "\[Rule]", "6.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.72`", ",", "23.11`", ",", "17.44`", ",", "6.94`"}], "}"}], 
    "\[Rule]", "11.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.11`", ",", "17.44`", ",", "6.94`", ",", "11.28`"}], "}"}], 
    "\[Rule]", "19.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.44`", ",", "6.94`", ",", "11.28`", ",", "19.83`"}], "}"}], 
    "\[Rule]", "18.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6.94`", ",", "11.28`", ",", "19.83`", ",", "18.78`"}], "}"}], 
    "\[Rule]", "9.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.28`", ",", "19.83`", ",", "18.78`", ",", "9.72`"}], "}"}], 
    "\[Rule]", "11.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19.83`", ",", "18.78`", ",", "9.72`", ",", "11.44`"}], "}"}], 
    "\[Rule]", "10.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.78`", ",", "9.72`", ",", "11.44`", ",", "10.5`"}], "}"}], 
    "\[Rule]", "11.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9.72`", ",", "11.44`", ",", "10.5`", ",", "11.5`"}], "}"}], 
    "\[Rule]", "13.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.44`", ",", "10.5`", ",", "11.5`", ",", "13.44`"}], "}"}], 
    "\[Rule]", "14.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10.5`", ",", "11.5`", ",", "13.44`", ",", "14.28`"}], "}"}], 
    "\[Rule]", "17.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.5`", ",", "13.44`", ",", "14.28`", ",", "17.72`"}], "}"}], 
    "\[Rule]", "18.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"13.44`", ",", "14.28`", ",", "17.72`", ",", "18.78`"}], "}"}], 
    "\[Rule]", "17.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"14.28`", ",", "17.72`", ",", "18.78`", ",", "17.44`"}], "}"}], 
    "\[Rule]", "22.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.72`", ",", "18.78`", ",", "17.44`", ",", "22.67`"}], "}"}], 
    "\[Rule]", "17.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.78`", ",", "17.44`", ",", "22.67`", ",", "17.56`"}], "}"}], 
    "\[Rule]", "20.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.44`", ",", "22.67`", ",", "17.56`", ",", "20.17`"}], "}"}], 
    "\[Rule]", "23.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22.67`", ",", "17.56`", ",", "20.17`", ",", "23.83`"}], "}"}], 
    "\[Rule]", "15"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.56`", ",", "20.17`", ",", "23.83`", ",", "15"}], "}"}], 
    "\[Rule]", "11.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.17`", ",", "23.83`", ",", "15", ",", "11.67`"}], "}"}], 
    "\[Rule]", "13.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.83`", ",", "15", ",", "11.67`", ",", "13.5`"}], "}"}], 
    "\[Rule]", "15.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15", ",", "11.67`", ",", "13.5`", ",", "15.83`"}], "}"}], 
    "\[Rule]", "18.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.67`", ",", "13.5`", ",", "15.83`", ",", "18.28`"}], "}"}], 
    "\[Rule]", "16.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"13.5`", ",", "15.83`", ",", "18.28`", ",", "16.06`"}], "}"}], 
    "\[Rule]", "13.39`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.83`", ",", "18.28`", ",", "16.06`", ",", "13.39`"}], "}"}], 
    "\[Rule]", "16.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.28`", ",", "16.06`", ",", "13.39`", ",", "16.06`"}], "}"}], 
    "\[Rule]", "15.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"16.06`", ",", "13.39`", ",", "16.06`", ",", "15.33`"}], "}"}], 
    "\[Rule]", "19.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"13.39`", ",", "16.06`", ",", "15.33`", ",", "19.33`"}], "}"}], 
    "\[Rule]", "19.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"16.06`", ",", "15.33`", ",", "19.33`", ",", "19.33`"}], "}"}], 
    "\[Rule]", "18.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.33`", ",", "19.33`", ",", "19.33`", ",", "18.17`"}], "}"}], 
    "\[Rule]", "11.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19.33`", ",", "19.33`", ",", "18.17`", ",", "11.72`"}], "}"}], 
    "\[Rule]", "12.61`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19.33`", ",", "18.17`", ",", "11.72`", ",", "12.61`"}], "}"}], 
    "\[Rule]", "17.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.17`", ",", "11.72`", ",", "12.61`", ",", "17.5`"}], "}"}], 
    "\[Rule]", "20.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.72`", ",", "12.61`", ",", "17.5`", ",", "20.67`"}], "}"}], 
    "\[Rule]", "20.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12.61`", ",", "17.5`", ",", "20.67`", ",", "20.22`"}], "}"}], 
    "\[Rule]", "19.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.5`", ",", "20.67`", ",", "20.22`", ",", "19.83`"}], "}"}], 
    "\[Rule]", "20.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.67`", ",", "20.22`", ",", "19.83`", ",", "20.83`"}], "}"}], 
    "\[Rule]", "21.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.22`", ",", "19.83`", ",", "20.83`", ",", "21.83`"}], "}"}], 
    "\[Rule]", "19.61`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19.83`", ",", "20.83`", ",", "21.83`", ",", "19.61`"}], "}"}], 
    "\[Rule]", "20.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.83`", ",", "21.83`", ",", "19.61`", ",", "20.28`"}], "}"}], 
    "\[Rule]", "20.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21.83`", ",", "19.61`", ",", "20.28`", ",", "20.56`"}], "}"}], 
    "\[Rule]", "17.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19.61`", ",", "20.28`", ",", "20.56`", ",", "17.94`"}], "}"}], 
    "\[Rule]", "20.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.28`", ",", "20.56`", ",", "17.94`", ",", "20.78`"}], "}"}], 
    "\[Rule]", "21.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.56`", ",", "17.94`", ",", "20.78`", ",", "21.83`"}], "}"}], 
    "\[Rule]", "24.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.94`", ",", "20.78`", ",", "21.83`", ",", "24.11`"}], "}"}], 
    "\[Rule]", "26.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.78`", ",", "21.83`", ",", "24.11`", ",", "26.56`"}], "}"}], 
    "\[Rule]", "25.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21.83`", ",", "24.11`", ",", "26.56`", ",", "25.94`"}], "}"}], 
    "\[Rule]", "25.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24.11`", ",", "26.56`", ",", "25.94`", ",", "25.44`"}], "}"}], 
    "\[Rule]", "23.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"26.56`", ",", "25.94`", ",", "25.44`", ",", "23.06`"}], "}"}], 
    "\[Rule]", "20.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.94`", ",", "25.44`", ",", "23.06`", ",", "20.17`"}], "}"}], 
    "\[Rule]", "20.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.44`", ",", "23.06`", ",", "20.17`", ",", "20.89`"}], "}"}], 
    "\[Rule]", "23.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.06`", ",", "20.17`", ",", "20.89`", ",", "23.11`"}], "}"}], 
    "\[Rule]", "25.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.17`", ",", "20.89`", ",", "23.11`", ",", "25.89`"}], "}"}], 
    "\[Rule]", "23.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.89`", ",", "23.11`", ",", "25.89`", ",", "23.72`"}], "}"}], 
    "\[Rule]", "23.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.11`", ",", "25.89`", ",", "23.72`", ",", "23.67`"}], "}"}], 
    "\[Rule]", "25.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.89`", ",", "23.72`", ",", "23.67`", ",", "25.17`"}], "}"}], 
    "\[Rule]", "25.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.72`", ",", "23.67`", ",", "25.17`", ",", "25.89`"}], "}"}], 
    "\[Rule]", "24.61`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.67`", ",", "25.17`", ",", "25.89`", ",", "24.61`"}], "}"}], 
    "\[Rule]", "26.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.17`", ",", "25.89`", ",", "24.61`", ",", "26.11`"}], "}"}], 
    "\[Rule]", "24.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.89`", ",", "24.61`", ",", "26.11`", ",", "24.83`"}], "}"}], 
    "\[Rule]", "25.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24.61`", ",", "26.11`", ",", "24.83`", ",", "25.5`"}], "}"}], 
    "\[Rule]", "26.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"26.11`", ",", "24.83`", ",", "25.5`", ",", "26.94`"}], "}"}], 
    "\[Rule]", "23.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24.83`", ",", "25.5`", ",", "26.94`", ",", "23.67`"}], "}"}], 
    "\[Rule]", "25.39`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.5`", ",", "26.94`", ",", "23.67`", ",", "25.39`"}], "}"}], 
    "\[Rule]", "23.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"26.94`", ",", "23.67`", ",", "25.39`", ",", "23.89`"}], "}"}], 
    "\[Rule]", "24.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.67`", ",", "25.39`", ",", "23.89`", ",", "24.56`"}], "}"}], 
    "\[Rule]", "24.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.39`", ",", "23.89`", ",", "24.56`", ",", "24.06`"}], "}"}], 
    "\[Rule]", "25.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.89`", ",", "24.56`", ",", "24.06`", ",", "25.56`"}], "}"}], 
    "\[Rule]", "24.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24.56`", ",", "24.06`", ",", "25.56`", ",", "24.17`"}], "}"}], 
    "\[Rule]", "21.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24.06`", ",", "25.56`", ",", "24.17`", ",", "21.44`"}], "}"}], 
    "\[Rule]", "22.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.56`", ",", "24.17`", ",", "21.44`", ",", "22.5`"}], "}"}], 
    "\[Rule]", "22.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24.17`", ",", "21.44`", ",", "22.5`", ",", "22.72`"}], "}"}], 
    "\[Rule]", "23.39`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21.44`", ",", "22.5`", ",", "22.72`", ",", "23.39`"}], "}"}], 
    "\[Rule]", "22.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22.5`", ",", "22.72`", ",", "23.39`", ",", "22.72`"}], "}"}], 
    "\[Rule]", "24"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22.72`", ",", "23.39`", ",", "22.72`", ",", "24"}], "}"}], 
    "\[Rule]", "25.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.39`", ",", "22.72`", ",", "24", ",", "25.5`"}], "}"}], 
    "\[Rule]", "26.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22.72`", ",", "24", ",", "25.5`", ",", "26.33`"}], "}"}], 
    "\[Rule]", "25.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24", ",", "25.5`", ",", "26.33`", ",", "25.44`"}], "}"}], 
    "\[Rule]", "23.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.5`", ",", "26.33`", ",", "25.44`", ",", "23.94`"}], "}"}], 
    "\[Rule]", "22.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"26.33`", ",", "25.44`", ",", "23.94`", ",", "22.17`"}], "}"}], 
    "\[Rule]", "24"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.44`", ",", "23.94`", ",", "22.17`", ",", "24"}], "}"}], 
    "\[Rule]", "26.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.94`", ",", "22.17`", ",", "24", ",", "26.28`"}], "}"}], 
    "\[Rule]", "27.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22.17`", ",", "24", ",", "26.28`", ",", "27.94`"}], "}"}], 
    "\[Rule]", "27"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24", ",", "26.28`", ",", "27.94`", ",", "27"}], "}"}], 
    "\[Rule]", "23.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"26.28`", ",", "27.94`", ",", "27", ",", "23.11`"}], "}"}], 
    "\[Rule]", "23.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"27.94`", ",", "27", ",", "23.11`", ",", "23.94`"}], "}"}], 
    "\[Rule]", "26.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"27", ",", "23.11`", ",", "23.94`", ",", "26.89`"}], "}"}], 
    "\[Rule]", "26.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.11`", ",", "23.94`", ",", "26.89`", ",", "26.44`"}], "}"}], 
    "\[Rule]", "28.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.94`", ",", "26.89`", ",", "26.44`", ",", "28.28`"}], "}"}], 
    "\[Rule]", "29.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"26.89`", ",", "26.44`", ",", "28.28`", ",", "29.5`"}], "}"}], 
    "\[Rule]", "28.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"26.44`", ",", "28.28`", ",", "29.5`", ",", "28.11`"}], "}"}], 
    "\[Rule]", "24.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"28.28`", ",", "29.5`", ",", "28.11`", ",", "24.78`"}], "}"}], 
    "\[Rule]", "25.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"29.5`", ",", "28.11`", ",", "24.78`", ",", "25.67`"}], "}"}], 
    "\[Rule]", "22.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"28.11`", ",", "24.78`", ",", "25.67`", ",", "22.11`"}], "}"}], 
    "\[Rule]", "20.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24.78`", ",", "25.67`", ",", "22.11`", ",", "20.78`"}], "}"}], 
    "\[Rule]", "24.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"25.67`", ",", "22.11`", ",", "20.78`", ",", "24.28`"}], "}"}], 
    "\[Rule]", "24.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22.11`", ",", "20.78`", ",", "24.28`", ",", "24.44`"}], "}"}], 
    "\[Rule]", "20"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.78`", ",", "24.28`", ",", "24.44`", ",", "20"}], "}"}], 
    "\[Rule]", "20.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24.28`", ",", "24.44`", ",", "20", ",", "20.56`"}], "}"}], 
    "\[Rule]", "19.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24.44`", ",", "20", ",", "20.56`", ",", "19.28`"}], "}"}], 
    "\[Rule]", "21.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20", ",", "20.56`", ",", "19.28`", ",", "21.17`"}], "}"}], 
    "\[Rule]", "22"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.56`", ",", "19.28`", ",", "21.17`", ",", "22"}], "}"}], 
    "\[Rule]", "22.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19.28`", ",", "21.17`", ",", "22", ",", "22.22`"}], "}"}], 
    "\[Rule]", "23.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21.17`", ",", "22", ",", "22.22`", ",", "23.56`"}], "}"}], 
    "\[Rule]", "24"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22", ",", "22.22`", ",", "23.56`", ",", "24"}], "}"}], 
    "\[Rule]", "18.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"22.22`", ",", "23.56`", ",", "24", ",", "18.5`"}], "}"}], 
    "\[Rule]", "19.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"23.56`", ",", "24", ",", "18.5`", ",", "19.06`"}], "}"}], 
    "\[Rule]", "19.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"24", ",", "18.5`", ",", "19.06`", ",", "19.22`"}], "}"}], 
    "\[Rule]", "15"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.5`", ",", "19.06`", ",", "19.22`", ",", "15"}], "}"}], 
    "\[Rule]", "17.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19.06`", ",", "19.22`", ",", "15", ",", "17.5`"}], "}"}], 
    "\[Rule]", "18.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19.22`", ",", "15", ",", "17.5`", ",", "18.5`"}], "}"}], 
    "\[Rule]", "15.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15", ",", "17.5`", ",", "18.5`", ",", "15.56`"}], "}"}], 
    "\[Rule]", "15.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.5`", ",", "18.5`", ",", "15.56`", ",", "15.33`"}], "}"}], 
    "\[Rule]", "16.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.5`", ",", "15.56`", ",", "15.33`", ",", "16.89`"}], "}"}], 
    "\[Rule]", "20"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.56`", ",", "15.33`", ",", "16.89`", ",", "20"}], "}"}], 
    "\[Rule]", "16.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.33`", ",", "16.89`", ",", "20", ",", "16.72`"}], "}"}], 
    "\[Rule]", "18.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"16.89`", ",", "20", ",", "16.72`", ",", "18.28`"}], "}"}], 
    "\[Rule]", "18.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20", ",", "16.72`", ",", "18.28`", ",", "18.44`"}], "}"}], 
    "\[Rule]", "16.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"16.72`", ",", "18.28`", ",", "18.44`", ",", "16.17`"}], "}"}], 
    "\[Rule]", "20.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.28`", ",", "18.44`", ",", "16.17`", ",", "20.22`"}], "}"}], 
    "\[Rule]", "20.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.44`", ",", "16.17`", ",", "20.22`", ",", "20.94`"}], "}"}], 
    "\[Rule]", "18.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"16.17`", ",", "20.22`", ",", "20.94`", ",", "18.67`"}], "}"}], 
    "\[Rule]", "15.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.22`", ",", "20.94`", ",", "18.67`", ",", "15.22`"}], "}"}], 
    "\[Rule]", "14.61`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.94`", ",", "18.67`", ",", "15.22`", ",", "14.61`"}], "}"}], 
    "\[Rule]", "17.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.67`", ",", "15.22`", ",", "14.61`", ",", "17.72`"}], "}"}], 
    "\[Rule]", "20"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.22`", ",", "14.61`", ",", "17.72`", ",", "20"}], "}"}], 
    "\[Rule]", "19"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"14.61`", ",", "17.72`", ",", "20", ",", "19"}], "}"}], 
    "\[Rule]", "21.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.72`", ",", "20", ",", "19", ",", "21.83`"}], "}"}], 
    "\[Rule]", "21.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20", ",", "19", ",", "21.83`", ",", "21.78`"}], "}"}], 
    "\[Rule]", "20.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"19", ",", "21.83`", ",", "21.78`", ",", "20.17`"}], "}"}], 
    "\[Rule]", "14.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21.83`", ",", "21.78`", ",", "20.17`", ",", "14.44`"}], "}"}], 
    "\[Rule]", "17.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"21.78`", ",", "20.17`", ",", "14.44`", ",", "17.94`"}], "}"}], 
    "\[Rule]", "18.61`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.17`", ",", "14.44`", ",", "17.94`", ",", "18.61`"}], "}"}], 
    "\[Rule]", "17.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"14.44`", ",", "17.94`", ",", "18.61`", ",", "17.83`"}], "}"}], 
    "\[Rule]", "17.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.94`", ",", "18.61`", ",", "17.83`", ",", "17.28`"}], "}"}], 
    "\[Rule]", "13.39`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.61`", ",", "17.83`", ",", "17.28`", ",", "13.39`"}], "}"}], 
    "\[Rule]", "7.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.83`", ",", "17.28`", ",", "13.39`", ",", "7.67`"}], "}"}], 
    "\[Rule]", "11.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.28`", ",", "13.39`", ",", "7.67`", ",", "11.22`"}], "}"}], 
    "\[Rule]", "18.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"13.39`", ",", "7.67`", ",", "11.22`", ",", "18.67`"}], "}"}], 
    "\[Rule]", "17.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7.67`", ",", "11.22`", ",", "18.67`", ",", "17.28`"}], "}"}], 
    "\[Rule]", "13.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.22`", ",", "18.67`", ",", "17.28`", ",", "13.22`"}], "}"}], 
    "\[Rule]", "13.72`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.67`", ",", "17.28`", ",", "13.22`", ",", "13.72`"}], "}"}], 
    "\[Rule]", "17.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.28`", ",", "13.22`", ",", "13.72`", ",", "17.94`"}], "}"}], 
    "\[Rule]", "12.06`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"13.22`", ",", "13.72`", ",", "17.94`", ",", "12.06`"}], "}"}], 
    "\[Rule]", "20.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"13.72`", ",", "17.94`", ",", "12.06`", ",", "20.33`"}], "}"}], 
    "\[Rule]", "15.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"17.94`", ",", "12.06`", ",", "20.33`", ",", "15.56`"}], "}"}], 
    "\[Rule]", "18.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12.06`", ",", "20.33`", ",", "15.56`", ",", "18.94`"}], "}"}], 
    "\[Rule]", "15.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"20.33`", ",", "15.56`", ",", "18.94`", ",", "15.67`"}], "}"}], 
    "\[Rule]", "8.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.56`", ",", "18.94`", ",", "15.67`", ",", "8.89`"}], "}"}], 
    "\[Rule]", "14.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"18.94`", ",", "15.67`", ",", "8.89`", ",", "14.17`"}], "}"}], 
    "\[Rule]", "4.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"15.67`", ",", "8.89`", ",", "14.17`", ",", "4.22`"}], "}"}], 
    "\[Rule]", "3.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"8.89`", ",", "14.17`", ",", "4.22`", ",", "3.28`"}], "}"}], 
    "\[Rule]", "3.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"14.17`", ",", "4.22`", ",", "3.28`", ",", "3.28`"}], "}"}], 
    "\[Rule]", "5.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4.22`", ",", "3.28`", ",", "3.28`", ",", "5.67`"}], "}"}], 
    "\[Rule]", "5.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3.28`", ",", "3.28`", ",", "5.67`", ",", "5.89`"}], "}"}], 
    "\[Rule]", "7.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3.28`", ",", "5.67`", ",", "5.89`", ",", "7.5`"}], "}"}], 
    "\[Rule]", "5.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.67`", ",", "5.89`", ",", "7.5`", ",", "5.89`"}], "}"}], 
    "\[Rule]", "5.89`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.89`", ",", "7.5`", ",", "5.89`", ",", "5.89`"}], "}"}], 
    "\[Rule]", "7.67`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7.5`", ",", "5.89`", ",", "5.89`", ",", "7.67`"}], "}"}], 
    "\[Rule]", "12.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.89`", ",", "5.89`", ",", "7.67`", ",", "12.78`"}], "}"}], 
    "\[Rule]", "9.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.89`", ",", "7.67`", ",", "12.78`", ",", "9.83`"}], "}"}], 
    "\[Rule]", "11.17`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7.67`", ",", "12.78`", ",", "9.83`", ",", "11.17`"}], "}"}], 
    "\[Rule]", "9.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"12.78`", ",", "9.83`", ",", "11.17`", ",", "9.78`"}], "}"}], 
    "\[Rule]", "5.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9.83`", ",", "11.17`", ",", "9.78`", ",", "5.83`"}], "}"}], 
    "\[Rule]", "2.78`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.17`", ",", "9.78`", ",", "5.83`", ",", "2.78`"}], "}"}], 
    "\[Rule]", "2.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9.78`", ",", "5.83`", ",", "2.78`", ",", "2.83`"}], "}"}], 
    "\[Rule]", "9.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.83`", ",", "2.78`", ",", "2.83`", ",", "9.33`"}], "}"}], 
    "\[Rule]", "11.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2.78`", ",", "2.83`", ",", "9.33`", ",", "11.83`"}], "}"}], 
    "\[Rule]", "7.11`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2.83`", ",", "9.33`", ",", "11.83`", ",", "7.11`"}], "}"}], 
    "\[Rule]", "5.44`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9.33`", ",", "11.83`", ",", "7.11`", ",", "5.44`"}], "}"}], 
    "\[Rule]", "2.28`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.83`", ",", "7.11`", ",", "5.44`", ",", "2.28`"}], "}"}], 
    "\[Rule]", "1.94`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7.11`", ",", "5.44`", ",", "2.28`", ",", "1.94`"}], "}"}], 
    "\[Rule]", "11.83`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"5.44`", ",", "2.28`", ",", "1.94`", ",", "11.83`"}], "}"}], 
    "\[Rule]", "4.5`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2.28`", ",", "1.94`", ",", "11.83`", ",", "4.5`"}], "}"}], 
    "\[Rule]", "0.39`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.94`", ",", "11.83`", ",", "4.5`", ",", "0.39`"}], "}"}], 
    "\[Rule]", "0.22`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"11.83`", ",", "4.5`", ",", "0.39`", ",", "0.22`"}], "}"}], 
    "\[Rule]", "1.33`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"4.5`", ",", "0.39`", ",", "0.22`", ",", "1.33`"}], "}"}], 
    "\[Rule]", "6.56`"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.39`", ",", "0.22`", ",", "1.33`", ",", "6.56`"}], "}"}], 
    "\[Rule]", "5.94`"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8770596183744946`*^9, 3.877059636569193*^9}},
 CellLabel->"Out[95]=",ExpressionUUID->"950e0889-4ad4-402b-98ae-970cb5b76651"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"{", 
   RowBox[{"data2022", ",", 
    RowBox[{"netF", "@", 
     RowBox[{"dataTest", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.877059645900598*^9, 3.8770596665727215`*^9}, {
  3.8770597038011827`*^9, 3.8770597048087454`*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"d4e22efe-99fa-4d1f-a260-0813b663704c"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 120], 0.008333333333333333]], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1:eJxVl3d0FFUUxkdEwShmlACKGBYQCISydESjgw27C3ZFXXvXtSu2sWAX1t51
FTuKS3rPpG4qmfSeTERFJepasLd53+R757z9Z8937n333t99Zd6bcsmNay4f
oWna/N00TfyL39GfDa08fnBd0pbYIsuV/utdfVNaQsemuF/o4Euu3li2K2Vt
4kKhw6X0X7VYaGunHD9f6Pi4KP1h9xnUG+cKHbjG1V5m2M3nXb1WOLy+QOho
savfDbkFbEc9ztdR1rNEaH3sVtox3khz9dDq3OT1m5cJHbrS1a7auToX9Uee
cTXKHZwjtF2wlfkQX/tKasT36+nD+ULQwRXpjAcdvszVItq6M6CtDenkXQr+
3HSlX77t6awPfIExGcP5JkGbyzKYD/2LXpzBfs0D/5PSjv7p2RkKj+FksP+w
hxIyOR7xIoszh+tfjn7YF2YyHuJrj7t6lijoQ/j7MzIZz5v/vkz2x5v/UVmM
j/qtBVmMlwr+87OYbyb4H5H+s8AfzeL8TwN/dxZ5poN/ZDZ1CvjnZXO9IZ9+
bvbweBPzZzyUzX6ivtCnqn+kI1tZf/ZuOUp/tDk5rGc2+M/K4XiP38whH+KF
P87hevD4W6mXQ8f/lfFngH9WLvVB4D89l/lGg/9eVyN82njwf5DLfNBOk/TX
wf+3qo0ZeUMry0X4MsQPBVx9NxboSPCvy6O/Bv538xh/IvgbXb0GAJPB/4fU
Y8E/LZ/92FUi+E/J53jdEDHvyGf+MULH33Y1cBJ2HCn46/OZPy504FdXi+4l
r/9ZxDN9BdSjwH9iAeN/KezOrQWMj3r0twrYr2Tw10j/JPD/XMB8+4P/4EL2
w+NfJfXfIr52cyH9R4r6/a+7ejIKGiV0sKqQ9SUKHY4XDp8/m/YE/8Qijv9d
8MWPKWJ9I4Tdd2MR95NP6MArRcz/i/A3y6UeEjr6XZHSL2dCMe2jxXj9qGLu
j0lCG9cVc/3NEjr0YjH382yhI5arfxXt29Up4tnf0j/3J6G1cSXKfPqPLJHr
AfxXlzDeVPA/V8L8yGcVuVpUl7QlCfO/Q9rHg39/i3bUGzjcYn8OENq8wmJ/
pggdDVvkh7+Tb7GeceD/0mI9M8CfWEr/ReA/tJTfi8Xgv7SU84n67addjeV5
9jShtdxSpV/+z0vZz+ng36eMPPPBv7SM6/FA8AfLGP9g8D9Rxv2OfL4sqWeC
f0COB4+5Vzn5JoB/UTnnA3zOBVIjv/5YOc+7ZeBPl/YF4O8tl+cB+PeskOcR
eM+vGP5+taJf/vUV7P9C8H5WwXjoT7irgvwYb+1eyX6jP/G5UoPPd04l/dHP
wIOVzD8HvJ9UyvMTvO2VSn5Hq1J49NQqfj+XgvfMKvn9Ae/9tKd68/1RFfnQ
H7ulivXNA/+/VZx/1OtPidGeCv41Mfk9BP89MZ5/qM96P8bvux/8Nu0x8Pr+
Uu2B6dWMh/zmadW8P6D/0btU7WyqJg/y6duq2Q/Ua/xere73qTX8HqIfkZNr
2C/0w769hv7Q2ts16vzXSQ17cJfUS8A/uVbel8B/Qq28/4H/llrOB7TvzVru
P9QTqKZ/DHbzp1olfnRSHdfzcvAfV8d4K8B/Ux3jHQr+16hD0KFK+idiviM/
1CnrwT6wXt4XwX9MvbJ//DdIO+IFX67n+oQ9XFYv75fgH6JOhX98fIMy3rey
gf0CT+Ba6kngMV9oID/s0ZIGzh/GO980kNfjT9qm5DeO2Dac71KP/yrq7R7/
s9vYP8S3C6kTobUd0o7x/v0ayQN78LBGef8F/+WNrA/7z9rYyP5Ax/MaWQ/y
+75Q7YF9be4vxDeX2wpv9BKb6x+8zlO2Mr96DnXc4x+0WS/ih/ZuUuJHljRx
fSKefVETxx8G/iekP7Q/s0lZD8H+JiVfeHQz+4t41sJm1gcdX9vMfIeD/9Fm
8qWBf2sz48Nu9tA/5s3/Hi2cX2/+57fQH3z6eS3K/jEepl6F8aEtLazH4+9s
ke8r8I9oVfanNreV4739f3Yr+4n5Dj7QyvHIH97cyvPDm/82GQ/9if/XqvTf
N7uN/Di/Ame0cf0hn3lfG+N559+Hbcr57DS3KeeZ/o8az5jZzu8tzufQ6nbl
fI3c3c75wvlrv9eu9EOz2+X7EPx/tivne/CQDvYTOnxqB/sDf+vODuU8jb/T
odw3fA303+zx/ybjeef/lE6Onwv+kzqV76FzW6dSrx7pVO43Rm2ncn6Gfunk
+oCOJHep59/xXfK9CP5bupTz2f9Gl3zfgT/Wxfiwh3/sku8p8B/UrXzv4sd2
836XDP5Qt3J/CbzarfTDrOhW4kW/l/6I5xzQI9+T4D+6R6nXuL6H858C/pd6
eH543//SHmV92DvleOTXxvfy+w+73+hV7p/Ba6Qd/Qo/38v+ee+d4l7eXxPA
/7WqfWP72A/cfwNpfdwvuN+ZV/ZxPtGv6DOq3SlQtf5Vn9JfQ++X72nwr+jn
+sd9LXJZP+tH/+0N0t+77+b1K/dN//Z+1o/3THDMgPK+CS8bUO7/1sVS4z4S
f3KA84X7ui97QLnfBpwB5T1kJjh8H/6H985iR4nnXOjI9xv4H3eU94uRQf+U
eqFDfY58nwodGTXIfBPBv2CQ9Uww/gc/x0Zh
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      NCache[
       Rational[1, 120], 0.008333333333333333]], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1:eJw1lw1UV/UZx39YLD1m4gsIpnJBERBCQBFR0R/NMnUayEzw9WaxsEmRbxN1
69ec9qIzqpnlnN65sZapsy1W5xR6d6zG8SXLeeCclLOrnaFY22jqlm3O7f99
vo/n6D0fv8/3ebv3f1/Slj4+p6aHMSYnzpjYUf50T4n9e2LXmJD/Yf//17/4
XB65Z4zN+jbVE2Icjhh0F3lgjO1nP1M9OcbB5E/zyUMQf8yo7kHfenksOR35
D+9XfUSMvbLD48gjY+z2btZ8WcgXXzKaPAr+d2+oPxe8/YJyHvhai3I++i3u
0voF4A9alQsx/5qGIvIY8I+6Cshj0Y83rJBcBH/nPNXHob+/36v9FUN/v0n3
OR7zn3pA91eCeZ9/Jpc8AfHTMlSfiP79heqfBP3MZeVSqb9U4ycjf3lPrT8F
vKNI92eRr3Mn+3XgKK1J9TLMN7sxhzrYu5mZTf1uxLf8dBR1cHgsYzj1b8bY
n583kjrYrDRZ1Kei3wfr2Z8Dm9VLdH/3IH/9LvbjwN65q9rfvZhnSyLnd2B7
7JLOOw3xa/trf2Bzqof670P8bcs1P9jEP6X6dOTveEV1sKmszaQ+AzxzVhp1
sJfz7EDqM7GPR+cOpi68IiuR+rfg/1txH+pg7/NPEqjPirEfX6l+cJj8Uhz1
2fBf+fBW6mCXMoPx5n7Eb30hhTo48qdq/nLo7VXMZ8Gmu3cPK/HCJf+6ifuC
CcHetlmRsKnAfoYk3RC2YG/B7uiI+MHmx+8YyR8Knzj+ruhmDup/VdGf9cHB
E0O1X7CpP9+XfrC3xjHeVMI/14+nH+zf8UkP+sHulz//mv1LvLvwH/b/beTv
Vd1L5rXgoHNNPOcHu45VnC8EexubqJu5yHe0dhj9YLet8ILEO+HmA/+lX7i6
1dD/AI4P9b6NfnDYrzmZ9cH24qAM4RDsD6sdSf88HJ9p7eb+wW5LSwL9YDvT
JtIPDhcnDaa/CvkyElJZHxx94wbzO7C7u30A/WCTljqE/mrsK2up+sHR0EtJ
9Is+YHAa/WCzcoPWn49+/jCH8RZs3qrQ+mB7ZUc+/eCo6+0C+heAX9/L/Bbs
TRuXRb9wbnku/cIf/mI4/Qsx32+ezqMfbEbnsj8HttfqtH9wUHXrCPoXId+x
7/P8WLAt68t9O7B7/syd9IOjcXV6/haDx0/MoR8cXOo/ln6wzWhnfyE4vPxX
j/4lOK74s/rBrvp8If3gsKJzNP3goMnp/H7s6P/7U3luGg8cpj3N/izYHlpL
9kWP+1M284tec4T+AOy2v6znS/KvX8bzFYleupO6eRDH26Mi1geH+z+gbsHR
hETuw5f4yX2KWR/sPkq8i/XFn5zEfYTC/bO4vwjstTeRzVLso9dF1vPA0dBK
vR7AbnEd8/lgc3Al453wT/6o9cH+hKXcfyj6/hHkSPQX1un1+xDqbR/JfXpg
b2cKr1cLtj+8n/E+2Kzbp+dXdG8TORC9fNIY1pf8VzZxfxE4rM3ivs3D0FNH
Md4D2yP3MN6Cw19V6P7Bfu/j7MeJXt9MPQCb44b5Q7B34uQ41ge7VaklrF+D
+vt+PZ71wUFZRLaiFw/n+fbBYfZH+vsAm00NrBdIvLef9ULRv9zAfJFwx8vU
zXcQ37Cc+T2wqTmn9UWff5Psg13WVb3+wLbzTc4TgP3V1YwPwd6LSdQj0U/P
nsD6j+B4tkDrg8ML1Yy3os/Yp/ODXW4B8zuJP/ke9QAcrb2u9cF+uIt6BA7W
b9bzX4v+trVzHx44OL2MbGtlvrfJvvAPiskOHK7ZqPWF33td64NdSanOL3rP
31I3y3BMPanzg72mBq0vvCxO9w92X+h+HNgPVnOfAThq+IJ6KPlLs3V+8b/6
pNZ/FP0sqKHfA0dVY3T/YLfnvomsDza3rJjE+qKfLaEeSL7yTp1f+Os7mT8C
2/mL9Pr7LvSDlXr/A9vrZXr9gaOOSj3/El/4Bn+vDmzSi/T6l/h5jfr7B3u5
bfr7F/8dU/T8L0f80UVaHxx2ten+wd6reVpfeNBzev+R+IevsV4g+t71Wh8c
HJim91+J39qt9786xJf2Zj4PbKaP0vsv2N5ey+eXL5z9F73/goM9X+n9Dxye
a9HnneQP8/X+K/qJPLJ5DPnSOhjvgb11V9m/BYdPniH7Ev/7Lr3/gf1Vb9Af
gIPXCrU+OEp9U59/wi+1aP3Hke9aG3UPHD07kOfDgv2DHXr/FX33a3r+xT96
C/cVgM2ms/r8AYeHM3R+ie+I0/3Xx45uUQ45Aey9E/J554Ft+uZ04XzR++nz
yooeV0d/uejFrXwe+pL/loOMrxceMJW6A/vJr9DfCDY7rvB9I5D4xz7nvIck
/5Lp9IcSXzWb830s/UQTuf9I/PGn+L7TLfVWndfn/xPg1Z/x/TYBHA743kDO
D/a21FLPB5ttN/h+Z8FBYzy5XPTrm/m+5wt3bOD7bT04Shmu7/fi/3Ilvx8a
wS49P5Pzi79vJt8/Dwlnn9bvAfGntnK+j2We5t0pnB9sDxT24/wSf3Qdvw/M
ChzHv8/8CWCbuYf5POEjDew3Hxz9Yx/zW7ArfasP5xeuSu/J+cHei0N4PuvB
4ZQ2fu84yV/yyD/l+6URHGxc2IPzSz7vd/z+OiT9muYk+z91eWst
      "]]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {
     Charting`ScaledTicks[{
       DateScale[Automatic]["Scale"], 
       DateScale[Automatic]["InverseScale"]}], 
     Charting`ScaledFrameTicks[{
       DateScale[Automatic]["Scale"], 
       DateScale[Automatic]["InverseScale"]}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        DateScale[Automatic]["InverseScale"][
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        DateScale[Automatic]["InverseScale"][
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 3.8761632*^9}, {-23.67, 29.5}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{
     Charting`ScaledTicks[{
       DateScale[Automatic]["Scale"], 
       DateScale[Automatic]["InverseScale"]}, {
       DateScale[Automatic]["Scale"], 
       DateScale[Automatic]["InverseScale"]}, "Nice", WorkingPrecision -> 
      15.954589770191003`, RotateLabel -> 0], Automatic}, {{{-7.889184*^8, 
       FormBox[
        StyleBox["\"1875\"", 
         Directive[], {}, StripOnInput -> False], TraditionalForm], {
        Rational[1, 72], 0}, 
       Directive[]}, {0., 
       FormBox[
        StyleBox["\"1900\"", 
         Directive[], {}, StripOnInput -> False], TraditionalForm], {
        Rational[1, 72], 0}, 
       Directive[]}, {7.889184*^8, 
       FormBox[
        StyleBox["\"1925\"", 
         Directive[], {}, StripOnInput -> False], TraditionalForm], {
        Rational[1, 72], 0}, 
       Directive[]}, {1.5778368*^9, 
       FormBox[
        StyleBox["\"1950\"", 
         Directive[], {}, StripOnInput -> False], TraditionalForm], {
        Rational[1, 72], 0}, 
       Directive[]}, {2.3667552*^9, 
       FormBox[
        StyleBox["\"1975\"", 
         Directive[], {}, StripOnInput -> False], TraditionalForm], {
        Rational[1, 72], 0}, 
       Directive[]}, {3.1556736*^9, 
       FormBox[
        StyleBox["\"2000\"", 
         Directive[], {}, StripOnInput -> False], TraditionalForm], {
        Rational[1, 72], 0}, 
       Directive[]}, {3.9446784*^9, 
       FormBox[
        StyleBox["\"2025\"", 
         Directive[], {}, StripOnInput -> False], TraditionalForm], {
        Rational[1, 72], 0}, 
       Directive[]}, {4.7335968*^9, 
       FormBox[
        StyleBox["\"2050\"", 
         Directive[], {}, StripOnInput -> False], TraditionalForm], {
        Rational[1, 72], 0}, 
       Directive[]}, {-7.889184*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {-6.31152*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {-4.732992*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {-3.155328*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {-1.577664*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {0., 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {0., 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {1.577664*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {3.155328*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {4.732992*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {6.310656*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {7.889184*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {7.889184*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {9.466848*^8, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {1.1044512*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {1.2622176*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {1.4200704*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {1.5778368*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {1.5778368*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {1.7356032*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {1.8933696*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {2.0512224*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {2.2089888*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {2.3667552*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {2.3667552*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {2.5245216*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {2.6823744*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {2.8401408*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {2.9979072*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {3.1556736*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {3.1556736*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {3.3135264*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {3.4712928*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {3.6290592*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {3.7868256*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {3.9446784*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {3.9446784*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {4.1024448*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {4.2602112*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {4.4179776*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {4.5758304*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}, {4.7335968*^9, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {
       0.009722222222222222, 0.}, 
       Directive[]}}, Automatic}]]], "Output",
 CellChangeTimes->{3.8770596732666297`*^9, 3.877059706121728*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"28ada27f-5940-4cbc-a71f-f0ac531571d4"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["grid data from weather stations", "Subsubsection",
 CellChangeTimes->{{3.8770597425937004`*^9, 
  3.8770597517002153`*^9}},ExpressionUUID->"f3b172e9-da77-4f85-8581-\
950a0a6fcf0f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"CloudGet", "@", 
    RowBox[{
    "CloudObject", "[", 
     "\"\<https://www.wolframcloud.com/obj/31898187-89a9-4b86-b5e6-\
ab36d63de789\>\"", "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8770597553152323`*^9, 3.8770597717397103`*^9}, 
   3.8770598109950185`*^9},
 CellLabel->"In[98]:=",ExpressionUUID->"d40d12f9-278e-471d-893f-7b613c9098b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.87705983080424*^9, 3.87705983080424*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"5017660f-e024-4a94-9cd0-4586f718c052"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "0.94`"}], ",", "1.56`", ",", 
    RowBox[{"-", "3.22`"}], ",", "2.56`", ",", 
    RowBox[{"-", "11.11`"}], ",", "3.33`", ",", 
    RowBox[{"-", "0.67`"}], ",", "2.89`", ",", "1.94`", ",", "3.22`", ",", 
    "3", ",", "3.56`", ",", "2.61`", ",", "0.33`", ",", "2.17`", ",", "2.67`",
     ",", "2.67`", ",", "2.67`", ",", "0.5`", ",", "3.11`", ",", "2.94`", ",",
     "2.17`", ",", "0.5`", ",", "0.5`", ",", "1.17`", ",", 
    RowBox[{"-", "7.33`"}], ",", 
    RowBox[{"-", "0.72`"}], ",", 
    RowBox[{"-", "10.06`"}], ",", "2.44`", ",", 
    RowBox[{"-", "20.78`"}], ",", 
    RowBox[{"-", "1.44`"}], ",", 
    RowBox[{"-", "9.44`"}], ",", 
    RowBox[{"-", "1.22`"}], ",", 
    RowBox[{"-", "2.67`"}], ",", 
    RowBox[{"-", "0.5`"}], ",", 
    RowBox[{"-", "1.5`"}], ",", 
    RowBox[{"-", "1.44`"}], ",", 
    RowBox[{"-", "2.44`"}], ",", 
    RowBox[{"-", "7.28`"}], ",", 
    RowBox[{"-", "4.39`"}], ",", 
    RowBox[{"-", "1.11`"}], ",", 
    RowBox[{"-", "2.44`"}], ",", 
    RowBox[{"-", "2.44`"}], ",", 
    RowBox[{"-", "6.5`"}], ",", 
    RowBox[{"-", "1.89`"}], ",", "0.17`", ",", 
    RowBox[{"-", "0.33`"}], ",", 
    RowBox[{"-", "6.5`"}], ",", 
    RowBox[{"-", "6.5`"}], ",", 
    RowBox[{"-", "3.22`"}], ",", 
    RowBox[{"-", "9.17`"}], ",", 
    RowBox[{"-", "4.44`"}], ",", 
    RowBox[{"-", "10.61`"}], ",", 
    RowBox[{"-", "3.39`"}], ",", 
    RowBox[{"-", "20.72`"}], ",", 
    RowBox[{"-", "5.28`"}], ",", 
    RowBox[{"-", "8"}], ",", 
    RowBox[{"-", "5.83`"}], ",", 
    RowBox[{"-", "7.56`"}], ",", 
    RowBox[{"-", "4.44`"}], ",", 
    RowBox[{"-", "3.28`"}], ",", 
    RowBox[{"-", "4.94`"}], ",", 
    RowBox[{"-", "4.33`"}], ",", 
    RowBox[{"-", "7.56`"}], ",", 
    RowBox[{"-", "6.39`"}], ",", 
    RowBox[{"-", "3.06`"}], ",", 
    RowBox[{"-", "5.5`"}], ",", 
    RowBox[{"-", "5.5`"}], ",", 
    RowBox[{"-", "7"}], ",", 
    RowBox[{"-", "4.94`"}], ",", 
    RowBox[{"-", "0.72`"}], ",", 
    RowBox[{"-", "0.22`"}], ",", 
    RowBox[{"-", "7"}], ",", 
    RowBox[{"-", "7"}], ",", 
    RowBox[{"-", "5.11`"}], ",", 
    RowBox[{"-", "6.17`"}], ",", 
    RowBox[{"-", "2.44`"}], ",", 
    RowBox[{"-", "11.72`"}], ",", 
    RowBox[{"-", "3.78`"}], ",", 
    RowBox[{"-", "14.89`"}], ",", 
    RowBox[{"-", "4"}], ",", 
    RowBox[{"-", "5.94`"}], ",", 
    RowBox[{"-", "2.72`"}], ",", 
    RowBox[{"-", "5.5`"}], ",", 
    RowBox[{"-", "3.11`"}], ",", 
    RowBox[{"-", "5"}], ",", 
    RowBox[{"-", "6.28`"}], ",", 
    RowBox[{"-", "6"}], ",", 
    RowBox[{"-", "6.33`"}], ",", 
    RowBox[{"-", "7.56`"}], ",", 
    RowBox[{"-", "4.83`"}], ",", 
    RowBox[{"-", "7.94`"}], ",", 
    RowBox[{"-", "7.94`"}], ",", 
    RowBox[{"-", "7.39`"}], ",", 
    RowBox[{"-", "5.89`"}], ",", 
    RowBox[{"-", "2.56`"}], ",", 
    RowBox[{"-", "2.94`"}], ",", 
    RowBox[{"-", "7.39`"}], ",", 
    RowBox[{"-", "7.39`"}], ",", 
    RowBox[{"-", "7.78`"}]}], "}"}], "\[Rule]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "3.78`"}], ",", 
    RowBox[{"-", "3.28`"}], ",", 
    RowBox[{"-", "10"}], ",", 
    RowBox[{"-", "2.89`"}], ",", 
    RowBox[{"-", "13.33`"}], ",", 
    RowBox[{"-", "3.33`"}], ",", 
    RowBox[{"-", "3.44`"}], ",", 
    RowBox[{"-", "1.67`"}], ",", 
    RowBox[{"-", "5.61`"}], ",", 
    RowBox[{"-", "3.44`"}], ",", 
    RowBox[{"-", "3.94`"}], ",", 
    RowBox[{"-", "4.89`"}], ",", 
    RowBox[{"-", "5.89`"}], ",", 
    RowBox[{"-", "4.78`"}], ",", 
    RowBox[{"-", "7.33`"}], ",", 
    RowBox[{"-", "4.17`"}], ",", 
    RowBox[{"-", "6.39`"}], ",", 
    RowBox[{"-", "6.39`"}], ",", 
    RowBox[{"-", "9.06`"}], ",", 
    RowBox[{"-", "5.06`"}], ",", 
    RowBox[{"-", "3.72`"}], ",", 
    RowBox[{"-", "4.39`"}], ",", 
    RowBox[{"-", "9.06`"}], ",", 
    RowBox[{"-", "9.06`"}], ",", 
    RowBox[{"-", "7.56`"}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.8770598313464203`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"998f8fb9-4cf4-43db-8122-b3b744a1f0d3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data4", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"data", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"a_", "->", "b_"}], ")"}], ":>", 
      RowBox[{"(", 
       RowBox[{"a", "->", 
        RowBox[{"b", "[", 
         RowBox[{"[", "13", "]"}], "]"}]}], ")"}]}], ",", "1"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.877059930310459*^9, 3.8770599303114557`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"991b38d8-22a7-46d4-8d53-3b0c4b0acd13"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data4", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770599351400585`*^9, 3.8770599351410556`*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"eed7ab6d-6585-4049-8dad-cde2eaddbd7e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"-", "0.94`"}], ",", "1.56`", ",", 
    RowBox[{"-", "3.22`"}], ",", "2.56`", ",", 
    RowBox[{"-", "11.11`"}], ",", "3.33`", ",", 
    RowBox[{"-", "0.67`"}], ",", "2.89`", ",", "1.94`", ",", "3.22`", ",", 
    "3", ",", "3.56`", ",", "2.61`", ",", "0.33`", ",", "2.17`", ",", "2.67`",
     ",", "2.67`", ",", "2.67`", ",", "0.5`", ",", "3.11`", ",", "2.94`", ",",
     "2.17`", ",", "0.5`", ",", "0.5`", ",", "1.17`", ",", 
    RowBox[{"-", "7.33`"}], ",", 
    RowBox[{"-", "0.72`"}], ",", 
    RowBox[{"-", "10.06`"}], ",", "2.44`", ",", 
    RowBox[{"-", "20.78`"}], ",", 
    RowBox[{"-", "1.44`"}], ",", 
    RowBox[{"-", "9.44`"}], ",", 
    RowBox[{"-", "1.22`"}], ",", 
    RowBox[{"-", "2.67`"}], ",", 
    RowBox[{"-", "0.5`"}], ",", 
    RowBox[{"-", "1.5`"}], ",", 
    RowBox[{"-", "1.44`"}], ",", 
    RowBox[{"-", "2.44`"}], ",", 
    RowBox[{"-", "7.28`"}], ",", 
    RowBox[{"-", "4.39`"}], ",", 
    RowBox[{"-", "1.11`"}], ",", 
    RowBox[{"-", "2.44`"}], ",", 
    RowBox[{"-", "2.44`"}], ",", 
    RowBox[{"-", "6.5`"}], ",", 
    RowBox[{"-", "1.89`"}], ",", "0.17`", ",", 
    RowBox[{"-", "0.33`"}], ",", 
    RowBox[{"-", "6.5`"}], ",", 
    RowBox[{"-", "6.5`"}], ",", 
    RowBox[{"-", "3.22`"}], ",", 
    RowBox[{"-", "9.17`"}], ",", 
    RowBox[{"-", "4.44`"}], ",", 
    RowBox[{"-", "10.61`"}], ",", 
    RowBox[{"-", "3.39`"}], ",", 
    RowBox[{"-", "20.72`"}], ",", 
    RowBox[{"-", "5.28`"}], ",", 
    RowBox[{"-", "8"}], ",", 
    RowBox[{"-", "5.83`"}], ",", 
    RowBox[{"-", "7.56`"}], ",", 
    RowBox[{"-", "4.44`"}], ",", 
    RowBox[{"-", "3.28`"}], ",", 
    RowBox[{"-", "4.94`"}], ",", 
    RowBox[{"-", "4.33`"}], ",", 
    RowBox[{"-", "7.56`"}], ",", 
    RowBox[{"-", "6.39`"}], ",", 
    RowBox[{"-", "3.06`"}], ",", 
    RowBox[{"-", "5.5`"}], ",", 
    RowBox[{"-", "5.5`"}], ",", 
    RowBox[{"-", "7"}], ",", 
    RowBox[{"-", "4.94`"}], ",", 
    RowBox[{"-", "0.72`"}], ",", 
    RowBox[{"-", "0.22`"}], ",", 
    RowBox[{"-", "7"}], ",", 
    RowBox[{"-", "7"}], ",", 
    RowBox[{"-", "5.11`"}], ",", 
    RowBox[{"-", "6.17`"}], ",", 
    RowBox[{"-", "2.44`"}], ",", 
    RowBox[{"-", "11.72`"}], ",", 
    RowBox[{"-", "3.78`"}], ",", 
    RowBox[{"-", "14.89`"}], ",", 
    RowBox[{"-", "4"}], ",", 
    RowBox[{"-", "5.94`"}], ",", 
    RowBox[{"-", "2.72`"}], ",", 
    RowBox[{"-", "5.5`"}], ",", 
    RowBox[{"-", "3.11`"}], ",", 
    RowBox[{"-", "5"}], ",", 
    RowBox[{"-", "6.28`"}], ",", 
    RowBox[{"-", "6"}], ",", 
    RowBox[{"-", "6.33`"}], ",", 
    RowBox[{"-", "7.56`"}], ",", 
    RowBox[{"-", "4.83`"}], ",", 
    RowBox[{"-", "7.94`"}], ",", 
    RowBox[{"-", "7.94`"}], ",", 
    RowBox[{"-", "7.39`"}], ",", 
    RowBox[{"-", "5.89`"}], ",", 
    RowBox[{"-", "2.56`"}], ",", 
    RowBox[{"-", "2.94`"}], ",", 
    RowBox[{"-", "7.39`"}], ",", 
    RowBox[{"-", "7.39`"}], ",", 
    RowBox[{"-", "7.78`"}]}], "}"}], "\[Rule]", 
  RowBox[{"-", "5.89`"}]}]], "Output",
 CellChangeTimes->{3.877059935937398*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"c7f335e5-0f51-470b-874e-a010be0c6b16"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataT2", "=", 
   RowBox[{"data4", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "3650"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dataV2", "=", 
   RowBox[{"data4", "[", 
    RowBox[{"[", 
     RowBox[{"3651", ";;", 
      RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8770600105484047`*^9, 3.8770600105484047`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"98f74e3e-0958-4ab3-a787-deea9b0d4e0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "50", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "20", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "1", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"FlattenLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "100", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "->", "\"\<Scalar\>\""}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.877060024148417*^9, 3.877060041009268*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"9a1f4c81-ec75-4ae5-a93c-939d628efa0e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 100\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{50, 100}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 50}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 100\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 50\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 20\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {150., {39.67529296875, 44.32470703125}},
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877060043376293*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"0eb91387-da6b-4331-8b38-4fa6808cd367"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"netT2", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net2", ",", "dataT2", ",", "All", ",", 
     RowBox[{"ValidationSet", "->", "dataV2"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.877060112499772*^9, 3.8770601125007687`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"2e422cce-efe2-4170-b5c0-089e33fc7346"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"netT3", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "dataT", ",", "All", ",", 
     RowBox[{"ValidationSet", "->", "dataV"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"netT3", "[", "\"\<LossPlot\>\"", "]"}], "\n", 
 RowBox[{"netT3", "[", "\"\<RoundMeasurements\>\"", "]"}], "\n", 
 RowBox[{"netF3", "=", 
  RowBox[{"netT3", "[", "\"\<TrainedNet\>\"", "]"}]}]}], "Input",
 CellChangeTimes->{{3.877060141629808*^9, 3.877060141629808*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"1a30aa48-8334-42e6-8b63-3a07f773fa89"],

Cell[BoxData[
 TemplateBox[{
   GridBox[{{"", 
      ItemBox["\"rounds\"", DefaultBaseStyle -> "LabeledLabel"]}, {
      RotationBox[
       ItemBox["\"loss\"", DefaultBaseStyle -> "LabeledLabel"], BoxRotation -> 
       1.5708], 
      GraphicsBox[{
        AbsoluteThickness[1.25], {{
          Hue[0.083, 1., 1.], 
          LineBox[CompressedData["
1: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
           "]]}, {}}, {{
          Hue[0.59, 0.7, 0.75], 
          LineBox[CompressedData["
1:eJxFWAlYjWkbziRrWf8JYyvRqNM5nVNKG99dSaVF2rTv57TXyTJCYkJZxqBC
lt82hdFMiEKGydL4jSWhhpQlUlT4iJTif77ze/1d57q63t73fd5nuZ/7fk66
Ecme8m/U1NQ0e6mpCb/Zz8POYZ8SfT5y4sfxmb8WtXI6HX28g/I6v6y7OY9X
Rz5cEX/gGppvTvycoYEPO3vsLz95z/2RoN5u0DYU3g9WrdY8+e7L/rfYoW13
3ymrnesr3+1zZ+QoLM/QHuo+7+0Xe2MgtXihs3zdG+7Xol2B3AQdlO0d//5G
I//Fni62F340lWXyXKVh3E//OqWH0Z73eiIC+C/2J6Hqqc+tlhn8F/sGaDOw
H92P47nv9DRenntiiIJgrXFhNvyX94xwTv69UeMsnsOeW+NyF0uQp3Vowc0p
/Jf3pTi4oaMy34znjmvdPHiirwz61rXb701h/sgweMCQzJ1SnvvrqjmZMMF1
NeWLVNq/u/bf9JmClrV6xy9MYf6Z4Z5ZzcA+Ep5rceydsiDGHDp2lurZYp57
d2Dq2eduUzFq4OcpP7vx3CeN+P6hphZwb7s98bWMxWOJ8Iw3qxaLeG7opap9
zp8s0ZQsWgQZi88KOYmN+hkmPDcxw8JqyhVr5P7SltJuzHPmqgCnYc866eoT
xize6bjd9KjYwIDnnFUPclCbsv3hchMWPyCx63rjS/5KQkp7deUCTuvHlgeL
WT5s0SCK/FRiynOC98lLbCFeVGRpbszyY4vQEevejzJk+bFDbYdXUQ7tz1rq
8czfwR5Lufilg61ZPe2xYarWqrlkz7t2pUml4QwYWxvF/z+fMxAWUDp6F+U7
2PJk+owhDsj+bW5T6df8OqC7I2fMLHpPkffi79PvHCDZMXP7TROW75kYHLU6
u8GA5dsRbp7v9lSB5xb7zonML3fEWVv/fsEiln8nuLZtU/uH/F1ZsurIqANO
2J/T/PSMMauHMyzfvy2XTOc5cv7jz+udsaQu8NU5MauPM9L+cb02YCrPbZkv
eDAL541KvN2deU6Vfl8XuF8s3qsmY/VywZIJLbVZZP+QzPPRS2tXzAiRR1vK
GF5d8alz7fUWiqd402qjKF03nPJ42RQyldXXDRtu/RBeR/GdeXUq9V4fd6zp
9B2aI2X1dke2LD6g63tW79lI2XDaZRK9d+P38eTybNTxmk/MjVj9PaCzMK3E
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
48M=
           "]]}, {}}}, Prolog -> {{
          InsetBox[
           FormBox["50", TraditionalForm], 
           Offset[{-2, -2}, {50., 1.911}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["100", TraditionalForm], 
           Offset[{-2, -2}, {100., 1.911}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["150", TraditionalForm], 
           Offset[{-2, -2}, {150., 1.911}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["200", TraditionalForm], 
           Offset[{-2, -2}, {200., 1.911}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["250", TraditionalForm], 
           Offset[{-2, -2}, {250., 1.911}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["300", TraditionalForm], 
           Offset[{-2, -2}, {300., 1.911}], 
           ImageScaled[{1., 1.}]]}, {
          InsetBox[
           FormBox["\"10\"", TraditionalForm], 
           Offset[{3, 0}, {0, 1.}], 
           ImageScaled[{0, 0.}]]}}, 
       PlotRange -> {{0, 268.00454545454545`}, {0.789, 1.911}}, 
       ImageSize -> {302, 182.}, 
       GridLines -> {{50., 100., 150., 200., 250., 300.}, {{0., 
           GrayLevel[0.3001]}, {1., 
           GrayLevel[0.3001]}, {0.30102999566398114`, 
           GrayLevel[0.8501]}, {0.47712125471966244`, 
           GrayLevel[0.8501]}, {0.6020599913279623, 
           GrayLevel[0.8501]}, {0.6989700043360187, 
           GrayLevel[0.8501]}, {0.7781512503836435, 
           GrayLevel[0.8501]}, {0.8450980400142567, 
           GrayLevel[0.8501]}, {0.9030899869919434, 
           GrayLevel[0.8501]}, {0.9542425094393249, 
           GrayLevel[0.8501]}, {1.301029995663981, 
           GrayLevel[0.8501]}, {1.4771212547196624`, 
           GrayLevel[0.8501]}, {1.6020599913279623`, 
           GrayLevel[0.8501]}, {1.6989700043360185`, 
           GrayLevel[0.8501]}, {1.7781512503836434`, 
           GrayLevel[0.8501]}, {1.845098040014257, 
           GrayLevel[0.8501]}, {1.9030899869919433`, 
           GrayLevel[0.8501]}, {1.9542425094393248`, 
           GrayLevel[0.8501]}}}, Frame -> True, Axes -> None, AspectRatio -> 
       Full, BaseStyle -> {
        FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
         ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, PlotRangePadding -> 
       None, PlotRangeClipping -> True, Background -> GrayLevel[1], 
       FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> None]}},
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    GridBoxSpacings -> {"Columns" -> {{0.5}}}, 
    BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]}], 
   TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
    DisplayFunction -> (StyleBox[
      StyleBox[
       PaneBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
              GridBoxAlignment -> {
               "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
              AutoDelete -> False, 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], 
             "Grid"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], "Grid"], 
        Alignment -> Left, AppearanceElements -> None, 
        ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"], 
       LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Arial"}, 
      Background -> Automatic, StripOnInput -> False]& ), 
    InterpretationFunction :> (RowBox[{"LineLegend", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             
             TemplateBox[<|"color" -> Hue[0.59, 0.7, 0.75]|>, 
              "HueColorSwatchTemplate"], ",", 
             
             TemplateBox[<|"color" -> Hue[0.083, 1., 1.]|>, 
              "HueColorSwatchTemplate"]}], "}"}], ",", 
         RowBox[{"{", 
           RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8770601560279417`*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"53bcad21-e041-4475-8d69-73b2efe746c0"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Loss\"\>", "\[Rule]", "10.390689342310978`"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877060156038432*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"e1637af1-22c4-4872-a54f-107d04d1ae1f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770601560444117`*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"b95a9135-084d-492f-9429-1a92ad2292bd"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["discontinuity problem", "Subsubsection",
 CellChangeTimes->{{3.8770611231173353`*^9, 3.877061134850466*^9}, {
  3.8770613309230757`*^9, 
  3.87706133234688*^9}},ExpressionUUID->"a6c901bd-f654-43c5-84ac-\
f273ac3a4482"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Batch", "[", "n_", "]"}], ":=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "->", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ">", "5"}], ",", 
        RowBox[{"Plus", "@@", "#"}], ",", 
        RowBox[{"Subtract", "@@", "#"}]}], "]"}]}], "&"}], "/@", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"10", ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "2"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877061148718003*^9, 3.877061148718003*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"e1fa3f1f-a35a-4165-b370-92dce2c39592"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Batch", "[", "10", "]"}]], "Input",
 CellChangeTimes->{{3.877061159372446*^9, 3.87706116285944*^9}, {
  3.8770611975796223`*^9, 3.8770611996836023`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"f5002bc5-023f-454a-a1b8-4b3c171729ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}], "\[Rule]", 
    RowBox[{"-", "2"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "2"}], "}"}], "\[Rule]", 
    RowBox[{"-", "2"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"7", ",", "4"}], "}"}], "\[Rule]", "11"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
    RowBox[{"-", "1"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "10"}], "}"}], "\[Rule]", 
    RowBox[{"-", "7"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "4"}], "}"}], "\[Rule]", 
    RowBox[{"-", "4"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"9", ",", "10"}], "}"}], "\[Rule]", "19"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], "\[Rule]", 
    RowBox[{"-", "1"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], "\[Rule]", 
    RowBox[{"-", "1"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", 
    RowBox[{"-", "1"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.877061165139059*^9, {3.8770611981558304`*^9, 3.8770612002415705`*^9}},
 CellLabel->
  "Out[113]=",ExpressionUUID->"dd4563fe-ee98-41e5-a7e2-fdcdba91269f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"Cases", "[", 
   RowBox[{
    RowBox[{"Batch", "[", "1000", "]"}], ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a_", "->", "b_"}], ")"}], ":>", 
     RowBox[{"Append", "[", 
      RowBox[{"a", ",", "b"}], "]"}]}], ",", "All"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770612313652096`*^9, 3.8770612313667116`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"a587884b-578b-42ba-aebb-c31685cf5585"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJydncuOZEWShoOim0tfqrl1UVQ1UHWahmaGa8/siWeYJ0AjzXpeIR5q9nUe
gSVLFrVgwQKhFGohlJqR0j4L2Rf845X4xnUs/Libm9vd7WQ+/s///o//unM4
HP7nhcPh+UO34033XvWP9pv+FZ6rf2Wfz4z/x3GOp/F8H7jnC+PfEJznv+j3
vwsP1vms+u+/mD2N8X5O+GzVg/fneqb52e2l4y8/07PO/b164dV465nz4pn5
/sX48FzjoSfveV8+302/M555wLfXdX+Y8/Ie86z4jd997uD1b9WbrrS0L/gD
vmLdRE/Gs983anzabzpf4NDhlQU88f8b6mmRP6s3/7whOPtin7z/0XHCt+o/
WeDDc59L9dCT+f+yP9s4nlkfOM/mK8a/pOee/8mch3HvV/+e+n8H3+rN//c1
/jM9sw58aD2HnCY6Jv3Avhqvmod9bqyzz/eZ13RgHc6d93nPctFyuc95wAc+
gb69P42nmW973/tcj3mYv+l40DP4MW6f+JgvEv8bP+Qo0T/xVeLPxFfJfiW9
l+zgSh9avyX60dsuJHuazqX574s5PslL4p+kf2zP2VeyI0keEx/yPuOR91fU
Gx/bux6nPp2vf0d+E53va/ymcfxuO0XjOfFh4v9Ez16/euTikfrPNM70T+MT
n4OH9+N9gA+tz0H40zN/wifpyWTfE56MY13zIeOZJ/HbS4K3P3OY6723//L6
6FvOA3xtF2zfwZP5LHfJ/tteJzxp1s/pXBI9k/+W5C7Zrwt/RXi23trnc9KH
zGO62Z44vvko/A4fdrx2mM+cK+van3H8lfz8ZF9W9svnnvRJz1u9/TfT4b56
5GUTviv9trL75rdkD5KfSTOfQJeWG+Gzsf4+n9kv8ruSa/s/zGN713YXfKpP
djDNs7Kbto8pfknxVPJ7Gcd+TR/zz8p/3qp3vGw9D53NR2k8Lek3x3krf6Pt
zD7xsVys8gM0nldxUMpX2A9J8p7kpfGpHj2Q9GqS057nMJ8v8lvCM8VtfmY+
yyNwy0Xabzp3GvOh5xMdLK/wc9ovrfl1n/iwjuNi62fwcxyR7G/SM4wz3VKe
J8W5Ke+U8Ez5NFrHYdIPlqOkh1PcmvzDXxu/J//Kfm+KTxMfpnVTXJzsV9KT
9hNT3Gt48kNsL5zXcxxifCxPpm+y18Y3+aXp3Bl34d9Vb75d5f2SH2X+XOXl
LvQS/WE+r/zYlAe4iIur2Y4k/yHxQ9J7m9bzsxu/W8+n+DrJl/N/ltO0booH
+d15HvNV4ocU313YlX3OB90d59rvotnPWflpnn8V57a/uc9xW/WWl+TfMp75
V/Gm+TzZTZrtbMqHrPx2+0WreC3lc5K/vYXxND+7rfIVzvtFu3mY88A/SS8n
Pba6x2n6FXwVR9tPWMWh9meS3Uz3rckOJvuS/JPb6quUJwHe+nif+Fh/JH6g
2b9K8WPKz6zuW3uc1nU8vul98jMp75ryJ8n/TPqHxrz4+QnPpM9X5+64gOb8
W4orkz+Q7MWm9a3PEz82vff/f9wmOM+JT1ZxNO/7fsHx2iqvbj1mvnSdQMob
8J7P1/RP+XxauhcwP6z8t6165CLlNxhnO5XkiN7rJbtvOvlez+22+iT5kwme
7h0Snsn+Jr864bm6R6BHD6Q4K+nJlA+hma9oSV/Zn0n+PG2rZ/Qhz9YnaV+J
z1P+Kt1fJL0a7YvW9f2j7ekqT255XN0zWl6S3Un8Q7O/urJ39mcSPis9QOM5
zf+Gf6/5U74l0SH5dbzPe/Bt8idTnJvuX1bnbjyTv3pb/3YV7z9r/JLuDZP/
zDqW33SOqzoZmu1Gyr9ZTjfBnbd0nJL4KtHZesj3XI4XVv488FX+Z5UHpj2r
f57y+cYz0Z9xpnOiT/KvUhya+Db5k0n/r+4Zk9/p+HSV/7zgxwC3n9f3zvXs
PGTyE1b5Fp/XKo5zXJDqoJI+NF5e13ov6ZPb6p90b76qQ0t5WhrPSU4T/ZP/
n/RD0mOrezqa+d76Abwtp6v6pwt74feEZ9qv9fwqTklxtO3Udpxw5/GsPzf9
bn/V+adk35NdSPehSY6Sf5v0xMqfSfUlF+se5u/OT5rfkl7a9Pv7eub3zosu
muOLlE9IcWvKu6Z6gESf5IdEe6H5nd9gnP23i7w38x1++dn0ifWzAb6yI4xz
vUeqx0j5Actj0m/J/0/3winOSn5dytet6oJo1oO0C/1Sve+PUl2o9ecq/+Y4
IuGf6JD086+1m85fJXud9GGs36uW/C77k7SL+5fDfG9lB4HbLiR8ugmfVT2J
59/UO6503v629++r+xTzG88t3/t89rlvgq/iysa7evsh9kcSP5t/V/cpKS5O
92srPWk6pPqE5Ofc1o9N/qrfX9mXpG83zYs9Tfr/tvnbROdEh9v6Rcluxnrl
0BL/0FL+M91POb5L+dLEP0neY13QcY7390SpXoJ+9b3JCh/zbcr/pDxD8qtj
0zzOZ6Z8UfJjvY/Et6t6D+u95C+t8rcp/2m+Wn2PYDxT/mT1nVGqo3Mckex+
kpeYJznMZ8tRiivtd6U6rqQfNuHleirHxcm+pHiElviE91fxV9K3q7opmvVC
ytvbn1/Ve/AediThwzjTOcUvaZ7ED7fNdyW56AZe+y+vs/L/0z1UyiOt7qOd
51zZ35S/TfkTfn9WuXZeK9pTjbdcNP2Aaz7P43gQvOl9r5fGP3P+pHrHsynf
nvBJ/ljiT95P34mAF/R/pJ7z3TTefuwF/wsf5ytSPtB0Sniu7keMf7qX3wS3
nJiPov9ZzXaNZj8w+WPe9+o72eRfpXvhdG+b7MhKH7qOJTXmddy30v/Afd+R
6sM9nudUd5Tu9S7q3BYt5RPshyS6reyy81pJ7m5b95vsyCZ4+296z/zsuq9V
/s1+e+JPWrp3vsgPCV/Lleu4Uj4k8X+iW5LflK9Y8a3lJcXRKe5I9xSrPKHx
WelV05OW9GE6R59Xyp+k+GjlDz9rHjXZnZXfdfG9STXnW5Id+bX85vvT5Iek
+RM+yf9f0TPV5/h+LcVHK31oP3FVL32RB+b5MJ+TX7HKw1ieNsFt5y7q1g5z
3Ht7eL/gq3yv9XCSX5r9k1XdkfXPMg/DfLvGVe/78RS3eN3VvQz0cb1l8u/S
PKbbqk5+Y9w+x9Os12i2E8xjebGeXt0/PqtcMJ/zuql+I+p/98LLdF7JdaoT
SPdTya/eql9915nON9mdlPeO95KHiZftrPU5eFtvpPNNerjjTM1Ds71OcUTa
b4y7w/zJzq7qKp3HSHUIid8S397W31jVA1hvr/z5TXgmuV7lo+yHMK/xinlT
4bP6O2zJXqR7BN/P2P933d2qbha47xdWetH2znmqlD9P+jn526t8iPNam8Z7
v9bbiT+TfK3i65SnYnzjf5i/+x7K9E/6Ldbn0Hhe4ElLdUHWT6u6qme1R6u6
OPshST+v9Iz18G39wBWfmz9XeR77q5vWv9Azmi/FNTTbx5QfWNlZ8PLfR7K9
SPfvq7jSfLjyw2mOf6xfk75K+cxVfOd6mxRnpfz8dpzru47O902rfJH1f8KH
de3/pHuflZ1yHErjfcdZwJ0X9Tz+vsH5AccvSQ8keib9n/yBhM8qrre9S3aE
eWk8p/huU9/3LLdsyY6kvGiK31f10vYzabZ3m+b3fi/yqIcJ9738hXwIL9cV
JL/QcpHkOsbvGr+qU0p8leJHjzM9Le+bet+PGP9UF5H0c/I/V3bfcVDSt2n8
OxP/E+d7Vevd0fjrgr844fs25/kS/Xw17fHp8T7nKfgRPnz5OOf/qsbdPU58
/vnFGL8/Lvib+xh/gv6vFZz9/rV67xc6s+614N/d9KdX672nE7/TvYIXnU8P
j3N8tX4Gnz9UX3r4CN77F2MfJ/b57RdjH9D/9KB+R5/8pvrXWH8f42k8d1/r
7Z9POPz/5T8EL77b0Yfs6xvpE+A0nqEjjWf3/v3H6r8t/oR/aDzfFZznK533
9zr37yac84U+h7erh87wFXqA+f9ccPRMzX96c8KbL5Df39b4t+qZ3/920zd/
vV79Bzc9/HOCD0sPNP+w7sfVQ886x9OfCx/4ueX0OPHc6tnyBR+WHmOeE/so
vJs+6HvO8Vrw/ckcfyV+uNa5VWu5AK/P5z7gj1PJXdMH/viwet5Hjv4uOPq1
6H8hTyUv0K3pelX7gn/oaewTPsPPh3/eFZxzfL7gP4tu7PvhnAf4SfOc3tZ4
5sGO3NU8wF8uOPR1Xgj6vis488Mf9+b8J+zbqzfwpqf16z3B39Iz9oj5sSPI
L/tFr28Tn54Hev6xxsMP7Bf5Al7znNDP4MX8n9bzw4nP/hn41jPj35nwPvc3
Bf/jxKvxx39Bjz4VP7xd+6pzOUEf2fEj+DAevbsrbuDcvxW8+b76shu9z9oX
+q3pibwWfZDr9gdK3pHrk/1h8LyWXrF9KPyabj8V/AWNYz/I3bXgPxS87VnB
f5Q/xvjS802Hgu/oH/Qp+hk+eTjh33ymeYoOX0If5OWd+XvLF/Df7Tc9+4XP
8buuJ/xEvIk+wS6gZzh38How5+/zwp7W/H2+wNEzZQeb/pwj5/bNk7Gv1ldP
p/9w6rzyPud5c8KbnrXfL5Fr6IW++lfBkcuyy22Pyo4c63zbHhX8VPao10Wu
8fPhq/cYt4/50cOnTzR/6WHrpbY7hX/7G4xHvyFH0O1a9AeOvYN/oM/re70n
PwS7AJ9At5cEh69qfNt9+Bf6sy/WR38iL9iZxxpPe0vjq/Uz+BCf4E9CH56f
q+e7gqNPnk7913ET/MM6xI2NZ43nvB9OeMsN84An6yAX4PP7gkN39N6DOb75
EXlnv8yruKzlvfzMo/INR/MnfFv2sfkZPvlI49l3jW98HB+Aj+KDpgPy9a3i
Puws+vtlPf8gOwL852lPWs9/I7lo+7zf9PDl6xPe51LztH9NDz9t9Tt0eW7C
Wz8Tp5Q89rkQj9tPvjPhPb72j1/T49m/7Vrx2w4/yw4ddO7AH2HvHk/4bj3G
OeD3QYeXJ7zHQ89N47G/irtbLsijPhW/lJ/c/gl+FHEB/sk24b3fgj+SPwOc
OL3lse3JzbrNJ+znXc1f+zr6fKEDfhd8y+/YceiIXKLP7054++3gg1xjZxwf
Erdid3Tf1PjX+T0SPdsOkq+rczk2vxSeV1MPHt4t+LX0I/4Gdpb42vvCXktP
dpz4tfzbgu/s994cR/6g4dX6GbqBJ/rz4YTvn87x7V99PMdjJ04a3/t9f44H
vn+g8eiTD+Z48h74M+1/sh/kn3nQ8/hFDyd8r3maH76fcUnzA3kcy6/8puZz
/Jbf7HP+WvdouwOeH8/5e1+f6Bl7zXuvTnjbGeiAfLHuwwnfHW/Sk5djHuIv
5I95dsHBE7rh/3Yer/qiZ9On4MfO+074qfR/6w3iiD/tN/1dwSvuOM9/GM/n
+Q/juf2/9o/2sW7vmzwG6zK+zr35Y7uB7+gN+IT8LXly9oW8fyd/GPhXigeh
+1s1P3SGD8Xn7Q84v/fqhPf8+HVfK+9EnpbzBM54/ETn3XhW3q2fnc/iGfrg
/8B3dwW334X+/6niuHsT3nkm9ov/hh/l+J7zBV/wqjjlnCe/6XfZ9z7H39c8
9svf0bqMf0HrAn9O8wD/p86r+ULjkY97gkO3PxT8ZcFfLPhdwe9ofPtPGt/+
U8GRH+yg/S7sHXqA8fC/7D7wnTiUc0cOih6tH0pejpYL7FfNc45b6pl7N84X
Pny+9gU94TPy3uCPvLwt/NGf5Dvf0Xj01TvCy39/wHkU5bGPrrckf4ld7rxn
jf90jod++NUH6df2q9kH5/+BxjM/54W/C51c94J8/Cy6Ix8/THsOnkfos0sP
Vf4He9X6Ejx/W/up+TrfC52hJ78Dh57sx/4C9wW0vr8qfMib4Adhr7Gr0Mdx
L/Rk/s6nSJ91/kX6TPENeULHQ+QJ4cPWu6rraz5RPXbzif8vrfOsfX+gfRCH
9P3VPuDn+6uC616u76GIPx9qPOeI/6t65vZ/P5zw5jfdy7efgf/s/boes/1i
4d9+8T7fs31G71zkR6t3fpTfFfdcxH/khx8Lrr8zg7yQN277BJ9XvuiAX8K5
tn8kPwL/5+Le9cnEHzpgLzq/Wfjo7+T3vZvrPOFr8H9twi/qFTtf+GTAz/lC
4d/3nzXPVzr3rmOcePY9C3pOee+T7nnaPtb7LUf4e9scf0TPkGep39uPZT3k
QvWiLRfMgzyiH7i/gG/ZL/cFjIdu+Pnc69zT+Bc1XnX7necAT/JZ8M9XU59c
3IvSOk6q+bFrzgf0PcH0Rzseutb5k8eHfvquofUYeRLW4Zwlj60fsNfMA/3L
n+94AP2DPUVO2Rd5QeDgDx0dB5CfvC+4466O42tfX0/93HrP9SDsCz2meoq2
w+Dp/zuDfkM/0Ppevdatedp+qV6u7Rf5NJ2j/77E+Z5hzt/+g+vH8B8+FBw8
8U/uTHxan8DPXY9Q8GrnuoMb+El27eK7FebhfqTfv+mp88G/Oudfa93vJ7zz
Y9i1vl+aeJ7v7QveebQa73wM9PT3+9ATP5N8E+8jD8QP7Av/R3mXzj8DR39y
LvV+219/P4D9bT7UvogjgPf9/D7nQQ/rO6zWw8hL56fUc4+C36K/V3Nyfg9+
uKg3mfvq+OXRHN926NEc33lu9EzXu+0Dfr5fKj3DfMh1zdN1Tn2vNedpu3Nn
wns8cW61ps+jCW/6cO+GXux7PNm7rncQvOsdnoz5G0/iZdZFzxOP6B6+7/1p
XQ+l+bseCvhxjif/B5zxxFH4M8jR1xrv+jvoDx2+Exw6fCW470vRA/AD9/Lo
E+SIfAv76LxRwZFL+NP2Av5Erml9T7hPeN8TFpx7oK3w7XPk/ep/EP2Z5+cJ
P99nznnO95lz3aYP9YHkU8AHO6t6n93f+6BXXTePXv2b4Mjvx4Kjr/R9R+sr
7Av6qu+x9wE/1+VN+Lkur+Cb9uXvj6A/+bTvxScvCN58qPPqust9wM91lxN+
ru8ouPKRJ9+7d5611iVOcv71d7UedGD+P908N924h9L5Yqf63gt8toJvc1+d
n6k8ScsdeRX0MXqSezfV83Z8ipyif/Anf5KeYb/cd4Ev8e9P8ie531R9H3zb
8S5+KfEC9o3zxX9wfEd8ih1THWmfY9f77BPfzn8L3nWCBefcO34oOP47eOLv
VV6781eVN4AOrQew79DL91rEL76n/WnGie2/kU93fhT6MD92ijyo6vQu6tnl
b7c9uiP8XVdFPX7fBxaeP8v/hM6Ff/Mzdhl438vdjG//BX2CnnEdDfLyQHD4
jX10Xrzwcf1g8dNJ+ZxzvYzGw6+K31s/d/1B9fAfeQ/XXf4oO4s9faDx4PNY
cO6F5R/2dwqMx5+kjv2vGk89CfEY6xGP4Ad2fVzhWXmD1ofYQfgD+nCO34pP
yg88Ke/XegO9z3jqdbnnR89wT816ut/rc/G9JPzQdWE3/Nl6zPd65DOYH32B
H9d5yH3g1/Zd++n6YvZ7JX7ALmtfLX/wPfPXOfb5gY/qGHm/89Ls/+ncB+P7
XPz9jr4Xabx1H9nnpHuXfh97gp29Ej3xq11vpe8F2j9R3TL7IN9+cY+K3wu+
XY+4j/eZr+dRPWOfI/5uv7fP9ZBf1kU+m1/2iWfXg9zAXWff9MG/fDTHt1/S
fFfwu3N85wd0/tDh4jsq+FP3gdxz9X44xwd6bjqILtfiL9a7kv6A/uTRVXcN
vO9N+r55nn/vy+urHr3jvqfinyvxJ3X6yuMzj+t2Ws5Et5Zz/CflPfscRaeO
Z1lvE1z1uBfnazqx/67v2/V+za+6687nuH6s+K7pcDXlhfzAmf8KrrrE7vU9
Aufe92u6Z2n5RS7YN+fo7wuRr6sppy0vwNHv+o7m/D3MhJ/rufa5HufZ64sf
pacv5OfpxLP1QMvtTU/+9uR17N+3Pax57k544y+59Lk0v3804U0H1SG3ncKv
Zt3OWz6Zz7Jj53MVvRin79hO8ttPvieWfeh9FRx6Nhw6uK5P+tX17P6eDfw9
f7/v724eC/6q8Cr57fMCH+oG5Wd2Pudq6rWTvms7n/OEn89zH+ud7Xbho/rK
szxpPPf68lcfue60z2Ef+J/5dB/vtz1UPUzrJX9Hxjyq92t6+7tR9vGhxuMH
mv76nrv381T78PdSpa8uvqv4ZM7TekzfazR/qe6x11e9a8uD+Zzz0vcsF3x0
b8JPvi+5tn2Y4y/g+t79pDio763QA+1H7zc9/Nnyus95/L0IerLleB/zn+vf
9/H+WY8U3PV6+k7qrN+mH9Lzl9xdfDcMv2En2o5Mv/fCr2m/R+/ZP3NdjO1S
1/9pvgv/6wb/lkd+dx1gr7NPfFqva19d9zLhZ/7bB/zst+5jP2f7sI95z3XH
N3D/HYKL+m30jPRDxyvEEdKD1kstr67bp1f9nu2S63aPrl9tP32f8PaTFTf1
vveJp/14xX//h9f/AqApglU=
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJw1mGegV8URxS+83SVPepOOCIiCBFDKC02QXqIoCCIiPlE60qWKdBEhCtIJ
UkVEVMAeRRNDYoxR7BXF3gIoHRQUf8cZP+w7585/7957Z2fOzL5z+4/sPqJg
lmXLCmRZDvhmyLKnwH/ELLsR/gf4V+CDXJ8Fj/Af4F3BKinLCoJdsOeAB7B3
APOwfwgvDK8KfxGswJztYB3s1cDq2L8EW2GvA85g1IU3BPP5bS44gLkzwZLY
D/Fyq7GfxfUH2JfCP4Ovg08DGzPnOHN+5vpOrvvzext/zxvh9zA+hv8V282M
JfDe2PaCtbi3N7a7uF7BdQ44GGyPfTb4HeueDT8CDue6A7yvfueePPgUrQHv
Cz8FLuD6YnhncCFjC7wueC6/lYHvBx93370HLwSfgb0+/Ai2iuzFS/BB8JnY
J2u9aL5qCl7PuA1bE+47yTsV8m9/A/thsD72gfAB2C/SvYxS8HnYfmT8GV4B
bI69HrxjNP/nw88Gf2GNwvD/wsf7/r4Nns+65cAazC8Ffoi9ULSYUGx8C77N
9Wnur8DcY/CB2MrD+4G1mVMDbOuxVAk+DT4JXl3773tUDCwezd814K9H2/96
8NKMltoTbGvBYdx7D7iSscHf+VnGcvgz4CTm9wEPKy4Y67H/S9+F/SrwILZr
GJ2w3xXNX/Lb01qPsQg+C/tU5pfg+iP4ve7PatG+UXs6B5zrMZAPLmTclFkM
z+He5+Uj7TPjJ77lLewT4Y9hny4fwjfCh4OtuC7KvWPB+4P5575gc4QTwJl6
BvZc+LXYWsOfAHd5rinnbvXnFganMf4JLwKeyjFfvcT1AtYZnVnMr/Lclwb8
nbEC/pw0gN+2KX6TxWF9eHd4Z3gL5uwCa7pvG4Lfyi4/Muc8z/Fe4HauD8t3
4KOM0fA+no/DmTMcfNnz5ecciw/FyVF4Tfg52iOwRzD/VAG/iKYfbVivWbA8
7Q7mYu8MfxU+RjEH/5u0xHO2Kny0x0a3aD7vBL8c2/We48r1LzwergPHSTPg
U/25l8P7gft4vyHwy6R3XBfR81inMjzBW8A/134zZ0y0d9K7lYZ/Gu07ajFn
ja+peCiNbSv8FXAsYye8iOfvBOkY88sy7oafwfZHRgPm5IEfuKZJ29ZH89sd
wXRcei79fd/fbSVrHABLYP9O8e7r/ALuVsxltpfVIcVd//Wd+t6jwYY0qxrr
VNF7YG+s3I2mkd2wfw1vDN+cTL8UD4c0199T77s02rNu4M9Gj4fLouVKMfge
7bG/ZyHwJ9fA+a7zyjtpcHlGLvwCjyXt46hgOS/9OcF6B+G7XYuWMxrC/xMs
P9aq9oHbos3XfSXdby+As90unWjq+rkTvNK1bnIyX8vn3wfzhXyi3H/KdUN6
fDyYzktjZkh3MovDosx7S3GcLKfKw2+BvxMtJ2bCdwSr1dIL1QbViFujfY++
ayV8S7A4Xwo+z/V45TV4u/wI/1+wHNAczf23/AlPrP+Af5fqQwfsf3J97pSs
J7giWh0+iv1Yjmm+tE6alxesbkpDvue6o+KF+4bKd9iDtDSanmxNVj9UR74O
liPngzukaYzNwd6ncLQ4ORUsB5QL8tGL0fJa+a3YU7/xiOu6fJ6UT/Amma1b
kd/agvuwj4yWy6rdlbCfkd5ga+b58pveYO8dLA4P8Hs77K25Lof9R/UE2AN8
PbZhqufR9lf14f859twK8DXB/K99KCodhV8IVuae3GD9TAmPDa1xAl4gMx3Z
xGiUmR/bB9PqY8F8IZ9MYX7LaDH8ey+xld/uS9YLSbseBju43p6E12VUxf5u
tH3V/u7PsZqrZ7WOlufK96D88Jqb57VS+bRJ8RxNB9SDXeM+UYzd7bF9EhwV
zT/r+P3JYPVUMa9eUfVlMfi4a6PqQkfvMfYq7nxf9J4Sh6as2YjfmmGfH0yj
1GOp16oY7Xl67hGPPen5zcnyTTmr3B3rtVV7XcA1Vno8xXOhG/hCtBq61/2j
+psp16L59jzWXOK1O9frYE/4Rcl0VTVLPU7zZHGwG/6J53JrbLOC9VrSxMp6
Z70/uDOaXb1YuWh5qlzTc1Xfn4mmO/oW9VMbvQcurufw26XwC+DLPW6lsTV9
/XbgvGQ1TPVklvfYp7Vf8HrwLzU/Wd3Ve81N1geof7iTMT1Yf6u6VpY1N4OL
vJ9QP9Mr2X26X32YeoxV0XpT9eeXwi9hjIGXkWZ7LWucTMfUz/TQviTTrUHJ
dER6MiKaxirfJ8qfrnWrow1x9Y16rnrX0dj+ojXgB3l+2WDnC2ma9Eda1Ahs
wrXOP9q/lsl8Ix8tcZ3RtWp0JXgn1a5kuv8NvEuw+GuKbVKwb5RN36hz0MXY
x0d7rva0muuDetfBfsY4Dn+N8QPv2ChZfartNaJrtP5KZ5avovVdFybr8xQP
2u+e0fyjnnxQtLNP+2R5J61Qf1dLGkZe1A4W64r57tivY94Qf4e2/v76ji3R
YkZ7eU4wnw/QtyarGbK1897us2hnJ2mRejnFoTSyC7+PTDZX93zi36JvGus9
q3ryEa7zt8CLBevDR4JXJtPKPdH6avXyPZPVd50vuibztd55MLYp3v9pX66N
1l+pLshvDcAeyfZK99wEvzpZP7HP/aaeRz2UzlCKh/7g2mTnN/VX/d2u97wX
+7xgdV5nE525+iaLZ/lN/lvvve4O+APJegidHaYnO2MWTPad+l69n3okaVsD
7A8yhsFPqC4kq40rkuWRzno6X0ivVL/eBYf6c5Xr6hPeg/cC+3jOqqea6vMX
g+8Hi41lwTRZ9Ujn4SzZWWogeFuys4TOC6W4v0pm9U5nf+XUkGg9nvriG5jT
L1lvcdrf+Rv4tmQ9kOqp4rt2sl5Zejjfc/O1YOcF+X+R54LydU2yc67q2jJw
QbJeTX6bnez8+TH2OsniZo/rhr5plPtPZ5k3gmmb9u7hYP2VzrKPqU/zvkR+
vt/7/qPRYl0xr2+o4XqrfvCSZDVY53f1hTrvHAoWZ4o3nTmuYE6+r6Pafgz7
vmA1eEBmcaOeYQL8UcWy56bq+bhkPbF0uGSy/mprtDOF/gfyZLR8Vf1aHaz3
Vv1VHVZNVe3brjqQLOeVm0d83oZka6rHXwW2iBYP0rp819IzwYa49PWUv9sr
0f5voxjYFK331r1ao7nrqnROfY56nyGs/3K02Fa/MdF1W1qgM4nWXpws3hSP
Q5P9v0j9p/pQraG1tiQ7e+r/Rg+BZZKdi7Tv8qP8qfPZumD9le7Z5Tqjc/2y
ZDmquRs8L1QrPw1Wayb7u+idFib7n4t8qJz9FSWuM/s=
           "]], Polygon3DBox[CompressedData["
1:eJwtmAn4V1Max3/533OnQmijKArZQ1KkaS/LpKwJIZRShGzJEkm2SfZQJGRk
yTrCMMkYyxhmGIRnHjyMGYyxPGSyNfP5eN/n+Z/n3s89939/99zzvt/3e06X
Y046YMpajUZjerNGo+J4YGk0ruT4CLBP3WhcwvFz2he0m+Hx9I+j/yJ4LHw5
fBt8IzwZngvfAzeDfwXPgZfAV8IL4Z3hzeG28Gh4NbwX/BM8DN4PHgQfA+8F
P0x73Xfh2sv0vUvrkP170nc0zF/jFfgw+EbgFXgsvB88Cl4JfwCPhO+Cv4E/
hefDG3P8pqnRWEUbBR9H/0D6T+T60Y4fbg/3gc+GJ8OT4avg8fAMeDb8EHwm
vCXcHD423/88eAf4IPgMeEP4Hbg1PAvuzHEJ7W7aSfm9hjEX38Mz4TPhGdy/
H7wRPAIeAB8KD4ZPoW3N+Ta0qZyflff7vJPh4bT5nC+gjcj38/v9AT4PfiKf
dzh8KnxAzl8buC28FP6+EfN/C3wp3BpeHz4XPh02fnrBU+CXfH8uHAIfBE+E
d6V/BnwsvD48Dz4dbg/vA7dhvF/Bp8MPwB3huXA7uC08tRFjcCw3Zbz9wHxd
Ba+Bd4L70d8n46sLvC68P/wZ3Da/Xz/4CHh9eBB8CLwn3B3eHe4P987nOb+7
wH3gHvCv4Z7w5vBQuDe8VX6fCfDl+fsX0f7K+au02ZyfynEd7lmXdincqo74
/JLr23N+DddvgJfDF8Mvwr2MT8a3B/wafAY8kv5D4avhZfBNcA94t8ynKfB2
cG3Mwe3hwzk/KPNpNnwk/Dz8FN93OLwZvC98QubjpvAnOb/L4Dbmh++uLsAb
wwNzPgfDHeEWdejF+/C1nLenvxPcBd4Q3gPel3ho5bjgGziuoH89+neGv4L7
w/+A58Ed4OHwNHh3eBd4EfxHuAt8N7wKbgFvAj8KbwDPhHeCx+X7Hg8fAU/J
+ZoIT8zfN167w3Ph3xmv8FHwnfAk+Hj433z/bbL/qGahT4vhxx0P/CN8R+bb
Kdw/NONreI5nS3gIfG/mj/E5FL4i9a4VvG3evzPcHx4E/zmf3w0eCD8JT4Sb
cfxNHRqoFq5F/yPwU/CkZvG9u8I7whfQfy+8A7xp6tVC+Hh4vTr0UH25vY57
vPc+2o75/dT3o+FucFMd43sLvoLzAfT3hBfDJ8A/wGPgN+DL4KHwcnglPCH1
0/jeDd4cvhP+CP4YvjH1VP0+Bz4u9Y3hND7n+28NHwZ3g9fm+FDqx5P5ewfD
b8KdYYvXbnBr2jSwJdcf4PzB1JNv6V8En5T5dCs8Kb+fer0BfBd8GbwQfgae
Ae9KG2Ksc20Mfe1y/I6ndx2/6W+fxeG0Ejlrbplj5rKa4NwbA2qF+vUs52sY
34sZ48b6WdY42jnOeRWa1KuERq+o4h3Vbt/JXDAnfFdrzh35+9aiX9JaOb88
/wLjs45abo7ONNY4f8xchWeVqGlPVTFHzpX5DTZW8//fNoUfGAJP4OJ0c6xE
jBk33bNeLGasLTi+TP91HK8toXu/NP6sk7RxtL3VGzW3im/YLr+nGj88+/QM
eocW9G9UYo6da2Ps4hLPNFaMGX9rSOrlCK71rUNT1VZrirXFd/yqKTTCd1eT
1WY1VC1Vg9SivvDeJTRVbbXm9DOXqtBSNfWMEjXB2mBOmVt6ijFVaIheQw2f
nTqttp/P+QtV1Cy9kjHiXN3JtRPrqPnWamu2td7v5TXPp5Wo4ddXkYNqzWmZ
r+b42VlT1k2NVWut4VNTp6zt1mRr8yK+x7MlctTvaQ45T2qAWqDneKyEBq6p
QvPUPjVP7VOzDi2heT/m7/+ijnfw3Gs/0E6r4p18l74l3kVvoqb5TmrG7TBT
8rOW6Bn1jmeaRs4t197IejI9PcFXGe9b0HehGlmFR9Frzsz3V9PeKBHzz1u7
G5ELatB15mojtMkaMD/n19qwWYl5VBtvTg26OudXbVIjroFHN0I7xuf86xE+
hi+po97r8fR6x5fwA3OMefqOqSPfxnPtpxLXzPOJea+eaEbG96ASc+BcfGfM
1OGh9FKjaAfU4Xn1vtZ0a/tNdXhZPe0GnD/MtY35/1Vcu7UOP6UfetTn0e4v
kRvmyOa0Z2n/bQrNU0+WqPnWyBLfw/d1LPqfva0TcFEjaPfU8Y6+62ra1+a/
NY7jpjxvUYmaYe2wHszhfF7Whzfhy+vwwC/leDbM+fypKdYMczL+Ts78Mh63
qOL51uhJOR99Uw+cL+d0avqj12gXOv7Uf8c/G76O/seNrzo8+VLOZ+X86Wmf
ruJ76HXNeXP/Lq7tQZtWR622Zl9QQkOvTb/Uo4o4stZaX26pYo3kWmmWOWUt
LRHrxrz63z3/3xgxVi7l+GEV65Xr6/B8IzN+N+DesVlvjRn1WY+nPo3l2rEl
1lTXVjHneuG9Ml46ZP24Bn4Hfpv2rnUh8/1/tPeq8Nzb5f8bO3r0v6VeWHtd
X7k+OjLjR4+n99CDLC9R86x91t8H6/ArapMa5Vru6RLaO5n/ubsOj7ks65Hf
YmjWS/NrQglPvj/cpxFefUDOl3r9XgnPtG0Vnksv5ZponSo8hF5iWOqXenYI
vLKENuhH9U/POMfNIqaNbTVSraw5LoWfy/rWnOP9xn4V3uUjntG1hGfWO+vB
9eJbeR/nf+FapzpqePeMn85qcxWxZwweXsJT6633gLeDt6xjbTcAnl7Cg3Wq
wtPqzVxzuPbwnX33bXxG+rUOdXisr5tizWo9vzrrm5775hIecbMq/ITexzWA
fmVfNYS2Ca2jz6JtUUf926UKD6oXVVNWZT06uUQOOZ7B8P75TVvlnL+cMbBV
FTXa2OhZItecQ+dSv+t6UX9n/bg+52eempPx4lh7Zz77Df2W5uQ7JTxey4w5
1zZd6fusKdbk+iHnwLlQk78o4SHXzt90reoawvV/y0asLVzzNs8519s431UV
aw779QsHV7GGcC2hh9++Cr3S279Q4j38ruqheqV/dA3pWlJPOzDn1/jUvwwu
sQ/h9+6a+eQaatsS86nX1C+tV8K/mXvmoHsVapRapYarP66BenLcvVmsjVzD
OJ8dUy/NAXNhTeb+eTkfk6qoZa4B7svxvUpfyzpqmzXOta1rvuZVeES94sCs
T35P59IYNBbH0f965qd6OQL+ED67Cu1fnvXYeHPfxX2ZJSX2cNzLMYfMJf3E
uVV4Pr2fHk+v147+TehvXUIX3UfRX7qm10+7hnSt3yvj0Zg6imPHEmtMfbf1
zDX9F01Rr5wfnzEuv3/rvN+5cw5dC4zOfHfNfGKJNeZFOV7zc34JbTLnzD01
WW2+EB5Th599ooo9EPXUNYm1yRr12xJ7Vifm/Kq1ap7a1y7rz+DUB/1s5xJ7
Qu5tuMexqsSex5TUI/XfNejWWa/URz3EqNTLHiX8xYG0P5XIh375vBnpN90D
HFDFGsC1gHtIC1KP+pf4352q8Ic+w7l0L00/4pwa0x0y/4313hnPrjf+U2LP
QK+n51tYov65z+i6+b4SfkFNUAv0D3Ozfq3I/PPayoynn++to3bqB29LDVfL
jeFOJTyH8aef+77EntaXTaEPS1Pj/5V69lzWhHtpK0rorZ6nypw5t4Rfss7/
vkT9c8/wiCr8nvm5AP4MXg3fU6LmldQ0tc1nP5D12d9w7O61uV70G7hH+WnG
83cl9lD1W3pE/ZFraOuR+vVWCT/4SRV7XMb/yBJzbwy4V3gD7Z9V7EEuLuHf
u3G+QxVrC+tTi9Q/x69f0BcsKFE/XCPrD6331o9bS3gxPZner02JtZtrONeD
+kv9u57z/nyGc+cc+mz1QH/jmlx/7Ts7VsfsWPxmxlLLKr6le35/r2IN/fNe
YB11a1kJ7+weya5V5Jz1yjGay+a0Y1+e796Uc+ea0Fwyp6y9xoy+1X1vY+ng
Ej7bvTP924NZb9xj+KDEnpV7V2/Dd5S4R683tBH/2y310Br9Pvxl6oP1T+85
OjVZLdaPWb8UV/c0hnH9/BLaqYbqPf8PXGCy4Q==
           "]], Polygon3DBox[CompressedData["
1:eJwtlnmUT2UYx6+Z372WGFvMjN0p6xgc01gyCiFlH1u2ZpBIDEIkyTo6wjDW
DlkyaMxIDCqVkmQOTohCtElkGXsZxPT5nvf54/O73/f7vvd33+V5nnurDxqV
mBLmed4c8OF7fi6Fe150yPMqQJ3A83biNSvkeXdoF4cqtDdDNrSlfw7eA/Ro
9CZ0JiyBQrRv4yejC+AhbMA7h1cfvRmyYRzeMbz7PDeX9n6YhjcfL5M5HaA9
GvrQfhd/CjoJvRSWwU3oizeGvtdgLGyEQr5b1BP0nee6ELZojbQT4G/ajzBu
N3oW11SYrf/AL8e4zvi14CztO/Aq+igcgXcYtwvvM8hAZ+FNQi9Hv4QeAheg
FO3L+M+g34CJ0BvvNF4JdAzUg7p4/WEGejrcYC+OMCYL8plLHt5FKM2YgTAS
PQL6wy3fPaM1ujAU0dkxZpCdzVD6YrXncAZK4YVxDYcPA7cHX+F9CV/AZNqT
4GX0P4yZBanwL7yCtxJWwDDGxMME9F36oqEC/AE18HpprdCKMcNhDXo1pINH
ezDjBsF42IjXDy8JXoT/8GbjJQfufPuhd8B27SNeUcjRfnKdRv90+AXKaA+4
FoFH6RsKJ/BOwlKLyQmwDb0V1oGvtcJk9FuwyOa3Cq6hr8I1zuOw7cEw2jMV
MzDAYjzJzkPn0hUvU3sLK2x/+muNsAHewwvwKqFHoNcrLyDD5jIycG35z+r5
jCuOtxf9HeyDt2lfwH8SnQjd4Gm8DnjPa0/RUXi/oecqbxS/eGuVS+g1pkPa
C9o50NLueRwdp7yBXtDOcvABe/Aj7b2wlnrQGK8nPKe40L7AYM1B+4UuD3e5
pw9eaZ0NLIJ0aITXjnF5vqs5lxnXiXZHaE7fOLyxUBEK6GuK18TueUpnqxzV
HPHm4s2D63ZG1QO3R9qrj5UPtBPwm0Njqx/30NehBzqw9WhdCXY2J5Wz0Ab2
wbfwkXKFvp91roo35W7g9lv73jBwuascjreak4NXQucHx/BKaHzg4ljx3Aou
0ReDl4IeBQ3hL7xTUBR9Ga4o7xhTH2KhgfLCasRFaEF/HF5VdDXVa2hq/9uA
vkZaO8RDMat5ynPVg9LoPfC14h+vhtWzwrpX61Kcqn4SBzvxFyvOfRd/zaxm
qHa8yfjVeKtgqu/yc7HFc3vFp52pznagxuDNoW8xegl8Cp8oNlVDlJs6i8DV
hpTAncE+y/OyeIfgoHKRviFWL2ag09AL4KHiHu9wyNV91f9kKIz+HG8XzLba
oRrSxXfvEdWXcFiOnhq43FEOZcA66AQv0LeMvjBYFnLvrFwbX0B/GjpfdVE1
z+pZqs33kM1TOf2N7bv2fwrtkoFb+xLlJ/d8AFegrWoxVCROq9PeErgap1p3
PuTeMyfQYehwiGCNLWhH69nESRS6NtSBnyynKtIXg64HN2xNVQMXN4qfrspn
xaJinv+LtJoQZzm2RfHiu/eWYvGo7+q56nonvI7Q2c5eNawW1IT7dvZ9Axfj
xbQ27r8NlfDex1sJEYHLsXSu85Tntt86l/lcWzKGW7yL/NyCkrTX+26umnM1
qEu7stWk1vZ8zaOK5XJlywnlRpatSfUiGzbrXaQ85P/O6b/gT4stxVgH29vj
6IkwAaLsvdlNsQRj0O3wemt/ob3qEP/XXc+G3333vqyJrgO1oQ3jH8OLVP1H
90D39N03Q4TVCNWKbvQlWn6rXnTXWNiKvqnah96PztXZo68y1zxoaTVHcbog
5L4/9B1STvGItwd+tefXCty32T3uO037DCzE6wJntR8wIOS+QfSNNFzvFK4+
bNJ3Bdfd8IPv3gWRgfv+i2XcKcUVpOEdxDsA+bZn2/DKw3j063Dcaqe+YfQt
08R3Na8s3g70digTuHWv5fo/cp5gBw==
           "]]}],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0L8rxGEcB/DPdSekUJxFqa+J3GbhrNIxKLcqxcJwEeXHYCK3G2RjIGaH
yepfMIjVID+2y03yekp9373e309PfZ6ebGWjup6LiGV5z0f44qYQ0ZC6/mkw
wZm2iCGWOCZTeoWDHOWIdOp9nOUiT1jnkfTrWTpv2S0bsmu2yS7+2vPIV3tf
pFvPc4473JZT/YHtbDmvRkf6l179i610Z35IUy+wh8P2vPGK11LUt7jHO95L
5m6HPDarscYLXsqzvsR5nvFcnvR9HnDVnul0B/f6lvSmP2aTqTiTkzV93Kxk
VGSZC6zKwP/7/wEe0yzL
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{73, 1289, 421, 1288, 1287, 218, 1253, 8, 1217, 1216, 159, 
        1015, 41, 1118, 65, 1133, 1132, 70, 1226, 169, 1068, 1067, 33, 1206, 
        145}], Line3DBox[{1299, 1229, 1362, 1556, 1501, 1668, 1303, 1360, 
        1608, 1317, 1662, 1548, 1663, 1418, 1220, 1455, 1059, 1433, 1616, 
        1524, 1702, 1467, 1701, 1369, 1422, 1578, 1499, 1617, 1329, 1624, 
        1389, 1388}], 
       Line3DBox[{1313, 1516, 1598, 1401, 1648, 1537, 1639, 1349, 1147, 1391, 
        1642, 1536, 1638, 1387, 1637, 1512, 1425, 1534, 1594, 1454, 1694, 
        1487, 1588, 1338, 1060, 1386, 1577, 1486, 1595, 1481, 1713, 1506, 
        1394}], Line3DBox[{1314, 1029, 1450, 1564, 1497, 1692, 1451, 1553, 
        1690, 1373, 1623, 1515, 1562, 1345, 1014, 1376, 1415, 1621, 1296, 
        1558, 1549, 1715, 1485, 1716, 1495, 1341, 1665, 1491, 1681, 1434, 
        1225, 1393}], 
       Line3DBox[{1320, 1304, 1611, 1423, 1667, 1532, 1630, 1364, 1607, 1502, 
        1473, 1708, 1544, 1569, 1331, 1316, 1653, 1354, 1580, 1550, 1436, 
        1247, 1680, 1367, 1606, 1528, 1482, 1619, 1509, 1579, 1336, 1567, 
        1357, 1443}], 
       Line3DBox[{1323, 1563, 1307, 1395, 1343, 1614, 1612, 1300, 1342, 1586, 
        1426, 1670, 1669, 1546, 1333, 1309, 1710, 1476, 1646, 1397, 1378, 
        1489, 1583, 1581, 1327, 1543, 1700, 1465, 1650, 1649, 1359, 1409, 
        1656, 1408, 1438}], 
       Line3DBox[{1350, 1058, 1407, 1655, 1541, 1644, 1344, 1295, 1571, 1416, 
        1659, 1511, 1599, 1351, 1083, 1398, 1153, 1468, 1703, 1510, 1584, 
        1462, 1310, 1603, 1358, 1576, 1514, 1610, 1363, 1146, 1404}], 
       Line3DBox[{1352, 1504, 1574, 1380, 1629, 1526, 1640, 1390, 1234, 1472, 
        1706, 1527, 1672, 1406, 1654, 1520, 1475, 1353, 1585, 1432, 1679, 
        1508, 1652, 1403, 1275, 1484, 1601, 1505, 1604, 1356, 1602, 1507, 
        1374}], Line3DBox[{1371, 1138, 1478, 1711, 1552, 1688, 1445, 1322, 
        1570, 1469, 1704, 1500, 1661, 1417, 1074, 1412, 1073, 1382, 1633, 
        1523, 1615, 1366, 1493, 1666, 1421, 1695, 1535, 1557, 1456, 1186, 
        1411}], Line3DBox[{1413, 1525, 1560, 1399, 1647, 1054, 1297, 1625, 
        1490, 1470, 1182, 1641, 1311, 1587, 1335, 1325, 1383, 1605, 1452, 
        1693, 1160, 1441, 1685, 1440, 1463, 1268, 1568, 1479, 1712, 1554, 
        1460}], Line3DBox[{1439, 1684, 1545, 1410, 1657, 1522, 1651, 1466, 
        1402, 1573, 1328, 1582, 1488, 1628, 1379, 1627, 1542, 1477, 1498, 
        1566, 1334, 1660, 1547, 1671, 1427, 1517, 1591, 1301, 1613, 1518, 
        1645, 1396, 1592, 1494, 1324}], 
       Line3DBox[{1444, 1687, 1521, 1337, 1330, 1618, 1620, 1483, 1714, 1370, 
        1368, 1246, 1683, 1437, 1682, 1435, 1355, 1503, 1600, 1332, 1405, 
        1707, 1709, 1474, 1575, 1315, 1365, 1631, 1632, 1381, 1424, 1492, 
        1561, 1321}], 
       Line3DBox[{1447, 1308, 1596, 1348, 1572, 1052, 1449, 1372, 1589, 1306, 
        1097, 1636, 1385, 1519, 1565, 1319, 1626, 1377, 1429, 1597, 1140, 
        1340, 1530, 1675, 1431, 1677, 1678, 1539, 1420, 1392, 1696, 1459}], 
       Line3DBox[{1458, 1540, 1643, 1419, 1664, 1538, 1676, 1430, 1375, 1590, 
        1339, 1673, 1139, 1428, 1674, 1531, 1318, 1346, 1635, 1384, 1098, 
        1593, 1305, 1529, 1691, 1448, 1622, 1051, 1347, 1496, 1689, 1446}], 
       Line3DBox[{1461, 1697, 1457, 1480, 1267, 1698, 1464, 1699, 1551, 1442, 
        1686, 1161, 1453, 1533, 1634, 1326, 1555, 1513, 1312, 1181, 1705, 
        1471, 1559, 1302, 1298, 1609, 1055, 1400, 1361, 1658, 1414}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1001, 1011, 1571, 1080, 1591, 1094, 1586, 1178, 1234, 1079, 
        1575, 1047, 1607, 1122, 1608, 1123, 1253, 1056, 1570, 1057, 1559, 
        1017, 1625, 1103, 1147, 1238, 1675, 1150, 1590, 1294, 1716, 1026, 
        1027}], Line3DBox[{1004, 1058, 1024, 1592, 1023, 1563, 1107, 1053, 
        1574, 1121, 1561, 1020, 1611, 1025, 1229, 1289, 1138, 1209, 1658, 
        1126, 1560, 1104, 1598, 1093, 1269, 1696, 1185, 1643, 1177, 1225, 
        1022}], Line3DBox[{1006, 1576, 1089, 1205, 1115, 1651, 1650, 1065, 
        1062, 1601, 1111, 1620, 1619, 1072, 1135, 1038, 1578, 1068, 1168, 
        1695, 1273, 1698, 1268, 1101, 1003, 1577, 1050, 1052, 1622, 1013, 
        1034, 1692, 1260}], 
       Line3DBox[{1016, 1014, 1151, 1635, 1099, 1565, 1231, 1163, 1594, 1086, 
        1605, 1162, 1634, 1208, 1073, 1118, 1059, 1264, 1580, 1245, 1682, 
        1039, 1585, 1109, 1078, 1646, 1191, 1627, 1046, 1153, 1075}], 
       Line3DBox[{1028, 1029, 1256, 1689, 1030, 1596, 1102, 1063, 1713, 1290, 
        1712, 1266, 1697, 1270, 1186, 1206, 1172, 1624, 1044, 1567, 1112, 
        1687, 1252, 1066, 1602, 1087, 1656, 1203, 1684, 1248, 1146, 1127}], 
       Line3DBox[{1031, 1090, 1623, 1144, 1593, 1097, 1164, 1588, 1007, 1262, 
        1160, 1686, 1250, 1615, 1116, 1132, 1119, 1702, 1278, 1680, 1246, 
        1241, 1069, 1652, 1196, 1581, 1582, 1009, 1154, 1584, 1076, 1280}], 
       Line3DBox[{1045, 1083, 1192, 1566, 1035, 1710, 1286, 1108, 1654, 1198, 
        1600, 1048, 1653, 1265, 1220, 1015, 1074, 1207, 1555, 1085, 1587, 
        1169, 1637, 1084, 1230, 1626, 1152, 1674, 1237, 1621, 1210, 1211}], 
       Line3DBox[{44, 1398, 126, 1477, 1476, 417, 1475, 60, 1355, 1354, 275, 
        1455, 41, 1412, 148, 1326, 1325, 48, 1425, 175, 1319, 1318, 92, 1376, 
        7}], Line3DBox[{1106, 1082, 1659, 1213, 1215, 1671, 1670, 1233, 1131, 
        1706, 1285, 1709, 1708, 1200, 1222, 1219, 1662, 1217, 1041, 1704, 
        1283, 1705, 1182, 1184, 1642, 1171, 1149, 1140, 1673, 1293, 1715, 
        1236, 1142}], 
       Line3DBox[{1141, 1558, 1235, 1292, 1139, 1597, 1148, 1638, 1170, 1183, 
        1641, 1181, 1282, 1040, 1661, 1216, 1218, 1663, 1221, 1569, 1199, 
        1707, 1284, 1130, 1672, 1232, 1669, 1214, 1660, 1212, 1081, 1599, 
        1105}], Line3DBox[{1202, 1655, 1188, 1190, 1645, 1096, 1614, 1180, 
        1129, 1629, 1157, 1632, 1159, 1667, 1228, 1043, 1556, 1288, 1711, 
        1255, 1125, 1055, 1647, 1194, 1648, 1174, 1240, 1678, 1176, 1664, 
        1224, 1019, 1681, 1244}], 
       Line3DBox[{1243, 1018, 1665, 1223, 1175, 1676, 1677, 1239, 1639, 1173, 
        1193, 1054, 1609, 1124, 1688, 1254, 1287, 1042, 1668, 1227, 1158, 
        1630, 1631, 1156, 1128, 1640, 1179, 1612, 1613, 1095, 1189, 1644, 
        1187, 1201}], 
       Line3DBox[{1259, 1033, 1564, 1012, 1051, 1572, 1049, 1002, 1595, 1100, 
        1568, 1267, 1272, 1167, 1557, 1067, 1037, 1617, 1134, 1579, 1071, 
        1618, 1110, 1061, 1604, 1064, 1649, 1114, 1657, 1204, 1610, 1088, 
        1005}], Line3DBox[{1261, 1257, 1690, 1258, 1691, 1143, 1589, 1092, 
        1060, 1166, 1685, 1249, 1699, 1274, 1666, 1021, 1226, 1136, 1701, 
        1277, 1606, 1137, 1714, 1291, 1275, 1276, 1700, 1195, 1573, 1113, 
        1603, 1036, 1271}], 
       Line3DBox[{1281, 1703, 1077, 1155, 1628, 1010, 1583, 1197, 1070, 1679, 
        1242, 1683, 1247, 1279, 1120, 1616, 1133, 1633, 1117, 1251, 1161, 
        1693, 1263, 1694, 1008, 1165, 1636, 1098, 1145, 1091, 1562, 
        1032}]}, {}, {}}},
    VertexNormals->CompressedData["
1:eJztnXk4lOv7wElJFIoo0WJLciIlpaOn0ialEDnoiLR9U2QLRylLlI49lUqS
6iSSyCktt7VIZWnMmLENMsymUhIqP9f1Nf1x/N6LydjO9/38c1/XPa9nuZ/n
vp/lvcfMsXUw3j2Gj48vTZCPT6Bbyi0KXXvTow56JPqH7Ev/z897Pd9+8tJB
na8s2PJxj1fnxpdg9OmYfrM8CfFhMMB6+2wP1vP9bA+v6u1TX/WHj8KKDCZc
rwedshACrIut1etwLh9oO3/aDsNVL6/s38/yef78YJfzd/oZwZs1TJCFqa+u
hxFQtuPkNU152P6FxZKP1pdezmbBI+Xl5t7pBOS4way0Yx8RTZK/tF5Iig32
DkHhi66VwHT+zbcaxhGQ1Gch80miLHBdb+L9RL4MSsrYt5psiJj1qrhB5QoP
JrD3Pw2oOU9ApZ8KF0UGkQfqL4Ptj32Wj9XfqsAvt/c0McF37S+2kYpEjsQs
Z4Uo3+rxE1jAXvF0g0s0AcVKaFZpfMG2Jxa8ij+DHW955Xe8Gq/higOjBV6t
F1gc92jm/0uAARXXJslWHH6DND7c9v2zsIZn5Q/2eI2W9cjx8uNJmeZ0MDsx
qyTvSgVHct1OXsEr/x3senm1n+EVaefMZwQLsIBoVazI0i1D+Y3vt6Z5Ya8v
/bRDn+sCVjnjleafXf2xCQjPhZ21zCo5kut93UDtMlLhlZ2xqHk3PYekzoTH
uoYBwdUkxJHc2vngJ/fp6z/Q4VthUNv6XU/Bnj9qhqv58M1zbiHEh8sa19DB
z1xJ7N5VCkditrOx8dUWhSnN4Lpqsp6kSiFYLHVO4VctGTX9HeB6wfN+rVCb
6PhkNgP+KymII3lV/mAzXOO+z9Q33y6WBn+F7XuiwkflSJ6dx/v5/E/Hn9Hi
L7xitOz/h2v/+b82H7AYLfNktDPY+yv8fgBnJJDgQS85GsmEFzPy9aU+EhFH
Dne7/sloWRdwP8UZCPj8+TlGi91GSztx/su/dbxG2j3PaAe3Dw4Ozpfyy8uj
85mQQhZkdDkTEUfyqnw8zuAMhH/rfgYHBwcHBwcHBwcH53+H0XKuwc/vODg4
ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4OIPBAP9fZZ//l2OA
5Qy2nuft3HhJoHXeSRY8eJ6R5qyQAw5xF8ODbbH/P2o/28Mr/XDVy6t2Drt+
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
uu7JyQYo07PUF3tK5Uh0Y9Y9c1PFBpi5Q0XM8CuVI1H8Hv8CU4MGKJ1qUlXw
mIrmUaTELwsPOA+nz3nlaS2foDiHDVIp58K06alA8quLPNH7frLP8s+6f1mU
tYkG2rdTrK1PVsO4/W4ORQoj5v37j+cXt5Nowje67Ry9V3DhGirSapMEmUm1
6LztPH/R52wwpK6ff2H/PaC/Dd9yoIP7eFL6rvHb1nwGfI6JaT9cTAJlMH+h
mMz9+WuI4y3P42Sajdixg/408Ffcv2xbeQ2y2pjs/XTZ4L9n1+95v3+45/2+
yf//fv/H383MOzk7YisLjGefKp0amQ3J460q/zCtHGr79+1fPMozvPL6xe/N
RgyY4KogppVIBDXXNseVnr36++PvLnW4GyQpMCBWJ/Ht7jQyTPBs/89zbwp6
lTTt+uG/WWBY5Kp8/HIWhMS6nTtJGLT3Gryyw3DFn8Gud8j0K58seV8RyICx
dc7uCd+SoZmubq7ybPC/73DF5yU/Q4sN5XXiL3S1bJDolSxDGXlKf793Nuzj
FZZqcdNEjwbPBB6b/Fldg4jZk9nfQ6lcf38kzVe5cOoqNpzSuBUbW3MTxsrX
a7C79+cWqVGTlQTooB3wPn+9SAV8qhIXK7Xi/rwTqCv3RFKjCd4k2c4+YFMF
G40asjZQqwaa79qnvjigPv7oCRrsiF8wK0mEinzeCadMnT3g/STP57/gw8y4
YptmaBcS50tsOwapEburlkkRUP2YBzWTk9kgyg6Yeig5FQxlFxo+sOv3ffVP
+wVWPqeho2qh2zEGvNYia/hCObzT03IS6iIjT/uQlaYxdJhzNUi+jkyGhABN
a5FtlWhDTx4mpScPs0ei4pxSXW1LBjDWqyX/8akcTMXnVkhYDjh/4Kf9ESvv
0awn71G1J++xoSfvEUvfYs9evqWoCc6tmNHYsbYSlFcFJBrWVyL7nvwcsZ78
nB6JdEpD/SLMmRDVcltz8/cs0EsTbNjZ1et8NNLi/4/P+7kv4rm/DHDch6s9
//r2Y+XdYemx8u4yevL0Snvy9Er7yNPD0ndWBt94Pq4ZzEuulEbL3oQpcx/w
p7f2O3/vp+2A5e9Y9f4f4+hWQQ==
     "]], {}, {{}, {}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{420.26800000049036`, 368.0224990546394},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-1.3448604222369942`, 1.9607950364528555`, 2.407619834966144},
  ViewVertical->{0.40244710051214655`, -0.586764443410767, 
   0.7026690680812834}]], "Output",
 CellChangeTimes->{3.8770612319583883`*^9},
 CellLabel->"Out[114]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJy8vQmQZVd1LXj/nd57OQ81l6oqM2suzRJIgMBOkFwMFjbfEtgyCBfGyGAz
y/CNG5xmEpMwNmBwYUSK0QwShhQSEiClJgoNxVAqgVSAKCSo7uj4FR0d3fHj
d3R09Ouzp3P2OXffl1nwozPiZeab771nD2uvPZznv+xvXvmK17zsb1718pfN
PPuNL3v9K1/18qtn9r/uje6h4j9lWX5ulv2n/zqTle7/fpbZv87PslN44AX4
b7nA9+F23N1+oV7yh/hvPc9PzdBT2aK7LbvbY42XFgv8NP7k9FhfvTX7WfM9
8FEHkvcc148Z7zn+/9N7rGOD5+db35MvhlfOZHTh8GcDPbbY/MRKXidrgJ/+
LfXJtFYV/L/Az8Pr8EpvxOeGoiPN6IrL6zN+T9/82HKGX7bMfzfhw3X6ifKt
BZ1IdOluVZ/6Wvvt8g34drxKtzXeVKZvwtf9j3rHS+nAZ0ZHRxfOP/98uGVD
+FgllyDjg8RP5FW0ZHpZvT46+ZfQyct3HL/iiiuWL7300v5VV10F9+nrUOmO
8+2A/9TOAfkU/pnh+/NZciYvxn+7B3bt2gXfsDg/Pw/fOL9x40b4NngM/qdv
K+b5bXhSdGmW/RNyKJFgXEGHCZ+pP0/E1T0sD8GJwX2+kMWBTClHEV9AvGDf
Vl/zx+Fr4OLIRSrjr4E78DAcSfYD9fYXxm+H18LfHF5Y0WfAR8rRwMNwpbLv
q8+4nD4jvZKyzO4tcJbqbGr5SH3U8JrD6lP/yL5+dGIogPIu/tSOnLucRPSa
B9VHvyB8tH59Bx/uwsvlmsEPnBd8THJe0cseUJ/+B/an8+LKKuBK5PgBeDLy
bSTHeP31hz6fPlS+FJ6Gdw3T9ZQzxaXhZYKXVsYS3Kc+9ffDocJb4ZPhbMdo
4fVh+Y+ojOuvP/K59tnTR3ZmMhJheOkyfzR8M3xrVhsX9nvqo58dDkuuoixz
NsZrl7EXWHjNRL//09n+/AX4mHxHJ14EvHdIfcX+cPRa6Mb4YTn6mc1lf/mz
G3P4iqzsH1/egifEX9INVx3tI/x8V33JJfYlGufTV6fglA++ocDTEXPbNVZA
f/yzBn184xw6/A1Xv+qiRTnYrrEQ96pveCZ9VKrw1gn0+OMPffWi/jxLZ89Y
hHvUx/+uvQjjvPzJCfT7x2ajrznw4kvQGA8Zy3C3+ppn2NdpIj2LV0+4JXZf
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
FJ+1iHOCa0mcK6onfo+qJ1b1mCLOl+JEoZZyt1GewCXhWQID1iZpeC6Ga2mj
k/nhzSalupEnYMsshZiqwo2xbtfPJWEcgOLr05ss3aiHCDmGbKnu9FuTTFE9
RyTVnYj5AoSg+f6Z+O0Y3D3TgAsLfznuLvSPtuYg14U31gBtD+1BaM4t12VD
nJEIc8iBSAhhbctgokOoxmWbgZzV6DZUwsvI+9zYXqHyEq1MM+zJGoRZ5xnE
Gud+xlKpojQly6cQpcFO437v+UPbI3irozShx9rhbeXtrqobAaPaSN/nodmu
jHZ8UtWbq21iQjmUck010NVKZZQG8WCNrkPr3rItg6rZTFNZEeo9T4t1LSRD
Ok96Lki0B8ZUnFxHNnr//L7+wbc7M/hDkGeWbARqDgjfG2TaWessIOWSaWAZ
9ulZilSoC6kCDQ0hpkSX2h6TPDnx7uiip8a2sMEk5zJDhQEGo2CZIxFL8yDO
wSz/xCrk96oqZKP8s/QizSWgFiQeUtIsFhmF6g6knRqkWpG25CmYMW7A4YH9
TGWaJ1vPEqlAts/MdXzwpolgmWjcFVlOdrfWnU2aPrNyD+cqKbb6OHbE8otW
+ulBfoNFvspdie9v7Z/4NkT+fwq1Yj/cijYajPK9u13M4nDz1S6S++SzAgRB
IS6YlQDXsvD60yWDHuS40MZZVZfGmbMijJStfcEyGhiHl9kmD/kyepZ03tbR
A+ggy6Xq2pMav5xnGUsytwyVzFqQbcQMZxgGyK6iPZ/MMzIQIGuNGC9AjULE
9MiML6rPW6pL4Xk21VBN0ChByO2+vSkDTre0PXUMA1+EtpHSy3DCQuikrlWu
ZW05efCdvntED/dR4NpL8jmZEuhSwDU8Df/v8QogW25lzJ4duHS4f3xpYwHi
DW77B1v7B//BRWT7z+kf/uL2/sm7lWy7v2C2AyJBKe9g+Ah0/qw7aPe2G3fE
ibsy1M4gpNZFq0WrlFe+tQmzuYREMtwfULbw1rxboCgUn8bCXktndWy0owmk
unCaoHQvlXO/G4IvmP0FGvKWpEdlxIU2/qiTpDBzwYWPF8lsdzX/hpIuDIcu
crXKpAf2P8XWvQqdJnXKwAltISINKTpEoreeG+EQlfh4OKqUJu65DOU2cZ7O
gteRXMc1/Pu8UFNWxA9Z689sdLbrFU51HtwCF/zwlhzFu0Lxvu0TZ9AG2iDS
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
+SjZ0sY8NGFa8/y28KnP/d5CwlFfGD96R5BTD6TiOoedXsLXCk5mBH5An26Y
n0Pye/h54t94zTduCBV87L3Pq/+DdrYeOVvPGEpgXnA6fRwdgcytN9/qsEd+
HEoTYGn3nKV8TgBnfpYWsOHPWufY5SPCtchJD3ofcexQIu/MHz/demgeSdB5
BRx/yPTeI3N/i57K2xwGeakhEnTrPHmWj7TzVAb7nKahp5GzdMYsjYz06OyU
TwlLo/K2Pe/s2vjc4g+niFAqdS/+ymGUlzo0Mu8f/Lj3NDsPbs5ZOvCXLkz5
iNmDW2Yom12Rqfc/iQ7f/B16Em9XvnlZRg13vWo5+VDmiOfMnYqs7PlQi87S
2l866flQ2bJVlp5CNG969rblmC9ITz9hmFTZiBH8nGGa01ejsucjLTlHWvuE
Ih8pmon0kbJlq8wJ5CNZ4YtUEUDxYaT0v14Febbbtu3p7mdNzpcqvYp3ONzQ
O+nK/6wr/AEMQvVMDEGsZR/AvESAXsAP0OgHV9b4noNgu+uHM8T7/Ol8jYYJ
Fe90+Bp9viE8oajyfNg89d+4DN54je8p/Kg3jB/7uSdAVupr4Xd9DTBJfzdM
/g4PNryFrA2/L0/7WH4TBipLKN7lcKfL+M94l71Txxb1CdPNtsnNwmfEA3vu
CXm+9uXwvcTLlb3lYtlfWvNSuCxPSE40+3hwg8Vzpx8dCfHiPcp6LudDNAfG
T7nNDw2fcviO6tiEbzdbI7erRKu32/lkA3NZdaD3HJzly+eeE7SxNeUtz50i
WchIKd7r8BY6O2OIrAXMvXJ52XnvcMuNcy4L/tKeu59xiJcfDXD0D1v1BnYf
GUo1upb5tB3pQY6R4nqHu3iH2fP0h+ag+CaLWX/pTHbfcKYjs9SoCnMZtcKu
rQ/G348fsaNdUyCiuMFhMJc7Bxp2nvFvfdY50KG/dN7cuvHg6FI4RVYBlnip
XIJdy30/ZUdMUIC8uNFhOVfw4dqDHPmIm3cQ1xgqzJYXS84jKf1HsoKXB/bg
8bOFZ6785jnT+Q1lNRU3Kb+5Iju/QPTwzBofZUs+ykp/9QrzLfMo7MdZ57+6
9syyNI7c0U+QHJFGvSgcXtzscBY+opin8OTZvue4yvcFl6bcl7zMvGGtyxrO
xNvN40xIURTpLG5xWMMVfE72uTv3IJTOMaZ1poBc3sqtAvFMfMr/3e5jVYZN
kbDi/Q6+rzSPFa5f/weridSHd0ZPZPhuH3O4k4n/9KsM2MCTFve95w7bpXBI
8QEHrXzP9tkWK/wO1hgNP1cGrSLOF/37HjhAnU0lvxWQbFX4DJX61BUfUhie
Mo+ZZWJyH4bbeUww3Mus4TG5pBs5PGnM24R3gncUSWfuusMgydta3Oqgzzxy
shl+ZlTM+c9xPOVmMvE1m5EKyICBD8NnTed75A4szjtI9B79yL/1OZ/99Yil
RYdgKp/QnzUFnOTTKm5zwMm3ftryPHk+ImfgPsON2ZuRp175n3JimIxQUXa/
csNuWQX5V4oPO8ikGzbdk+h5V85zDU8L7zm8dhvezbuVBvBnc8PAkG4TGJ5+
1DFgVArD304fbQLDt9Od3q4wpIqQQXygT5rtvNk6vlmNv4uBF9as8eVMczRv
33lQ76C3v8PBk3lQyMLg1F/41KP03q0+DKS0lx81CoLeQ0CgnNYzpnCid9M9
fNQBxlV8zTyMQt4heyiluawH+CY4QL2f8NfO/XRSq8loKD7mUPtV2TNhVXPR
v6UWL1dwG0rwc/79kF+wl3eQ2lt83KHnh/HR2Uc0x8Ro7wcZ8bux50bynJh2
xnw5s7Ge3n1OyhVuopv6hJLuw7Knw4rc2LyjctY3AWe9LWcHA5+CzV10KJg0
m+KTDgV7j2ZgbkYZ5cuPLvDNmKcCXiTvqK6ZQsofpJv5lEPKfDP24eg7ZHQz
YX6jXDvQT3YT9i46QpKkI75NTsBX47VB5HzXLveysltegrXr4N5S3f5p0+mU
JETxaYdOr+YbLlg8B3VbaXItI77wjjv6Zn7y2e30Tp9V4ns4HzZWPNAnK1Z8
cvqN9EPkuVnEiIq/cSjqan6khdExlnwy+Y0pyLmT3uFzDpnIxzAH1MczzDt0
UEFwKD7vkMDD42dQVIyN9IJ3sObcr02hdzro4gvOedPbZG6Wa5cH6VHLkZg3
6ZDzZ+lNvqRH/WPOJ6i7R32mkLFdvfRKJ1B82Tlquv/YQwbv/0+W93b/KjmE
M1OO+Yu0+1ecY6aPUN/F84az3dzYOt1k8dX+I8Xd53hu2a/4N4bHdoG2uuAc
29Vxqx3Z6ilTCO0e2uoePZyHORs8aQoJ3Ucb3OscAeuWyRy/J04hlK/Tkq85
z/tKZ6snTKeNb9Cq+5znfYWz2z+fQgjfpiX3O8/7cmerX5jyvL9LSx7Q531p
3BQW4m8/n95L8rx/QBt8w3neJ52tHj/lee/SVt90nvcJZ6t/Mv15/y3t9i3n
eR93dvtH6Y0lnvt/Q1t923nex5ytHjP9xv4t7fZdfeRSDBxuUWdO/vSU4/93
tMH3nEe+42x1esrx/8+01fedR77tbPVTcasO8P4DbfUD53lvOVv95BRC+I+0
1Q+d53043qmOdf3x6c/7P9FuP9LnfcjZ41Hd21Hd4P+gDf7Wed4HnK0eSVu5
7rP/i7b675znvels9XCfCvB5/7+01X/vPG/sJ1jCqqvjBp2z/8+0wb9xnvK6
bnBqyonv0Qb/Vh/smv7ZFVNOF/+MpzL9D84zXdFdLp1+sLhRTRv9j84TndC1
ZJz5Cf+J4uu434D2+3fOY1129iP8+14D3G9E+/1PzlNecvbbSe+v+7y5l/e/
14e+6Oyytd/jn6dd/hfn8dNLOOVIB8Mf3I8KuLnwf3BOYc7Zb9O/v3gKdHTF
/+qcwqyz39pFEMoqbfkfnYOYcbZc2Y9QuGnnf9KDGDu7LMddfPIgBlL8b85B
0PyGVPNZ2O8guIvh/+4cxMDZb24/QiEpwCwwPYjW2W98EQdB3RaK/9M5iMbZ
cpjeYmK14X4kzYv/Ww+CWEKqAzXpjeU2Gm5E2Cn+H+csvBHQVffZpRTCXZCI
UTfJWYR/uJfZw6cPYqTF/4f/j+zzlxFkPh1wI5j/HD+2jC2z74FLr+bP8/f+
f+O9H68=\
\>", "ImageResolution" -> \
96.],ExpressionUUID->"166744b2-6ca1-4ecc-bab4-cceec2f30c4c"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dataT", "=", 
   RowBox[{"Batch", "@", "1000"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dataV", "=", 
   RowBox[{"Batch", "@", "100"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.877061344062233*^9, 3.87706134406323*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"7761abb5-d0e6-4ce0-b1f6-ab6bbf510a43"],

Cell["\:533a\:522b\:ff1aramp", "Text",
 CellChangeTimes->{{3.8770613695170994`*^9, 
  3.8770613757568645`*^9}},ExpressionUUID->"55d627b8-4491-4638-b10d-\
f6389100071d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Ramp", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877061387727665*^9, 3.877061387727665*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"9f0e26fc-0568-4439-8800-619c754fd604"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQrWcv9ur////7GaAg/6dyx89fCP6GzYZqn78i+EYa
vknPXiP45oItt85cR/AdHn88NXM9gh/Ufna1cTyCX36+JTd93z84/8oV7lcH
E//C+bIH8kXMZf7A+Vuzj7Dy3/0F5yf0GH642fQTzv8xqbpjv/0POH8x3z3J
GQ+/wflzvAyLLnd+hfObchIrND2/wPnVzKvKi95+gvMTG86rXFvxEc6fuvfp
jDlZH+D8Xfc1eNYovYPzlQUcnELmvYbzN2l1ZD16/ALOv390o4KZ2TM4/6nO
VKP92x7D+YJ1K830GB/C+Tpm73WWfr4D5ze7vL2ws+I6nC8asm5CpPglhH3f
jvKfUDkF5y+9/bT3Zcs+OD82UGbL7eQlcP6bz18tS48shvNrpp3fz6eK4M+5
3XTa8dlCOH/L6UtH/S/Og/PXf8lRfnFrCpxvyaq//MHTEDgfAI70s8g=
       "]], LineBox[CompressedData["
1:eJxTTMoPSmViYGCwAmIQbcmqv/zB0xB7GF092e1UtkkBnP5XVzl7vn4pnG7I
WpNzWasKTh9W6GyfK9AEp9PTtdK2/ZsEp3dyVV89VLoYTi/QFb28XmkJnG4L
WH9hznkEHTLt8ekyzWVw+oOizyGtuyvgtJql7PpJLuvg9MnN8S4bO7fAadNH
jHKNEfvhtPKH3T+tDp2E056Lb571i7gEp119hZi/br0Op/vjrzcYbL8Dp4/7
yfIGCD2E028VResuzXoMp0tLtBP7xZ7B6et3BILSTryA0wmVNs/ZfV7D6cPa
5l2HWd/BaTXOPS+WeHyA07J7sl1ZOz7CaYZfTCuLHn2C098D98YdVf0Cp2+b
xEurtnyF0wXhAoJKd77BackpTyJYZH/A6XXRC5Z/rvgJp8Nt6z1O7P0FpzfG
5SpZ/fkNp39wOTPvDP0Lp4MuWpvJzvgHp7msuQ/umYugDy655R2zGEEbVFQm
zl6HoPnkt/dIHkXQJ3OMHot+QtAOHJoT+Hz+w+kfhT+k1gUi6PW3jy/1DUfQ
cuvTdvckIeg/oUuecVUi6O2L5W3ZlyHoPN73x5etRtBq5fuC3DYi6ClesRmt
exB00cdZk5kvI2it6Cy5xTcQ9MMjliud7iHogBk39jW+RNAcTCs8Fd8j6P3Z
5VcOfEHQZVfd4hN+IWg9e7FX//8jaABWI8/3
       "]]},
     Annotation[#, "Charting`Private`Tag$835007#1"]& ], {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{181.5, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2, 2}, {0., 1.999999918367347}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.877061388725318*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"6df8d272-863e-4bfc-8569-145b59892cdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net1", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "12", "}"}], "]"}], ",", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "12", "}"}], "]"}], ",", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "1", "}"}], "]"}], ",", 
       RowBox[{"FlattenLayer", "[", "]"}]}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "2", "}"}]}], ",", 
     RowBox[{"\"\<Output\>\"", "->", "\"\<Scalar\>\""}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.877061345840963*^9, 3.877061345840963*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"a4074ca5-49c1-434e-8223-4f5709262785"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{12, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{12}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{12, 12}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{12}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 12}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877061381514842*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"3f8225ae-ecbf-4a9f-9708-a1514c6cf8a0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "12", "}"}], "]"}], ",", "Ramp", ",", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "12", "}"}], "]"}], ",", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "1", "}"}], "]"}], ",", 
       RowBox[{"FlattenLayer", "[", "]"}]}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "2", "}"}]}], ",", 
     RowBox[{"\"\<Output\>\"", "->", "\"\<Scalar\>\""}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8770613492543173`*^9, 3.8770613492553205`*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"e2b86dd7-b510-4cba-9673-ba27a6228c43"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{12, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{12}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{12, 12}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{12}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 12}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770613825592594`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"eb4cbb8f-499c-409c-9465-878897809c78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"netT1", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net1", ",", "dataT", ",", "All", ",", 
     RowBox[{"ValidationSet", "->", "dataV"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"netT1", "[", "\"\<LossPlot\>\"", "]"}], "\n", 
 RowBox[{"netT1", "[", "\"\<RoundMeasurements\>\"", "]"}], "\n", 
 RowBox[{"netF1", "=", 
  RowBox[{"netT1", "[", "\"\<TrainedNet\>\"", "]"}]}]}], "Input",
 CellChangeTimes->{{3.8770614045433893`*^9, 3.8770614045433893`*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"924f4d72-10a7-48d2-a16a-ab9143ec5b19"],

Cell[BoxData[
 TemplateBox[{
   GridBox[{{"", 
      ItemBox["\"rounds\"", DefaultBaseStyle -> "LabeledLabel"]}, {
      RotationBox[
       ItemBox["\"loss\"", DefaultBaseStyle -> "LabeledLabel"], BoxRotation -> 
       1.5708], 
      GraphicsBox[{
        AbsoluteThickness[1.25], {{
          Hue[0.083, 1., 1.], 
          LineBox[CompressedData["
1:eJw9WHlczekXTkjIUElkSYOMpaJlDKIna7ZCIZNK6m7ti0qb0r6v91a35ZZB
ItJkLUyyhGyNsqus1dh+xhWS5Xe+M/Pe/ulzPu95zznvWZ7nfK/eFp+1PGUl
JaXpfZSUuP/sr73K6fywJ90WB39rsNpxcjTsNz/k35jM5GngaY+QNhx5b6H8
Wfyh9KopPiem3mizfv/f+Vzcqt5XcqpXbnFgUvi1GessIXK7advvmPw//UWw
99PQ3Zkpt9hw/aCu+iIrfNr5Okc3UP7f/RW4ckmlPc5LbtE3uN3vb2MbnExr
Xb3TndlbA73Ot0NtRHKLOxmqT7qG2eLjw8dJM72ZfTvov3W75ED6Bm56gzcm
rsfXRjv1CBHzZw/9bPOzYz3kFtG/zDG9/H0jlvhb7tN0Z/4dcNrI8lK7UG5x
V83WcXawI8KslvFsPVg8zvDx2OS/heS8t2bn7II3wydzuFaqL4vPBQ/lTgaZ
dH7217N31Ey2IPeUkfbv3ixeV/R/sKnqo4/c4tV561fn37jifkjjxV2eLH43
3DVNWHOcJ7fQNnqgFLGfB2fZwKtyb/YePkp1N/zz/gVSgZYZXwCr131+0xCy
9wkR/qK1aTvJXn3fT3mtJ8LjH/rJnD3Ze0VYdvFjeyzdz/eKmr+n1R1Hh/0v
296Tvd8DwnHRI9ooHxS9raPUE46VvrwgRT680NJ12bCE7r+2pADWeWNefUar
piI/PhDm5zqtJntqtzX+4Kv6Yn74TfPHApYvXwQ3n1rsQvfpNZcWdPii+MGS
uQneLH9+WO6bkRpI/mah5Oa4837IDwrr3Cxk+fTH3D3fN4HklYHPH37e6Y+Z
Wt7CcAHLbwD6C4/efecvt9iyf1rn7cgATFad8TmVz/IdgDHdh/v+SP65cKsd
tyJ63LiRBT4s/1vx7cjZ2wPpPanDT/Smzw3E2coP4cpCVo9AnK6+qzKB7P22
7Ft/j1FBEPFehM/0ZPUJQt0VFfsXJB/fvmjY0o9BaHjt4T/Fg9UrGN2LO1td
6Pza4WSdCbeCYaMRo6auqN82dA63ll4l/SddTRO/V2+DSdmoqkhvVs8Q+PsY
9fpT/B/HUkSZIXC0OWK0W8DqGwLtUae17Ul/CJXruHcoxpXl/NEjZPUORcGA
qPFl5P/HxF0Lc1aGIXNozvQBIlb/MNQmrn5kRPq/nP5rlc/UcNyPW3PX35P1
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

           "]]}, {}}, {{
          Hue[0.59, 0.7, 0.75], 
          LineBox[CompressedData["
1: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
qslFSJ85Z1sZ4e3/nj3jUA==
           "]]}, {}}}, Prolog -> {{
          InsetBox[
           FormBox["500", TraditionalForm], 
           Offset[{-2, -2}, {500., 1.811}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["1000", TraditionalForm], 
           Offset[{-2, -2}, {1000., 1.811}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["1500", TraditionalForm], 
           Offset[{-2, -2}, {1500., 1.811}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["2000", TraditionalForm], 
           Offset[{-2, -2}, {2000., 1.811}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["2500", TraditionalForm], 
           Offset[{-2, -2}, {2500., 1.811}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["3000", TraditionalForm], 
           Offset[{-2, -2}, {3000., 1.811}], 
           ImageScaled[{1., 1.}]]}, {
          InsetBox[
           FormBox["\"10\"", TraditionalForm], 
           Offset[{3, 0}, {0, 1.}], 
           ImageScaled[{0, 0.}]]}}, 
       PlotRange -> {{0, 2073.03125}, {0.6890000000000001, 1.811}}, 
       ImageSize -> {302, 182.}, 
       GridLines -> {{500., 1000., 1500., 2000., 2500., 3000.}, {{0., 
           GrayLevel[0.3001]}, {1., 
           GrayLevel[0.3001]}, {0.30102999566398114`, 
           GrayLevel[0.8501]}, {0.47712125471966244`, 
           GrayLevel[0.8501]}, {0.6020599913279623, 
           GrayLevel[0.8501]}, {0.6989700043360187, 
           GrayLevel[0.8501]}, {0.7781512503836435, 
           GrayLevel[0.8501]}, {0.8450980400142567, 
           GrayLevel[0.8501]}, {0.9030899869919434, 
           GrayLevel[0.8501]}, {0.9542425094393249, 
           GrayLevel[0.8501]}, {1.301029995663981, 
           GrayLevel[0.8501]}, {1.4771212547196624`, 
           GrayLevel[0.8501]}, {1.6020599913279623`, 
           GrayLevel[0.8501]}, {1.6989700043360185`, 
           GrayLevel[0.8501]}, {1.7781512503836434`, 
           GrayLevel[0.8501]}, {1.845098040014257, 
           GrayLevel[0.8501]}, {1.9030899869919433`, 
           GrayLevel[0.8501]}, {1.9542425094393248`, 
           GrayLevel[0.8501]}}}, Frame -> True, Axes -> None, AspectRatio -> 
       Full, BaseStyle -> {
        FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
         ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, PlotRangePadding -> 
       None, PlotRangeClipping -> True, Background -> GrayLevel[1], 
       FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> None]}},
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    GridBoxSpacings -> {"Columns" -> {{0.5}}}, 
    BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]}], 
   TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
    DisplayFunction -> (StyleBox[
      StyleBox[
       PaneBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
              GridBoxAlignment -> {
               "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
              AutoDelete -> False, 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], 
             "Grid"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], "Grid"], 
        Alignment -> Left, AppearanceElements -> None, 
        ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"], 
       LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Arial"}, 
      Background -> Automatic, StripOnInput -> False]& ), 
    InterpretationFunction :> (RowBox[{"LineLegend", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             
             TemplateBox[<|"color" -> Hue[0.59, 0.7, 0.75]|>, 
              "HueColorSwatchTemplate"], ",", 
             
             TemplateBox[<|"color" -> Hue[0.083, 1., 1.]|>, 
              "HueColorSwatchTemplate"]}], "}"}], ",", 
         RowBox[{"{", 
           RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.877061422224573*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"05f4b227-988b-45b0-aa5a-e8547c081ae3"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Loss\"\>", "\[Rule]", "16.27837149935202`"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8770614222340603`*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"9cb7294c-5670-4337-83e2-88604648b056"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{12, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{12}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{12, 12}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{12}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 12}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877061422240549*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"3aaef122-c7e7-4484-9f7a-ec35f25f22b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"Cases", "[", 
   RowBox[{"dataV", ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a_", "->", "b_"}], ")"}], ":>", 
     RowBox[{"Append", "[", 
      RowBox[{"a", ",", 
       RowBox[{"netF1", "@", "a"}]}], "]"}]}], ",", "All"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8770614231109447`*^9, 3.877061423111941*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"6f617747-848f-4cd3-8dc3-4490f920c8a9"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1: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
nZrivo1Wh/lwU54cr9MPSc/5pR7Iw4LVccUnWlEPB078feZewbqs3U9MsF2A
/nGuQnKmpyahDlWkzsf8m49jf31UHVdh+znIryrUeb3tbAiLG4L+UMe+0j8R
D4W/jW98ituF+MQ9/z+sI9r9svHFdfa6Yz677t7Lu33nznMLCtg9Q6HPmHGL
+f0lGmda6i3wd1V/f2FCD9yrx/0g6id0f33sm5A3EZ894Z/KPNB57kbyX979
HNYdrC9kl2h/59+zBKr4YP+esHuQKo/nuPdw7qnVhVzXfo24DLuRXD8nX+fn
+GL/ldwI/qndw/Lw8dD2t5DHP+yXq3o9XMgz9Plr7HxT8OtRFYzvtXXz2IxW
sKtWJw5J3s/qzwKPTs7j915Inlf9u4YznOTat9/Cz31E/c3/ftx/KFftddMn
kuuH8KEd5sh7Ds5zHOKT5x+E+YLxkT5zt2/F/gv3qUiupG7n/AQf5/0Zcb80
bKB2LwT9+wTlgj/8ivqJf8hFntfYtPyqt0+DMKYHsR/f8UMow4l/vrUgXP0e
/C9OTYUcON+g32NOBkj5nXojexZ02srPfWg83sZYbx0X9GmdvpO48xyc+PsM
uAg94lyJ5Ojxdg67Jynw7zP3IH+QfluHd617tsbxer7VxE+OtTM91PlFHd7G
czLDBZ/ntz7M7i0L+j6eY9h9A0E/d+sDLM4I+omew/h9ZnGf8Ogq5N9e6ndf
/HoA64GPivc5/Ym2LmLc2TMv4f4ezlNIj7bYL1DPd1d/txYfKGQ4zRdHuy57
1HULv8edzOT3NMg+FSMfL9dxIVdRxRLU60BP460s8EYdoFrxq7LTJyLZ+Sbx
cbx5p9JNxwWfsUO3uTN6k4/t0a/n8vNQot+/KQ/3QhG3TXrjvy89Jc9Jnf4v
6mDW0mD5HqjimdYj/F4f9V9y0I74DD4eZl36lf3ewTou88bJZez+Qx2+ft26
E5N/0uvsUp+jXfvWyPEjf6RxlJeHNFfpwL+ktLyVzkfYq8vxSxb1Hf6790w/
Nr8EPvjMcB8dr5sf69fd36jbDX7/jeZNt4ktm+i4ODcr2f8LcNiFzt8mtD1d
q/uJ8PPE2ftQr65V53uJ9TN5jmZo+5fx04bxeE7yJu9ZyuM5tXHz+vH74YSv
m5tcn+HUzvg5ht9TpX422MMvSP/BekfjeGTyKn6fzXw3Ursj/3biZJ8GGc8z
nPgZWaXXtPuU4FPY/QutjgA5K/pu0eaJRfpXxcyTmv9Bf3N7ZrqwfsXfX/Sa
xO6bEW4cCwzh95ypv/KsMW0ZTnpK/w35ulN+ol+WlerHcKKP+c0buJfajs/1
cmP0RJd+dIu2jlqkXTxTPbTzCeDxqQ0QzyV/cY759HtDsF/yUb/7uqq2mY4T
ve3b9x4Ejvp9sNlGWg/z+1rkV8OuBf0aq9ELPKbJk/Kcxbm+0Hj27U6S+Y9x
N7+tmy/eEzvz+8B+5vzqNbE9zl8Qh8X4il/+VF2/wb/v7lns7zLE7+PDbPy8
mH5/f8ITQTou2tPNW/HzffH3RCHd+b0sGm91bKnmH/i9dW2Hm7KOpOX5H+5+
ieUzop8myYWoC0HPZK/rqWtL9Xgi6xVrZuKcF35N8ldnW6vUPI++M88TC3aj
3gJ70Xf5pVNq2DpC8kzPcv1TX0fkvqyZoeVnZLc6/u5bB/C/Fwsy7VvVLJWd
4wv50w7NaKPjgn9UW292T1XQTx+7kfEX+Iaxn2l1NIzbnnq1I8PJjtEFizlO
eijZ/yf3Q8Ir9l/m+TnpKW7amHCVDu349rU39HxD6NNInnhdjfuQp3/BfH7v
i/gb055h96nEuPPS5yBfrVZwY076Mn6fivDXPQc0ZvTkR48XHOH3pggPXfZd
A4bTOG5dXtZQx8W4fnhiBOpy5Wo86BYwnP/dhFjf/ZM9dXoxL8YZib4Mp/Vi
efu3+L0pkmd7aoyXjgv6nu2XS9w5f8V592wLu3ck+k3bPVU7X4TfTfK5xfNe
wjN9UKd12kvUjXc4eD4s6qUZ3QN1XMjlc+qHAIaTPNFz3ANUOgvqyQdf1upT
wN3ebsf/rpPk2jnlc35fiOQI31HO73vTd44JthDb/wMDfMOH
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
J26C88ENg9W2/wGthrQr
           "]], Polygon3DBox[CompressedData["
1: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
vD6f2UO4xrmep883N1EDrLPWR/F5aw9Ro4f6WxP1/5r07a2WZe7YL8oP5FRz
c45zfeaYPaW1yxp2c64RC3yn75JDDK6Ro+Zq78xvMUwsOw7/2Boxaqz2wT61
RMxtjb2MA/sUx+SMBrv1xfpunbL3sl8b2QRGiBW9Euu0ByLDmk+eWXtb5Fxj
2tgWs8XuqXkX3om1v2fmh3h0ZYme9YKMV2un3298XNVEr+0aecCUfNelmf99
Ek/Oz5gwP/4jBpfoN8xZc/eAGvzAz9zKrWrc1RQxq0ZMXZW/aVxNcF/5+/sn
Hsh15DxyxRW8Y+8mME6sW18CK8QMe385+pgm8Fx+snONWmLPbO/snXq3M8y/
GhgoFoof4l//Gr2L+XRH4rW9uP2gXNh8MZc2IhfV4NhLMv5vKMHZhuaZeDb2
XO81gdFitZzI+PL/Fx/ij8e/PeNZ/iLn6ZbnJ57bE94o9jSBv3JIueR+mS9y
PrmfnHh0iX7B/kTOJHdyj/aBAzLXR2E/0wQnfjkxs2Oewb9KcGj5hvVmh8TX
QRnzxr7/k7AXtye3P5Zj922iF5J7+z+GFU1wXLmu89/I+OxfoiYZO8bQ/Fy/
JfNLfOuH/04TPdl1JXjdbSX6qGtr1C/x1x71kRL/A/F/IfbUd5Y4Q9c417OV
U3r27dEP1bhja5347d1bHztkTLWtMefBGjzVtQsSD+2R7q8RM/ZPLRMf3KN9
T98aexdzxV45vFzeGmetk3PJj7Tds3v1mWdqb2IN86w9E/P+iTwr323PZK/k
b/wfN39Q3Q==
           "]], Polygon3DBox[CompressedData["
1:eJwtlXmUj1UYx9/72g2NpRAnmWhxbMk6panjiLK0zOSQIqaMaSzDJEQlI8Nk
S7YswyRLss0xLbSpUZapoUWhLBXqVLZOKFSnz/c8zx+feb7P997fO/e997nP
m5SenToijqLoKagA9UluCFF0Hn0OFpInQg28D8m3QVvyayEFrxf0hD3kHaA9
dIQXmPcL/nz0PDiGHou3AL0LdsKXeA3w8ogn4WX0IfgebmX8DbyLWgPUhFHk
PwZb6zTIhyHM24H3KdRFNyK+RWwDlxi/DLnws9YCn6N/gKMwlDkH8Q7AF+gq
xDd9XmfG3yZOw8+HOejqeM9AE/TVeF8Tv4JMX9NuvNZQm/wW4n94lYl74QT6
OKyBvxh/Au8DdAKMgUzydlCOsS5632D7PMufs458NvolOI4eh9cc/Tp6LWxD
b8YrhuFwJNhc/WYiejXeRviIvC15O60RriEfQRwOv8F05rTAK0P3RicHW+dl
Ym38usT2/vvt5H8QX2V8GTod/Zj2CZ1A/IS4h7jXz3cO81KJaXCjik7jhPkw
D7K91vTuiXAFFJK3IpZCTXQdYgmxKLZaVE1O9lo7CjnokaoVaBbbvgxDp8HN
qmHy08Sl5PvhgPYf73e8mb5/2seWeMXBzkd70FG1AxtV+8SG8DFj/xBbee0k
EB8lDoQZsdVdcmQ1PJO8Fn4Nr5F/8Sr5WgrQjYnXwWa8tTAErx/5VXpneFG1
iTcXvUHrgEXo8Xgn0IvRS2A1rFJtqX4Ya6j/6/v2LvE9eB/Gko+Bz4Lty0q8
w8QsfpOE7oLeQVynewjrIYOx7/C3opsRm6v+8QL5Ka0B/S18o36C9wDcD6nS
er/Y7lM1nS2xgLgs2FrraR0aJ+bD8tjOX3XQGRqRT4U8OMvzl8MZ3SPvKzfh
b0IXQVftsdd2N7gbppBfybwlUOQ9pyRYv7hDe6Y7Aj1iq0XV5Gn1RO2Z9g6G
+r27B+9e6BVbzT0Z2XtmaC56Ft54mBBsH7Qf++CUP0/3Vfd2uv4v3nPouep/
6l3B7s5SxgaqnuBZv2PpsfUs9a4jUBW/Gnl/eASqQkW8dxh7BV0ZXQnyyH8l
9odO6CmR9Zkq6hnEFPLyxA7B6kX3skz3iDgKcuB6yFRvZk4uTPYa34q3BSZ5
jx2t/YDbGStUv0QP0DmpxvEWoBd6T1BvKPB6UK9tgr6g/gglfrfuxGtJbBHs
HquvpcX2Xnq/CV7/A/BWoM8H27dBvh8Vgn3H9D3Liu18dQ6tYRN0J5/EnOf9
ubpPw3Q+6DV+F+urb0BfdB8oD8d0P9Wb8XfrzGG2eq/XnHprG3gN7xwxGa83
cVBkfVDft1w9T8/V//PvwiHfq9GR1ZV6WDH8iS5UzWjfg/VP9dEH4bCOLLZv
xXp9KyLrL/r26Bt7V7Dvru5KFvT0d6rjdXyf+g15huaiqxO3qDeguxK7wVSv
oYdi24d+vqaKxL+D7eVJSIScYP10Bnoc409rX/3ePk4c7PfkEnNWqLZ1N2Pr
AepdKX4vLvi56Hy05z/p7qG7Q5nyYN9OrU/rLMVbTFwEF4P1y05429FJcBs6
mzjS33UwNMBr6u+tsyxVPwv6E0UPqw/CRN1RfeO85/wPG48iMA==
           "]], 
          Polygon3DBox[{{622, 160, 496, 511, 205, 623}, {545, 323, 321, 544, 
           660, 661}, {538, 293, 242, 518, 691, 692}, {543, 317, 101, 474, 
           679, 680}, {688, 132, 488, 536, 289, 689}, {625, 209, 513, 627, 
           104, 347}, {457, 297, 582, 584, 162, 499}}]}],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0L9KQmEYwOFPIUHQLHMJp5qirSkqt5ag7I8WtAQZaFMaFZYX0Jq1WBdQ
reXkjVTeRHNBLT4fODzn977ncA7nnLmTVqWZCCFUOTKk9FxbZM0POq+v+sIz
G/ZZXdZffpjmkRX++SPPE2nu6XLHJPvur1KhZj/QIRnzmcaXiu/Vdrjmhg4z
zg10Xeva4JQJ+6VeMWW+0Jx+s8QHn3yxyKrra5Q4tG/qFmWO7du6w278/mQI
e7oQv1F7FMy3WtS+vvMWnzf+jyPUFCMb
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{349, 521, 565, 564, 527, 672, 461, 507, 617, 616, 482, 714, 
        468, 620, 509, 639, 515, 650, 397, 692, 538, 663, 434, 542, 678, 419, 
        701, 531, 707, 705, 540, 377}], 
       Line3DBox[{359, 440, 695, 456, 696, 697, 513, 627, 475, 386, 673, 275, 
        562, 427, 655, 383, 598, 412, 642, 503, 719, 342, 353, 578, 107, 712, 
        390, 389}], 
       Line3DBox[{366, 557, 558, 491, 634, 410, 572, 394, 430, 196, 641, 403, 
        668, 525, 463, 438, 648, 414, 646, 240, 506, 614, 379, 110, 687, 454, 
        693, 450, 422}], 
       Line3DBox[{367, 571, 536, 488, 568, 566, 399, 554, 553, 136, 360, 466, 
        404, 640, 637, 636, 411, 395, 416, 602, 600, 392, 560, 532, 417, 699, 
        698, 529, 458, 676, 375}], 
       Line3DBox[{370, 504, 586, 587, 517, 629, 493, 657, 428, 628, 284, 596, 
        597, 211, 718, 543, 680, 446, 588, 591, 593, 546}], 
       Line3DBox[{372, 380, 622, 623, 512, 626, 348, 550, 388, 274, 519, 171, 
        643, 644, 645, 448, 683, 474, 679, 681, 534, 590, 592, 594, 480, 350, 
        407}], Line3DBox[{19, 308, 309, 310, 84, 260, 62, 244, 245, 77, 295, 
        37, 121, 92, 326, 327, 11, 313, 85, 270, 271, 68, 133, 60}], 
       Line3DBox[{401, 537, 694, 455, 630, 494, 690, 408, 188, 580, 495, 647, 
        415, 649, 405, 619, 524, 716, 470, 717, 516, 599, 391, 153, 444, 576, 
        478, 703, 702, 459, 374}], 
       Line3DBox[{406, 547, 476, 555, 479, 589, 533, 346, 685, 684, 682, 447, 
        174, 656, 654, 520, 561, 528, 674, 387, 549, 347, 625, 624, 511, 496, 
        573, 371}], 
       Line3DBox[{420, 150, 449, 686, 508, 548, 369, 426, 653, 652, 486, 563, 
        373, 241, 464, 203, 621, 510, 603, 345, 635, 514, 551, 492, 570, 569, 
        471}], Line3DBox[{431, 552, 483, 660, 544, 671, 441, 709, 460, 435, 
        664, 489, 715, 469, 198, 423, 199, 452, 618, 522, 604, 354, 670, 381, 
        607, 500, 583, 541, 704, 439}], 
       Line3DBox[{357, 539, 582, 584, 501, 608, 610, 497, 355, 605, 183, 442, 
        363, 556, 424, 651, 502, 384, 595, 485, 666, 472, 720, 523, 351, 106, 
        545, 661, 662, 361, 432}], 
       Line3DBox[{358, 581, 457, 499, 606, 609, 611, 498, 356, 182, 675, 443, 
        585, 484, 425, 382, 574, 385, 364, 665, 667, 473, 436, 559, 352, 577, 
        477, 710, 711, 465, 362, 433}], 
       Line3DBox[{365, 490, 631, 632, 633, 409, 505, 659, 429, 658, 197, 402, 
        437, 708, 462, 669, 526, 413, 239, 612, 613, 398, 378, 579, 111, 453, 
        535, 575, 421}], 
       Line3DBox[{368, 451, 689, 688, 487, 567, 400, 138, 615, 481, 713, 467, 
        200, 638, 225, 396, 691, 518, 601, 393, 445, 677, 418, 700, 530, 706, 
        303, 376}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{142, 201, 603, 256, 658, 196, 329, 226, 599, 600, 601, 242, 
        293, 663, 244, 261, 604, 605, 182, 276, 673, 674, 274, 252, 170, 231, 
        283, 628, 314}], 
       Line3DBox[{151, 249, 653, 186, 613, 187, 614, 217, 188, 128, 554, 138, 
        617, 189, 313, 312, 709, 320, 720, 265, 559, 342, 230, 685, 103, 681, 
        282, 588, 334}], 
       Line3DBox[{9, 464, 89, 462, 463, 66, 619, 223, 637, 638, 639, 37, 423, 
        56, 424, 425, 24, 655, 656, 173, 644, 234, 597, 88}], 
       Line3DBox[{152, 241, 125, 669, 268, 648, 649, 204, 224, 640, 200, 620, 
        121, 198, 248, 651, 165, 574, 169, 598, 166, 174, 645, 235, 211, 
        331}], Line3DBox[{214, 154, 657, 255, 550, 549, 104, 627, 210, 300, 
        611, 610, 161, 670, 260, 311, 678, 677, 280, 560, 153, 195, 572, 180, 
        659, 258, 635, 221, 340}], 
       Line3DBox[{236, 175, 586, 147, 622, 160, 573, 207, 695, 269, 581, 297, 
        582, 305, 704, 308, 705, 303, 676, 304, 702, 177, 557, 139, 631, 218, 
        569, 341}], 
       Line3DBox[{246, 548, 193, 286, 579, 110, 215, 156, 690, 290, 566, 567, 
        131, 190, 272, 672, 270, 671, 321, 323, 106, 577, 578, 112, 114, 589, 
        590, 591, 335}], 
       Line3DBox[{250, 563, 129, 184, 239, 646, 647, 158, 126, 136, 117, 713, 
        714, 326, 715, 134, 263, 595, 122, 665, 343, 642, 167, 228, 682, 683, 
        101, 317, 718, 332}], 
       Line3DBox[{281, 150, 575, 288, 693, 296, 694, 292, 124, 571, 289, 689, 
        192, 565, 259, 133, 552, 119, 662, 325, 711, 712, 176, 155, 547, 105, 
        116, 594, 337}], 
       Line3DBox[{316, 285, 596, 233, 643, 172, 654, 254, 562, 164, 585, 120, 
        556, 181, 199, 295, 650, 225, 636, 222, 266, 716, 328, 668, 267, 708, 
        319, 203, 144}], 
       Line3DBox[{333, 318, 680, 679, 102, 684, 229, 719, 168, 344, 667, 666, 
        123, 264, 664, 135, 327, 118, 616, 615, 137, 553, 127, 580, 159, 240, 
        612, 185, 652, 130, 251}], 
       Line3DBox[{338, 145, 570, 219, 632, 140, 558, 178, 703, 108, 301, 698, 
        278, 706, 707, 309, 306, 583, 584, 162, 606, 298, 696, 208, 624, 205, 
        623, 148, 587, 237, 212}], 
       Line3DBox[{143, 621, 202, 257, 197, 641, 330, 717, 227, 602, 243, 691, 
        692, 294, 245, 618, 262, 183, 675, 277, 275, 561, 253, 171, 232, 284, 
        315}], Line3DBox[{213, 629, 238, 149, 206, 626, 625, 209, 697, 299, 
        609, 608, 607, 163, 307, 310, 279, 701, 700, 699, 302, 576, 109, 179, 
        141, 634, 633, 220, 146, 551, 339}], 
       Line3DBox[{247, 194, 686, 287, 111, 687, 216, 630, 157, 291, 568, 132, 
        688, 191, 564, 273, 271, 322, 660, 661, 324, 710, 107, 113, 555, 115, 
        592, 593, 336}]}, {}, {}}},
    VertexNormals->CompressedData["
1:eJyde2lUz1HXdgOhIhHK1EylQUkoDQhFgwYaaFRIUSppIEkzpYmSJkJKRUqk
kpRCMpQGqVSUShqQJuptX//7/fB8uK31PH1grWudtc8+e7zOPr+/oLWjvi0L
ExPT26l/WKf+nyb7Pt7r6PdiPZlY9q1Kd1T722zNpN81qO57HRpEeHG3C7fm
FO5xUSeN8BH5uPOE9xmMRmlM4WdfRcQSbrX/dCLhy/0tkwn3MHPcQviTR6Xe
hA+MHhTXm8KF3jLdIbxWxcKT8NDwBdK0Pil+9iDhpRyzLhBemMimpj6FV7m/
vUY403/5+2B27gytd+L17Sf9PT8YNNJ6wZuG5wiXvqOcojWFWyVKhBA+VHEp
jnDHlcElJL+w7Lgd4eJW2mGEh50WViJ95lxTiyTcyDMQ+vNrFMsaTuHhVxqT
Cf9l0Qs9V9+aJk/2EVx1259wiUkFN8KPx9hLbJzCHeLUNslM4UkfRmA3kZvK
KtumcK/iCJzr6c/0YMJbWkbfb5/CL7KpphO+I7j9EuHCWrM8N03hsv3B5wjv
rqlIIfxVel0KnXfPrkMb4Jeg+faE25nJBpL+V9Y2raN9ZQJyrhHOo3O8assU
/r2pfDut77sqFA79/3JdpH09E6vP/8vOzzR6/eGvE/XKdN71Yj25tP7VgkTI
0V94gnfHFM4h3X6K8MB1iTGEv580VCU8kbd7L+HZKRk4b/xlMY3NU3iE4spy
wrd4dIYSzhTjq0DnkllimkI49/u3EYSv3bDuEflLonl91L/0/FM5nEDrG/xy
oskOi0ylttH6jcHZ0P8Xz975iOe8urx/yemoPGNL638oRd/XmVpvyyqxRuYf
6w2iZSJp/acwyWzy77sLUYEkf4GKN851+tfGMMKPbg1I/Ne+PluMcF4eTpXd
5JesN3uDEFctlb6EO2/qzqA8akrccRl+TH8Ne4Yx5+pRnGdyTCJu+ZSH/Ag/
vGBw7p4pPFS7353wZ5nBkF8780G+7hTec0oK+V5i4gY9G+qL+MluijHll/6l
J6dIH/LluY7AcrJnpc0b5Fd3ZyziNn6kqpn8yGT02u1fciyPRwXS+mzNil7S
f3JhUBzyLoMvmvCQFMUI8rtOzergf8lhUu2Efx0uRfWTPp8WB2X/c/1/+VvX
4RdLctZM1zBZNyXH7FMZ4mTpjAbIb3+p9o384pT2o4BwiwaFO8A1YodITwGr
WDbC15feDiHcXNhVjfTR4TGC3+UKhS8S/pJDNJLkyM8TOU74j20xyBfR3yxW
66dwXp8/9/+l/9ivbNTnj8M3VEkOT0flP8+7OkgAda8ppdKe6kDfH3Pnf63f
Pe0R4kqO+cs8km8Q/jyT1jse/4n84s7y201yxIxuWxKeF26N+NkmVM+iNoVX
aI4XIw737EOcqD5qfEdy9t/miP7XvqbH1+Jca1j+/KJ8cdgdCTtoTTDq6oxm
Rl2VTGDU1f8mJ5JPG3F421BPkuJQ3SLHC3VAXgPy3Q6W1JD+CXfHygh/oGF1
gvBm17Bk/Sk8csWtl+gjnz8hX3LFBixIjpT8nQv/l7j6b3/OZUqOJF9c9mMI
9ZeD8mlfSf4ir43I3yDHk0soTzPt9ycRPvHzOupt0jKHaWTP+75qoYTnfAhA
vzNXvJRJduNx3JhKuPBbQcTzgvWFPKR/aJKny/9Ff/ed0ohn1W1q7VQPHzvs
8iM5j/imoy4tLghkprqRonuzinDeQBvEeZC1ZSDZ2eKyZtC/9v3/cvry/6ec
/62eht0siLd0ATFVyjvmCb8wkvNdkhn4C9/nOTun8KLK1b6ED/7KRTwc8xeb
RvWnpLTo8r/2NU77DXtuX9riRfZ/4+C0/1/rq60NkNdPFGviyP5zP6W70voe
vs+XCf8+uugO+SsocQHkjL51Bh+bk7+vlOT/NvPRAy9yaI0i/Ly3XA/ZJ/qj
GeQE89gGEN7ZU7yT9Jfn00bfnHP3BdZ711xbT3Wpb/1h9PerJ0sRJ+wz+7NI
fsCe2VcJ1989BD4zVjAYTvrUdZWjj8RrqMButRWqTqS/YNcl8J9qbyvEYY/h
yEaKB1eRlYcJnxEVizhRfqtSRXI0bWbcJrx8dckVwh8O+maR/t7qq3YRfnMN
O+Qnz5UZItynog75JbiqDHYYnisuS35M4q7SILyAeyn6Aver+dPpvJsuXYXd
eEZccK7OgIkG0uf2YjdvwstM+KBnk4ZZEp03/uVL2CFxbT38OEOqXonOVbjV
xJHwRqMJyOG8U9tEdYy3bOdTwr/y70V9S98VZU/nsjD5iHy0DNSH/bvu7HQj
+dU7x9AX/O5NgA/UbtA6QudqsWJG/fm9YQD7qsyz2kR+Edz/BvlodIULfHhx
GdM6A7LnvPFHhNsP6WFfp/NGH0nPsbYm8EaRs8fAJ80/tS0g+zzrLEO/Di7n
AP5NKdWUeJfVLXX4sX3WTZzLPtYhieL/p10Z6sbB4Vb0hX5O/XTS53VeyCHC
O+VqbhOuFs3ZTfgRx28LCdc78/Us4XxnmLeS/Pgvu/JRr0yGoP+KhE3KuyiP
XuY8I1xttwLq52DEyhXKU/iux0qFhNd49gLvVTtoSfIrKz3QF5zniiIv9tUZ
ZxOutuSqE+Fn+Iug/9zzHSlkz1I703jC6+2i0aeseXMrCW/98eYG4ZK59uAV
Odd9fxL+x2sr7h0P10sh3noUsjXJX30xsTGEb5o7G7hKn4ox+fdF6ADkl37t
hf1Dbrw6QPZPPKsB+9frsiFfNpwunCT5HHlD4D+Kk4GIf5N7BmMkP9zhMPQJ
z5qFOLHv6EFfYxf+hP64WqcD+i9qnM1Bfrk1Mon7lLRUC/wYKbUznuS/PSkK
PWcFaiGeVX5Ee5N8W45TiGdr+WTk+1aV3se0Xs3oEHhXVttP9EGVkC2TFCdz
UwzQrzc/OYN701uDTb8ozoO7o38SrtDphLybyaNpS3qO5dgbw78f2mCfhtiF
K6ie86cuwH3wg58c7HNeg6eG1if/iATPqXmkifUSHMJiFA9+axxQHw7/On2K
cPmhuGbSMya7tAX+uqqO9Za/IxbS+hk1TVjPbv0N63svN3QS7z1+UhN+LI4b
hB2kW1eC53+/M3KWcH6+V6gzxSrxwA92eaDOhJ+cgF8OJR1kp7hdy1UHO1cX
vYf+L5YYCJI9XwTMAP/sn8cFfzm3szBpT+F3M0xQJ/+EJkCOILNBAa0v1tl0
k/BlenKIT9UzJqa079rFFqiTjzYnAhcckOcn+9xaHAe7pa8yhv5bg95h3zPP
eNGnAo1Wo18EM+tvpfVuTb+PEc45mI668X7RUg1azyvRZIu+dugK4uSVolc5
eO8qf+Q7x5gE9o1pM1pKeIlVNuJZijMV530Q+/Ig6cnS4Yq827lcGPpU6yrn
kHzVQ+sRVzark1DHutnuTpA+Ht/GYWf3zUvQ38eKhHYQnnW0GPWN3+sy4tk/
w8Ce7Kybdy4B9dB8FH22+fawP633q+HH/THhqzjOVeSox0v5Vb9mM+rh6sTT
iGfhu+wrCC/wXw7+/8SwFnESMFC6hvD4+jHEG+dwNfLRfM3xQ6R/0Hwp9BHV
QAOct+1NXC+trwr2Rv4qHGLY//6X3A3gtweSUA/DttuiLike/o5+d1Y7KYLw
i197cd6WkRJ3qkt+0axnCL89fhL1U1InWonwoBORDoQXcc1OAs9MOTBB+RJs
Kog8kkjbnUz4OTseWbJD1JIx3E+FNtxEX+ONG7lCdtP+swp1OFtMBHpqLXfu
ofV3lFeEEx5j8wf88E4h23Tyb5OIJ/qFSaYz8lqP1aqI/PtS6/Yr8PDfXcij
Qc2C44TnuTYh7wzuHbmKuL3Rr0L3cdeEm7txjwudizz6amTgpjiFC1tMv0L4
azYO6PMzsv4n2ce31u0i4RtCeBAnAY+znpGeVTEZuP/eNwqFPSsyNkiSnR8U
i4MHpk64MurwhOky8NIb8siv2o+ykO9qkW9H+LYvx1H3Dj7sR5yL3a3GPaLF
owp5eqiQ0d+z3q8aoXPdV2UOIDw55A/wZTn9r2h96M070Meu6jDyojh80RvS
06qGFzz5sRCDP38zjGAlOT93ByB/F4dtRvys3LS0iupzX9gGzHmGt35BPMxp
TT5D/mKtr7Qm/Ed4Ou6JL7xjhIiH2N8/jfivF7+MusF5hv8RyeHy3oA8nX8w
CucqUJXEnGTkyk74V/l6KOxjPLG+jPSpyTdDfYg7XwJ7Xu4PeYv6qd4HnuOR
pYp+p3VWi5v27ftrCD4wW/ko6phw1OVeqqvLVWsxR7KtjIee+dc6K4hvLPbZ
jXjOHFDFeX+FfjSg9S9/nTwK/qPyBvcjhZWRe2h9+zZ29Pe5RU9Qr2ZtX7uS
+JiYQyb4aoM0g9eJFkTJkZ4Z3umY2wT9KYf8wt+sEoTv2MuD+Fn/8ixwAzlX
QcK/rvOG/k37siGHTa0tjfDVbethhw0HvYE/mVw/jeJftWE/8vesZBnkmL3j
/EDr02LvIn+rBmcBH73Wmkn4PJO/2LdWygZyfnKuEiN89uga+EXrQAXs3MJW
ibrnzD6O+BHyeYw6U23+2ZfWhzsyoe+fyrsIO8juEFCg9TUnrMFbDhbNRn3g
X9iHe3TTC0P03x1l/uiz09sL+glvXbIdfcr73UrEId/dHzx0LqeYDtTtj7zR
0L/Y0R7zyYUrs6C/rCUT4txc5osV8ivPDfY5m+qAfBzu2xdE+hhuU4X+r/sa
GHOVrNosyq/e2hk+hC98ORd149fXLym0Xkxz9gfCB0UvQZ/NDw5vIv8eMWrF
ebd/ikf8L9BkvUhxe3SkEDxcVz4CfKPvI28kyecccsTcae7MQpz3wSF1HtJ/
64tQHcIHdERwLjvHi7if3hhKQD5eV5qBePaUsq0lOyyflp1BeKVEBvIlR+CU
PuF6kafQv57cq0ffGVa+w0p2GNEJwrwi7mA0/OUT31xP8u0sFdD3LeQY+b78
+tlnhHM8fYN7yiW717DPgZPy7krES+1ScgjnTmfYwdhxYzKtX7BTGfpoyQzd
gvzKACuq/+xJMisJF00YxnkPc3w3prr65Jw2+EyQjmQG4UZ2KwJofW+kwiLC
IyotUB+uGu/AvCh06xPcL7SHPqNvDlh74D5brvQafIOd/xDso3rklgrhTHJN
OK/tXxHEbWLEl2LCPRcKYB67VCod56pZFRRC9vk869wJ5LvVDsQJ86sTNoTr
toaiv4+za0NO9bHBBsIfGg6h7qnqb0I9aTs3Zz71NQ5x62rC9xxcCv2X8iX+
xvxBwg/2aX1bC7/MEhjpI5zPbxR66i0Nhl++dEXuJXuKJzWjnrf1vMa+M1qH
2ck+9Xy5qAM3YovAExRZDQJoXwfJI4grjVgp5J2HatIZkiPC2ox5mmTsGOLk
fna3CcWbUG0v+si7nSeR70wa+zbSub7H2EC+WdVa5FH2ikbIUXjUDXxMTgZz
CZfS3Faaw+w7pgI+v6XrBeL88MXTzqRnay477JxqOY/Bow7u2k5zey3+j4w4
SU+F3Uou7RikfSc1xh8grnTdGO8U/CPbKE5ERO8VER5dKwhc8XfyPPKjbOps
9BFrWSfkSxDPGSm8m/gnQk/Xhm7Ys8YwLR788Ek+6uGc7iqc9w/7raeEix9S
Rn1zOGKG9W+v58Evr08Voz7/iZeA3cp/Oz3EXGLwD+YJCo2zEW+mr7Y7077S
60ORFxVZqdBT2+3+yg1TeOa2nB7C12qowT6sfjwSVB9Sed6iPz79loI4ieoI
j6NzNablob7Z550EfuGugBn1x7CL0cjrCZ/dwF297vITD199xhm8dHjJAfCr
7e9UXlM8HDI6YkT4s5mfGfcOK+lqwgsKMhn3ryplL8KTTzh1kR3YnbT6YE9/
H3fCb/BfxZxfbM0c1D0/xTrk3VDFV2va11VXEXaTFjA/CT23KArSfSShLAi8
i8kz0wl5l+QkhnvKhwa8Z4W52MJuT8SSzOi88ya0EP9inoz7lNy0D2fJzp1H
RFGXVLYqIX6EhrTeURymNqqizlvOuIT3HZOLraY0nxT2HWWl+edxvjbEg0+g
ajbZ2camBXV+llo++vvutiwJOtdifW7Ej6bkMeTjw78Zb8nO8+apIy8secUh
Z5Dvthvp2f3ODX1zD08w9Hy2MJyJ7GYzbIj1MrZbIOfq9B7k+4IlQXfhrxnV
yMfL8+R9CG9wfHOE8M50BfQLzeuF2wh3CtDBfaHaTxZ5PSLOjvqZlfUQ91ax
aEfUpXc3LjiQHcTYyuF3l5RMxGei4AJ3knPZrAZ8vsx/DaO/BLb/pvXjlx/h
vSl6XRLq3iWbPk1aH/OZE3zJtJud0Xc2jcUTLinFuK/ZnM+D3526onUozlm3
WiN/pSQFMZcY/74F75Jqr3sxP5+ttQ946R2hb4SLyrmDL7G/1oD9z85kS9w9
hQdb3PAgPO1aD+pAd8VRC+JRNvlrUDeET5zHvmKB9QIUP4Lzn6IvByxXhP56
AjKv8W74SB/ro9LZkb+8CR/aye/Ky63A3z66xCIfCzI/4F0vq9gI9rkR+BR+
WcN6yYPyYuVOQ8jR17CB/EDFNwsJP/ZGFfcm0zn7Id/GefQzzQceNM+5R/jn
mWlYP9bh4ELrXVxWwi/1EZOI27UnbnMRXnf/JPpX+eI9sPPhmT23qb4pjLyD
HBN/cZzXYkGQLOacknG4D66L9IOeL0eDxDFvrBtHPfeMOgi/f44OO0p+6TBU
Qb/4PZGGfrGEuZeF5FwuOob7BS/PHOivtDHtCq13v/Ycev6StYR95D48+oy8
DrmJfneYNxLy+R3WdhDPEb31B/PhholS6M86eaeT8uXNM33g8kNCWK+jnXKP
1v89yo57x1mZKuSF3Uv5QZLP6tUIvlRudwJ1wH17uQz1kcmAdNh5IkUQceJV
ZnSU+PbPSE/Uvd3tVyCnapZIOu1710kJeVe5phn6Z77nfUF+Z7k6hPuCov9y
5Glg0uwuvDe9u4N9I5e9Rv3UTCmPpfVi9X3oFxZsBbjf3d/FP4fss6LD0YDw
+4q5jLll/a5jmBsUbQVP6Ln0DX45p3TsDdl59PrjA4Qnjkrjnu7S2YB3/AsF
e5DXUos98E60MKlFlvCHzSd2EL5shTHiJ+91HfitwhZdzDcayrLQL/wsOHsI
N9dkQ794vNkQ9omIkd5E8ZMq9xXv+3amjPeRR984AsieWfE7Ud8y2wMhp+uA
jwT4lV7WaeTLdkvkafmxXU8prjbxS4CP2WSsR924cFLAlM7l33vDkPAZq6bD
zoF8RsCnTyqDd/FYGSMe5JRmHid8iPcu4lAg5jbirWlf/gXCO+SE4F87bwb/
b1/EPJf2DWFzw74e0TrIl2kC663pvFmFA4ir4bQLqA/nVjrmUvwYO9vj3i05
4YF9V+lV7yF7snMmoy/ENs2Fnm2cEkeJb+x4UleKOGTpQvyI+9YIk90CvMpw
X9POrkecfNTgZ8yTZW5A/iobBu9adKttM+nzu+LYSdThBf3Ag24zOdK5Zv+Y
BR7IZcSK+LG4nIY5ycgGZhvUMRcWfC/hwL0jm/rUl/FWfM+wTMcO/bd1YlKa
4jmniamZcHPdXfCLx7Ttu0hOcm8O5ieCYk7w76K2126k/w+9+ZhXVJmH+BCe
foflFfldoc8Z/VQp0h7ndVKaOUr2+XaW0fcVJ0XQd14JBR2iuvRSeR7yQvLV
H8Sn8mUhEdo3U/MA+MOSMEfwiqsJXOqEG1V26hLOsasdcxu2a3/2E86ifRDv
EWPcu/F9hd3N7rOEZ7z+qkb4ibl2+B5Gqsj/OdVtH38BbcI5u7OQL4/eSePd
ZDzNxxR9REca9WSJ8hK8+yTOy8Rca1vQMPBN23uHSE6H2ThwmTYu1BPvfcsS
6bwGP26irnbGbIZ/hR9Wh5KcW6pNiBNznaOM72oKhfJIT9nOaLxzXXa1Rxw6
zrADP3EaPo043NJTBjnFbN2TJGewYA34QHoZF+IwU9/dH3N4gUzUE64kU8Th
5cQZHCQn2n8FeF3QQku8C+SPZxxE3j1kniRcbsMy+Ktp0+sM8P+uR+DDM1SX
Qc9Xu8p98F5zby54l6XhNsiXPLvNj/adv1wK/eWunSPs4HO/PJD29Q3WRL9m
ORKLuGV6ONFCdnsy4IH5IbMaQ769lnI7ySmzWoZ5yJPKmbBDmNrrPNr3in4K
+oWb0S/gqfIW50iO3RZx3K/vxfhhblb3UX2S6szWk5b4riZkczLq7fe9m2Sp
L9gJPkEdOL1rMfQMLTAYJj297t7GfVM3ZZoz4RufprlQ30/RZQF/HpH0xb7K
EQ9Rb7cu6YT+V1yPwC98LT3M+A6noRg8/9zxW4iT0dAEF9iHZxB8Mn0pYw4c
nX60huQclZYCn38ZxX4Ucky7bpOcLhZ2EeKT4i+awW+faHjtp/x6Na3/Ca3/
K+6IfWfv85SmuJWZk4E57S2rSMTDrRmOtiR/o/s3xNWe4w3Al0+mRZF/c9Ir
MN/LEmXUHxE+Ibz31VWzw8723leQF8GBQuMkJ3qzsSfhx4rEgSd4RHLj+64f
S+Evya53sE/53KP65BdrtW+wc9M8T8hvT9WMIjlqYfnopw4rq6DP4wc66+m8
YV43sT753GHwkLwb/gMkh204Azzkz5gL4nNL/dpGwjn45cBvjQ+fgn/fzuws
JXzu9gfwY7zFBPj/O6+uIarD08I+bCR7DhU/A2+/yGdbQvpweDuvJ3wPf+gB
wvXz2s5TnVc7wiFPeOFeBv/0MbXAHHuQtQf7Bi1qRh/kcutUJbuJBK/GvSPi
STfw0at++K7Jcn0lvpdge2aTSvgKB9+NmFcf3S1D+P6VSxGHvte8MTdQ2c94
F/PSC8S++RPX5pB/VSR2gVco3TuAfh3e22mCfBwsBo/V5QsDTziZuBPvvMuT
t6IvbPylDH+F5qt40PwkuXEW3kNVr36BX26f9IxQob4svwhxNaZ9DvY8qZqX
Rnb7EyaCPqWe8gN98K9n3Hfwh4Cr+L5laasW+una+z++UT1vDpyBd9tFtozv
dhbZ6vwlfQ5EcmB+nvfTEfm+LzhVnfRvmMxDHTMeZfR3n9qsp7T+fuxavMt8
5hVGnW92+CxHdkuU/4F55sBiH8zHSuSdhYin9S6Tw5zqtK89+EZytfVSWn9v
3Au8/XLuT8TnaT4BH4rbovAjuF83dbyEHYR2dB4lfZL0BoHrD8+GPolaxQtI
H731bqhjCZyesINt9vfV5K+gtBDU+b8JYrBzOOvDIuJ1eibRuHeoHrkAffht
Eito31kjh8Hfujgtgd86ddeY8DXLPJFfgsPm0Efyc42o6hQe43sT75IrLjfa
ER7fZmJC8anIZyNK8RlXkuRB+I8XOS9p332qrvhe5YFHHert9Kh9I3jPVe6A
nWf/57uOe42M7zrk9RnfdTTrm6Hu2Y8MuxBP0LYx+Ay7Bei4ED6zJvci3Y98
MsVwH58VNR1xG7U+No/0yVGSRZ1JMHUBHnOi6Brh2nbnwZMnBeuhj2u5NeYb
EZMsuBcERRbCDj4rfGcQbixngPuFNKsVeIjLR1EO8EaTF7jfdaQw3tfkfT+h
ngxIRYNnWhn+wDt48quWZ/gO5FMW4pb1YCnj/uj+cDXhKhpliFtNl3rEz7LE
Z4qE79l/EHMzgWRhxn0tksuJeM6RAPvHhG/9PABcV7E6BO81PJ/B08p2XIN8
uUdzzAi/d8oDcaJ2zwB1gFtxpwzhtzu5MEeaE7ES+TUxM+YW5p9prYifuwHu
8Hv+uuvSFFcHZNNRh5PXy+O8b638bxJeEMYF/hAwtw72mbb5rSPZZ8A4BfGm
1LEE+Oaqj6Nkzw8qOniX5M4wYbxXCuyeRXiT+TXMAfYGMqNutClfRR2bpRyL
fHEJr4Ufa6PbRSiuHi/UQX7tv1TOmFN9f473ptKKAvCN63lbgRuYnlhG8od0
tNHvPv2YCV76Nn6whPQveyaBOfOD4oeMecW8Cjvqa/mva3DvW9nbgDjR3cIl
Sn65ofkV97gFjesQJwfWamFfhUBpzBvT8jbAPpdifB7SvZh9encJ4esbGfPY
V4778b7QMpGDuv3gWzHuTVd8fi8kObteqCLevsWrgx8mlDTnkT1Dbq3D+6Cp
xzLki9z3VDfiyffnVaJ+ft+1Cnk3c1bXUeIJd0aknmO9nDnqAGtkjBPJ2XFc
B3xgbeoa+PfY1nEPOtdepkDYbcuen+iDPLkLY0if2b0K6MvM7zMRb5MNthfJ
bsPbPyOPeBsZ3/ceCerPpL7Q4lCJe5++13Hw8/7HQlKkj251D+qYL5Mm+La9
wx68vxtEWaA+vx9YgziUVdh6gc4lbz2IvtyocIjBBww3q5CeeVqPoKd9RwP8
y2oVG0C4n5IHeNdcwWzsu5UzMZr0GRhvBQ/cG68K/65b1adL+ssnPr9O+Bvz
EdTPxiXbftC+YlWGmIcs/FgCP7LWep4mOzz4sgfxJvK8Av46zl6XQXH1zYof
cSv9/gdjPr8lu5jOdUQgDPsevHUd+sf785WRnta1o+CrO7dcgH9nPq4En3EP
scQ7b4NPIOw/tjfDFffEvdWoY9bs7VhvYvBFkOrwruUHcC9WHVfA+t3VM1BP
Uj+lgVfLSL+BX64GPJ+J71siTDD384sPgh9NBQ9xEf/U0V6KvD5gKIE+rvGk
t5Ty6+DFLHz3fvYm47v045NWP8luorVd4EUL461xrnFbY3xPnqOzD3xgeO0g
9Clgkt8LfsVvhryTbwqDPg1Hb34lXN9TFny1VDoO+RX50UKN7M/x0Aa8cdt6
MdSxgDKFAtp33/cPsH9PzXzY+UuoAN5BXrmJIz5v/o1hfBcaq4t3kOlH1t0i
vOIUoy+7rGzBO/LTopu4Jzqq2TLq2xM13C9WMt3FvSmXSxN5Pe3daT/wdp35
mA+s5TGEHVjEfHnpvFFjO2FnpYxM6BO2WWYJvosYWQyeYPb0DM41PnZdluRf
fLoHftfrjYKeqnHimYT/OqIOnnaSVRPyradz4/cRdgvr4HfTeQawm33xBN4Z
vTa1Is6F0/Ohv13Xx8+E7x2fQF582yQA++/nzse9ct39ZYjDqLBvqD/Fv3QM
Sc/lc7jBA/+ePoF77p9pMe9oX0vXvbinsHDtQn3W8kutIHu2dA7jHuoXd+k0
4SNLFc6T/AT/gFbCU2eU4P3X11hVn/Ldo9b1DeI/5BjuEWeNuW8TL5q7oHsC
faRpP+xmpp23gfY9WlaHfFR+4I/8+pDIsh3y95ngnXTk+yvomWc+fR7hi1uv
YB61qIAd6x9vPneJ/CX9RBDzpdkeLLDzYNT7PJJ/8tFtzAFGk1ejHi5jW47v
/bgPCWHe+/TlfvSd0z0Za6nPRipJoo9vCXMDru8UuY745B3mEtS9mo+TqBs8
YycdqV9U9icj/iUn3TB/qBnUY6E8qvMexHfCtaGr0HciXrxVIzm/U9XRHxsm
gqBP/5MuvFP/EHJD/Vf+UIP4aeR0D8GcLbAffMyiJBpxstvMSonwtl+W6L9L
WZqBfzHcr0J95ySvJvrON2sj5Pu1rnTM/favaoT+GjcHYf8VW52kKO+Ge01Q
n63E5iLeRHW9xmj9c6vFmBvfjWHMteZ7qW0i+/vbFWIefnO2CfLlxQdrb4rn
lnPN4P/ryrKgv9TipecJL2nOR92IudqOuBrequtGcnoW/QIPV4jbi/o84Bld
R35ZYn4H9yb9yRvAzzG9xe+MHBKWIE7miEvAvx/YJ+cSfj1KHOtnzVeEndna
7bfjdwGNtZBv5u0Kfx2OkPQlfXjzpcHHFlX0oJ+yNAQoEj7ZalFPeH+dIOPe
5/ptgOqkd/Ub2K3/yxX0F+v3f/PIv3FWBXjnul6YhvnVvgHlOxTn2duX4/6S
a8QHvzRm8KaQntbajLncftE6+MW5KwjvXJPi7JC/MDoEfdw09Fwe5dFjZ2bo
2cLyF/1uzvjELrLbNNsv8Fer/DHk9X55uWekp23NIHjgw4pD2Ldz1RHMWzYN
CUF+hYAm7u9PB4uKSU7uB6l+8JyvS7CeY1fmIsJH/9qj3g7xXIN/zVuc3+I7
ebZOvL9UeHiC14l1b8Y9NLjGygr96OYS2N9STfcFyRmfLN9HeMkQB/p+hPIa
I9InVzEDc7w5QuPwb/dAgT3p7zo/DfeCc+oMHpjyvBTfgWzwZUEcXjpxB3b4
/OY86u3cBGOsfyXzBv7Kejhdj+KZbWEF6nNbazLsLMxtO0zrXZ6oI257Tm/H
eeul36NfRHDko34qSF2B/Heeq3zIv5ZG18E/FyzMQTwnm/dpk/zve9LB/wVG
mDEfXmBZZUVyWJ2P7YTdRu3RT0VOrNeg9XVrm8F708drse/8sBRpuo+EjmpA
/vlPYdg34eZ3McI9G7zQB0XaRuBfhyJjLqozfPFfwd9mPstG/o7WXptF+Awv
Rp56S8nDbjMn5uOdWjnQHevr/nZhX3Wny2fpXJtFzYArbd2NfQdl5qWT/n25
ouC3Qe9igU/cXpGGdz21cfQdg5sewHWNveMID/nSgLzOKLgGO2eFTCSQv5h3
DcH+428roT9rkfdVkn+0gBvzXsEnjHdqpbuX8Pugq5ot8GPQ4fuMuQHbxpUk
RzWnCO9Qy/5kQ77FVX38rsFFrgB1QEJuOvogeykrP34/oiWFvlma+xr3nYQ2
1layZ8khYfT3nzJmsJszkyHefXrZOTDvOtM1iDhUm0yfS/ZpuHwX9X8yOQD4
+F/mAPBtsT3gM57v06C/0ZI0zAOjTRh8mDtUBbjMYiZJ3Me7gtD3bTUEkRdK
st8M8Z1/wwS+h3Hfl415sl9A0SLCuQtCMU9ePdKB/HrGlZlG+vDFMgE/GMfg
e7atMT9o35gtDdDn2Lgn4s3AyUIN950vXehrGgvuwj658js20fpDy/ag/shN
hDC+B2Dbgfn8rMMOeKdw4i2GnbXsRobw3Wl0IfhDB/9Vxncaq7muE/6hfT/q
LddyxncFqWY++H3i56XXwSdv6zK+o+5P0D1LdjZyOQL//v3jgzzq775ZSvaR
LDZGv77jYMF4X2N+Xk52vtESBn544lQE+lGbRepesoPG/Uq8O5wXYUY9YUvW
8iI8f4XgQdTPr//hS95t+P7NfnEO5k567Y2Mej744ArFg/BGNujTdXAb43vO
BR02VH9Yk2RxH2Fmbkc9n/nC3ormD4PFwfid12OFFTjX7x51d7yfWrxB3XCc
9hl+CV1xH+8gWhs3wC/81UnAha1FDxLew5uC+Kzq6AAeZ2J5kexvtfM0eKyN
hjHs6aF1A99hzptgvJ8azGTMLX8yn/9EOOcaWeRjQlUx5ITXWOQS7vbzFOKN
/ycjPi+0TPyhfU/k+0DP+P98JxbcnbCVcNfTZ+H3r5HTgUveWBNMcj7lvMR6
8yR36JM2am9OeNZJVuijmZIN+zNr/jEgOZuqC1Cv/A3mw/5GxlvCCL/uqow6
Ux93Gnn9Y1FhLsXn5mlsqDPC7d8Qt/718nhvaox6jbidbrGB8TsOl1/VtH5g
swrqQHZwG/wlzv52PulTGc6J94iQ/t2wz+vqYF9aHzhSgnMpLGb8XuOrnS3e
Tay3hSOeL+Tr4lxczIV/aH1Ldz7jfvroCtYHL27/Rfq8kvBCvTKf/w3zfGWH
Xn/MNySawZMPr/S6SbhPyWMNzIVmO6wB71q7CvE8I2X0AOm58aMv+nKqxR3U
nz2ZYsCPvwvHfXPdxhTYLWB1mDHpOSZyFXPs6HNMjO+gHOaH0X3WRJIP8Skq
/B288TLnDn1av7N7BfJiGnM45MTq5yQTLiAfgfesoAuM3yMbv5BPoDlqmWgL
8legkDEn/zrt+zviveI/zyMOS7LuQ3999zc1tL72NTvuKVxWvMij5SUp2aT/
1QEz8OrwgW7wuigeTzayg+mDBeCxCW4f4Pe6IJ1+Wv/ugjD4If/ES6zfZbW/
FL+LjBjEfbaqei7wgN6j2qT/tBPx4G/Fy6uhj66+Ht6LF8t4II9mr1bFuX4k
ZCWRv4SdO+B3mwRHrH+uqMuN91n13+j7l+PmI277ZFZ4Eg9n4uaEfWYXboHf
Iz9dG6R42LFFBPznucB5xu8OzH1n4P26eTHyS2a8jvG+n84dSrjV5mjG92Pu
G6HPp7gcC/z+Yo4w1s/ZZgEetXbOdkuSL9WnA/s8ZXNHf7Scv9eO5Oz3eop5
4HK3M7Dzd3UOA8IPpWyHnZ+e2AP75PY+w3f+G8/boe6t2CuJeAh8MkuT6urp
63WQ7yWgh/V5FyXxfvesnh2/563eeB73ppz7A/jdQRPvJO5Zp5r2AVd5w5JN
9pyhMge/I3u8ZRrm6ilnHiNfvh4exHeq13acBP8J0T7/gfT5VvgZ36mmVY4i
fz81qYnQvCI31AT2V6kawHvf/r4sVeK3D91ywZMrOjVwr+Q/v0eZ6r/6K2Pc
m87JFKMOl1bfHaI6L/8ruIlwk8eM+ecrV5E+youNxQXoI1fiDqGOKS4atCa7
yQXcR78zWmEIP5pw+K5DPJxgfC+RfvEB7qfu+/5uId7el52C90fPF7fwu0uJ
dY9sSU/Zcfch8Bn3NtwXHt33CiTeZdWRDf7ww8gX/tqT/hI8nE/oE+rnYnVF
xElS+XP83uFPGzf6TrzEY+ij8YgP9pyIdcT6417u6LOiaS4/CM8uvIb3l3c9
Z1A3chqFmwjP+7IS+Stleg52UON8j+/qH3Fm4jsEzgdViPPxV2rshPcev4e8
SzwijPppMXsMPP9NRRj426OXYYiTZ5r9qG+bvdXh9/ZyFvhdXPucEuZd057h
Hf9FvjLqhnO/Kn7XcyxfEPffO+5Hke/TJWLwe3Z/nUWYO/lk+cMvqsWr8b3E
B11L5CnH2RfYV9Mldg7t65kZgLhVH7sN+yhcCcfc5kiZNOJnqMQN9hwc4j9G
+ZtbxIP7l7N6GOzWae3Ngu/ldH8CN88rh5yEBVx472bey3hnaV7mDrudvrgT
efq3lBV88vKfnTiXiU1MA+mTEfAedaZ2NeN+PXibHX1QM2g/+rtr9lnk+w4D
0XOEN9d+Rz3pcf4JO5j5Tq8m+Sut1dHXTk5uBq9766eH75qEo06BB45xuSPv
TK/GnaJ9xVNj4a//B4cZEOc=
     "]], {}, {{}, {}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{346.3719137014861, 178.6600167678815},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{1.5174634381376213`, -2.922666903508107, -0.7780249899931762},
  ViewVertical->{0.10594994272098462`, -0.20406184639232036`, 
   0.9732077745704548}]], "Output",
 CellChangeTimes->{3.877061424022069*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"8691735f-c45e-4fc1-8123-fb3bfbdb76ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"netT2", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net2", ",", "dataT", ",", "All", ",", 
     RowBox[{"ValidationSet", "->", "dataV"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"netT2", "[", "\"\<LossPlot\>\"", "]"}], "\n", 
 RowBox[{"netT2", "[", "\"\<RoundMeasurements\>\"", "]"}], "\n", 
 RowBox[{"netF2", "=", 
  RowBox[{"netT2", "[", "\"\<TrainedNet\>\"", "]"}]}], "\n", 
 RowBox[{"netT2", "[", "\"\<TotalTrainingTime\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.8770614359350395`*^9, 3.877061435936036*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"79559dd3-4cae-46f1-bbba-e2a14cc6a289"],

Cell[BoxData[
 TemplateBox[{
   GridBox[{{"", 
      ItemBox["\"rounds\"", DefaultBaseStyle -> "LabeledLabel"]}, {
      RotationBox[
       ItemBox["\"loss\"", DefaultBaseStyle -> "LabeledLabel"], BoxRotation -> 
       1.5708], 
      GraphicsBox[{
        AbsoluteThickness[1.25], {{
          Hue[0.083, 1., 1.], 
          LineBox[CompressedData["
1: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
mTAx1A==
           "]]}, {}}, {{
          Hue[0.59, 0.7, 0.75], 
          LineBox[CompressedData["
1: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

           "]]}, {}}}, Prolog -> {{
          InsetBox[
           FormBox["500", TraditionalForm], 
           Offset[{-2, -2}, {500., 1.7600000000000002`}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["1000", TraditionalForm], 
           Offset[{-2, -2}, {1000., 1.7600000000000002`}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["1500", TraditionalForm], 
           Offset[{-2, -2}, {1500., 1.7600000000000002`}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["2000", TraditionalForm], 
           Offset[{-2, -2}, {2000., 1.7600000000000002`}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["2500", TraditionalForm], 
           Offset[{-2, -2}, {2500., 1.7600000000000002`}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["3000", TraditionalForm], 
           Offset[{-2, -2}, {3000., 1.7600000000000002`}], 
           ImageScaled[{1., 1.}]]}, {
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-4\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -4.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-3\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -3.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-2\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -2.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -1.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox["\"1\"", TraditionalForm], 
           Offset[{3, 0}, {0, 0.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox["\"10\"", TraditionalForm], 
           Offset[{3, 0}, {0, 1.}], 
           ImageScaled[{0, 0.}]]}}, 
       PlotRange -> {{0, 2840.0312499999995`}, {-4.359999999999999, 
         1.7600000000000002`}}, ImageSize -> {302, 182.}, 
       GridLines -> {{500., 1000., 1500., 2000., 2500., 3000.}, {{-5., 
           GrayLevel[0.3001]}, {-4., 
           GrayLevel[0.3001]}, {-3., 
           GrayLevel[0.3001]}, {-2., 
           GrayLevel[0.3001]}, {-1., 
           GrayLevel[0.3001]}, {0., 
           GrayLevel[0.3001]}, {1., 
           GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, AspectRatio -> 
       Full, BaseStyle -> {
        FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
         ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, PlotRangePadding -> 
       None, PlotRangeClipping -> True, Background -> GrayLevel[1], 
       FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> None]}},
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    GridBoxSpacings -> {"Columns" -> {{0.5}}}, 
    BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]}], 
   TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
    DisplayFunction -> (StyleBox[
      StyleBox[
       PaneBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
              GridBoxAlignment -> {
               "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
              AutoDelete -> False, 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], 
             "Grid"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], "Grid"], 
        Alignment -> Left, AppearanceElements -> None, 
        ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"], 
       LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Arial"}, 
      Background -> Automatic, StripOnInput -> False]& ), 
    InterpretationFunction :> (RowBox[{"LineLegend", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             
             TemplateBox[<|"color" -> Hue[0.59, 0.7, 0.75]|>, 
              "HueColorSwatchTemplate"], ",", 
             
             TemplateBox[<|"color" -> Hue[0.083, 1., 1.]|>, 
              "HueColorSwatchTemplate"]}], "}"}], ",", 
         RowBox[{"{", 
           RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8770614599571557`*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"e90e61ae-37e5-475c-9be2-fdc773532729"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.0006097293364890066`"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8770614599676266`*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"3372c4c8-5e18-4f10-8754-0cacf29645d5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{12, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{12}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{12, 12}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{12}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {12}, "$OutputSize" -> 12, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 12}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 12, "$InputDimensions" -> {12}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{12}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 12\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877061459974126*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"aea71c6f-ccb3-4463-9e93-b03518f5c4f9"],

Cell[BoxData["23.3535873`"], "Output",
 CellChangeTimes->{3.8770614599826093`*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"e92bb96d-41ed-4356-a062-d798abe06054"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot3D", "[", 
  RowBox[{"Cases", "[", 
   RowBox[{
    RowBox[{"Batch", "@", "1000"}], ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"a_", "->", "b_"}], ")"}], ":>", 
     RowBox[{"Append", "[", 
      RowBox[{"a", ",", 
       RowBox[{"netF2", "@", "a"}]}], "]"}]}], ",", "All"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877061445095032*^9, 3.877061445096029*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"9627bc3f-849e-4abc-8b5a-a73f335aaffc"],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJydXX14nEW136T52DZpSEtatm1I022BFgpERG2RZlcsUrlciMjFCpUbESUX
8JqrQUrbbLZQpNCCQaoWKRoBsWrlqdzyGLFJVkAsykfUUiq2JUCQIEUiDSWk
3c11z5nfZObsnvta54++z56dPTNz5nyf86azLv/ShZ8vDIVC20pCoXEhjHCc
n3Oyz9TqgzNSIW9E6Pv+8RHA4+63J53ufzbfJy8qDZn5teb7wdg//ulrHJ0l
5tO6tR/IzA7ADzw0P7428z7zuQrzCf63srCA0/zGO94+2uCPGnglPfdl5nmf
zXlTnw5h/3M8/PeOniD2L+kD/LR+fFPmJPf3OEd8TUjOr6ZnJHOq99l83zcp
DTjoQPtNbspgP9o9Ag+t37g3A/oHwum7xzIz3M8YyRfPf6zn/98PBt17/Evh
wR5nfxbeP3pcwHwM2ldyebjanAvn5WfjksaY83v7/MODPzKfo3HnmXzS8g/u
hfaVXDE8M5Vz2rznpWdyQ869ED8kI/beK71npP+mHh8u+S3swuMnTgynnP2F
DB065o/WiXX5HDNHZ8f9+Rrf0vqp35RUGvyQF/N86NSYj4fW6SsblXTj894W
Bp5qd37qwvTJ5nPUnV97SQZw0IHO3XFp61vivqQczXHnhxpHIb/YD/PPnVeC
D4CfRuOSZ45y5+H7vp3HgM7afO1+B739XpcB/wDO+vD02Zafze/4Hm8uqkq5
5zHw2vZCeS+8ifOGjxbn5eHoYQU/6Mb03GvpH/Lgs6eBDkHnlXSLxJ1z9F2S
o09YL12ZqXPn2fX3W7yaPtf2WenNn/OjUXHvtH68rgDzgT9Kz/lvHpVyP+Pc
b9h9znHnJ/+aOQ3rmSH1laaXQB/C0/FS+SnueUK5chdx4cnn09CTmn4Omk/r
OnZE27+mZ4CH5tfGMjPdz6FcfsC5iA7JY8OenqW9hzy9hPlsR+4ODwo9QKOj
f8x/cH/n8IPG/xpfaX4FhkYfKUeDrr6ML0zPSvlwaY/An3S+5O3DRwfM1+5X
23+1Oz8VGbPL7rqNicPwE4DfTMoc4+K1+H+beb83L5Tj72lyreqfkLNfx75j
P+wvTUpD/0S98435S5oewL0TnsaNg6Up9/e5ekmTU6zL/HCvtbO17ve1P8pI
u8z0v8T6mRqeI9Xn2D/L192ZHDz0XLztrpi/H+knaHpe279m3zU7pfEzhvT/
o3HnmcdPk/Zd0yfAI/0N3C/HBZ8dlfpQ+kUaP2BI/YB9EZ36kiXw8z37llo+
EfixTxmPaH6Oth9PnyXXZaQ+ketautE43vfzQrn8HHTv0n5p9gL3yP7eq+9/
KyCOAH72k+8rkXqY9unYZU3/YD+Ep29XWsoj/S5eY/lH05+aPdXmq/FR3DmH
E3docas9V3YkFxb4fkYuXNOfWjxu9T/tf2Fa2nc6r+PfRt3fOfIFuNTP2n1V
ut+nbhk6JuXvk8+zN2PjRO9cY3G0pv+1OBdD2h2NP3EuqbeD4hdJnyB9S79z
5E7T55r/o/khQXGrpPOgZzdWFYI+Ufd7hw5a3KrFv5o/g0HrNH4oFE3559Xi
dKm3cS6+/11p6W/wfr88wfqNGIR/zJ8Jkgu+x5smSD9Tyq+mxzQ/WbuvqIvH
4SvNXmh2QbObWhxa7cL7NqRlfoPp8drTpQKP1MOaPgGd6dnxzbTMV2j3JeFY
l+ORHzweJL/V7vzaSy3/a/FC1J3v2GvAaThxina/Gt20+FSLrzG0PKTUw5q9
0OIR4JFxsYZf1dsh5/vUwsJagV/Tk9JuHqlesoPwjMm15q+CHrzObl/PWvwv
loJemp7R9HxQHoDPkXvv0l/V/DdND2txkGZ/Nfpo+TFN72l5MM1PDvIz2V7P
yqkvRLNPx25qcSvgrGfuzokf/1k7rtlfTW9o+k3Ln2h8pd2j5udrfmmQ36Wt
K+83yH8geKqzCvflDSevrtlZO7KfHfnV/HlNP2hxNIb0H4LqKVpcw/d48ixZ
P5J5Dy3fghHNfnb8H22+tk+NH1T6WNShvHpS+i2aHVf9rriDL0++Tvp1mh3X
8hKefU59bQT8jKH5+Tn7CTl4HPprcZ9GBwzGf3EY/KbFZZp8af6z5h9iyLxK
ULys0ZlG6mOjM8V8zc+n4dgFzd5p+SvNX9LimqC8kxYHSf7U7EXUhfdtzsn/
a3pJ+pPafjT6a367Zke0fQbln2W87I08dU8pd2p+z92Xk2fW6BzkDxCePPkW
qf81uY7G3XO8kRtf0xjLuwb5LVrdkP2W49+D/xaUT9D2I/Mb/2reT8tDSv0f
VFeV+9H8NE2fa3UKre6j8ad2Ls1P1vIMUXddJ47T8i1BfpdW96GRXPiM5w+F
cu2117eSev8U6y+58/PQk87h+L2aftDqoZrfEhSnaH6grC9ocZMddK5c/Sn5
SqOn5rdrcRzOxfmNT+bkgaU8avTU4rsgefxn7Zd271EX7uh5Tf9o8zU50vL5
wJOjr0IO3Inrg+wL4cvj39LvOiI59SzJn8DPch2fKuvvNJz8hsa3QXVP3s/M
Udl/Iu2X5s8EybvkE03/RN35efhT6j21PmiPGsrbp0fD8fewrtST2rqaHtD8
By0u0/AH3bv0S4PqpFr9Rep5rY6g9UdF3adTx9T6Q4L6r7S+HcLv+FcafTQ/
5EjxaPpTkyPN39Doqc3X/OSgfJSWh+F1tqfRPxPUJyPzA56f6NSjtTx5NO6c
w6kzavoB87W8KH2fp06k2XGZN9biSgyZT9byk0H9gVKPaXyi3aM3nHhE85eC
/Cjtvuhcefpspb7S/BlNrqMufkcPBOUDZd5MkxdV3kPufsbqI1r8otmjoH5g
tY6WHc59aX1lQf1jMu+k+TlBdQHp/2h6ICgPIOU3qG+Nns69a/mBoHqB9IuC
/HxJH63ep9WhNL0RpP+1+hSNPPIr7bWW19LifU3eNf/NiwOcvmUMmTcLioOk
nxDU5yDlNEgupB6Ixp3fufmouDM/T56B9zPGh5r/H+Rvy/gR+Gk4dU9NH2p6
NajPUNpfrX9e249mj7T3EY7UDwzKS0s+1+rs2v41flDzz+66Lp/Hnfl58nKy
Loah9enJ+m9Q/o3jjkZL58A+Z9pnLp1pOHGK5ndp51X7zEMOHqdeEFQ3kfGv
dr/Yv/b+jpQXDFlH0PShlj/HiGY/O3F3UL+HrHNpfpqGR6vLaPLrjTz1QWmv
Nf/Bjiw8T34ppy865ODL8/6RVk+R8qLZZc3+anlRVR+6cCdu1eZrfK7FlRof
avnhoPyt9Cu84dyv5odHzVPmPbS8H4a8Ly3Pr9WdNb83qM+KzzWWd1LjNYs7
5PGnZse1fWryHvXWH6OblkeNut87/TNB9Titb0Hr/8mpw4acdRz9puHR6qdB
+R+ZTz7Sfpsjretp7xdo9ZSg+FTLX9H+HbuGIeP3ID9H6oegfKCWh5R2XKOP
N/LoAWn37SD8Y/ISFNfQ+Cfe48PQ+v+1eEfGZUF1Xq0eocV3ml8k/RzNXgf1
O2n6OZr97PgJQX2qkp7aPjV9qPJJ3Fk/X58VIR2rmwTZd+mnafGXZgeD+n61
992kndX8N82uafUUrY8rqL6T4x+aZzT7dPRJUJ6W5TG3Pk54nHhE44egfKyk
j6aXND8kqK9A6nMMqQeC8v/SHwiqj8u4LOric+J6bV3NH9DyMEF2itZ3/C4N
D/Yp474j7d/Q/AdNvjQ/OahvXHs/S8bRwC/fi9H8Rk2vavpNy5Nr9TKt3hFU
J5J6TKNbkH+i5e2lndLyXRhS32r5c03vqfcScvHkxms0HL9C61OKuvicfEtQ
/4nMA2j1FDWvYp5ankTWfYLeC5NxN4akv5Z/0OqwGr8F1anV91vFfE0uNDnV
+E3N58QdPHniKak3NL9Co1vUne/wT1C8r+W3pZ8fVC+Q8ZH2HkdQH6/sEw7K
k9Nw5EuTl6D6muzD1OyUZmej3nnH8tuaf6v5S6odcfE4cRmGlheV+wnqY9Tu
XcvvyXvEurJPQ/O7gt7DkvGOFrdqcVZQPCLlXYuPNPuoxbMaX2n1l6i7vlPX
C6qTynq9pj+D4mip5zU+1PRAUL+c9Me0vKsWb2JIO4L9yzyAFl8caTyr5XMw
ZL7oX41f+Bxj/K/VuTS+1fhfm6/lFdW41TylHtbkRaOnlu/S6lxB69LI01+n
4eEx5j9r9jooH6W9VyL9Cs3vDeoLMl/avpSguEPqSWv3aYy9lxcU12v8pvVj
a/l/6WdqccSR0k2LNzV7qtnfoHr3P5s3U/tLPfy5fqxWp8jpiw6564/1t2j3
otFHi1+icQdfnjo+fZ+nPiv1SZDfK+215odoelvTn5o90vznf/X9LKl/guo+
hN/JWx5p3S0oHqeR5+9syHsP6m/R+h9kv0pQ3JdjH9195slX5PSRmiHpr9UT
NT8qiJ4ybtLmR9195ekn4fPs9+PDUC5faf5zUL5X6kmNboF9p3RIp58/5Own
T11G2w+NPHZW+v9BdQQeY3YtGnfWz/Nem9R7Wpyi6XnNXgfpSa0vguPlsb7E
oPhO61uW9NH0oeYnB/Xta3ZH+kUaHaLufMev1vhTm6/pfy0fot0X8NPIk9+Q
fIsh8+dRd36ev3Mr/V61n8cMmfcL0sNaHlXqVexT+zshvEZuH6yMR4LiR+nP
YOT007rrO3yl+V2anAb1m8l7CeqPpd+5+V7vHLl+vvb+V05fvRky3tT4JCje
p5GnT0nakSB/UsqLFj9q/n+QPPLItdea/dXiBbmu1r+q2V8tvtD8Iq1eo+mH
oL53mYcMit9lfljzn4PqtlIPaPWRoH4G6Udp/cmaXGj5dqW+kIrGneeOJ7sh
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
Tfa3c/196T/i3P8DMVhEsQ==
    "], {{
      {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
ymdbZ+dS+dLQZJ0kfTUb/mHUcWmOw6Vrmerr7qgLfbPHS1/VxjYFsloxof3W
e+GvJ+cT+cM88MLSukva90Q9qFjNPq9mdEeC12XrrYPw2fBtWhtYjf4o5b3S
dU26qX82qj8AXjX0xkDl1cgJ8nntreL9Ys0huzbr/dJP0rsXZN9JBzJmUbLe
+qXqQzZK0w5OXlMf+DSwfsSRcsjIbN0n/bcW/l74zILkGNEdcF32/Uvxeyft
itL683/J2mRYdj7XXXUK2Cv7nvmW9ia5Rijeu8Ze6e6zJLnu6LvyW61XOrwi
amvLbH0gnbAZ7J181x6FfVD2HUlnpFylnDU6e4z8eUbkMdW7vsl92bVO7a3u
PrqPnMAzr2C7OFt/S4crJ0tXSMtJ06keqy7rrjcu+w6mnK99Um1SjWqE/ff0
q2THl3K4crnOVzp2FHxwtkbXnkjLKqftBldn61nZ3kyuRRPDd6SppJd7hQ/L
l3XHVy2T/tJ43e/vZ/zS0CLyt95xRkcibyu3r02+E0kDLs4+O/0v4cfwPtn3
H9135FOKo7bw86IGaf+XZN9jq8RapaX/Ujpva59XJetJ3d03STtk5zzV65bJ
2l4Bp/8VXAtdmOxj4l8n353lD/IL3ZtUL5Ymx4XiZlHkPOkE6YXN2XVXzz4d
56vaLl2ne02/5Lu/7nePJceCYmN99h1PcSHbN1qU9vPse4z+b/B+aU0v39Pv
E0rrK9XajlFfVFullXXXkNZdnq2VpZcUb3q/7qdbs/dAeyF/0/94VoK3Z983
VL+Ue5QflCekl6S11ifXM+V83VWljaV/pIMqoqbId7dn6z/lLuUl3fu3ZGtU
5UzlTsW54v245HnoWb1jUKxxU7IvyieV1/4PoyEurw==
           "]], Polygon3DBox[CompressedData["
1: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
0Q==
           "]], Polygon3DBox[CompressedData["
1:eJwtlnt8T2Ucx8+2cw6KXKY2NZcplxkht5oYoSUWZm7LyzS5NNpsoVznUllu
FZriNXPZa4uNDal0cancXpWKolIhoSIbKzKb9f70PH+8f7/P9/N8zznPeS7f
54QnpcalBDqOkwke5PmOczHIceoS7IY90Bt6QSfaElzHuYKujT6J7sX/COIE
iIbusAG+pa0zbSvQrbnvHOJd4OM5kI2exH8r2iNhIfow3iFYBBV438EN+hJM
XB+akfMu3k7IQX+AV43/ub5pV95D8DvtqyAL5tHm4zVCDwBu51zm51O822h7
EW8BTECvwpuHTkHXRoejM+EV5eB9hldT18BLMAp/rGveTe94D/FK/EA9B07g
30GcDOnof+2z9Mw5MBvG2fH+Gj0DpsMYm5+MvgyD0a/B69CUtn90HXo+JPDc
NOKn8P/mPmUQhv8TXjBEBZBPvA08ckrxhqHzIB/64E3CmwhD0d3xHkE/iX4L
/SYct+9RA3ajb/KMCmhC/CO5dfFmwiz1B2+IHctbtI3X2MJ7cAlvDUylz/M9
05fhxCVwGdK4rj9eP+iKXoBXjp6MzkVvhPFwDS/Rtqejn4Mp8DM0xusLj0FP
cqLAw/dhLt4N/hdprOlDDvGr6jfxA+StQ69Xv3m343hr8doSd7FrTmtvEAyE
kfA0bavIqUKvRl+E6gHm3ZbBUs0LPKsx1fzYa2ahC9CFkI5uhnda74Ge4pv3
aIQ3UXsEBvpmL5QHmf6pn6l4U2ETOoj/afC8b9aC1kRH/Bh4XPOD/6vmUnMK
q+EY/lXuNxKdgk6F+uhguFPjZvfR91BD44S3EZ0Lb6PLNZYwCq7ilWndoouh
CGaQ0wVCtG9pexi6aV6hA/3bq35DGHElvIFeASs1x1x3Dq8durfWKDTAG27X
50XdAzpCD9+0K6/Szts3UILeh/eJ9gk5kRCN7gGb7Zi10xiip0AknOW6+/Fq
ab1DSzijWgbXud8tzR3zG0XchrxY4v5wL5zCy4Dl6AjVDt6xE/HL5B0gPggT
7Npto5oITezYdiPnArqL6ouey7U9iX+BcOJACIAO5FWHj9EOVNGn2cSdyWul
OoTOQa+Dv7RO7VxoTqZrnPB6uqYeqC7sJd6heeF2o/H+hHeI88m9hr4ODW0t
uQSPau3R9j56F9TyTZ3foFpM/CEchkOwxTNrroi2fHSeYtvP5b6Zo1L6f4H4
vOYez4Ut6AIohBeIi8jbCktgg+oH3hr0l+hzUErfizU/dp9l074Nvd0zY/UR
3lJYBhm+qROqF6NVw1WLPHN+aL3/4ZkzQ2fHTD3TNTVCteJBW4vjiTNhISRp
z2mO0Tshi7xpxDEaK4i258gP6LbKRU+DFnZd3Q0NoK8d28bkjEOPhTBbe37z
zNmqM7a+3bMNaYtAt4QI9BW8o+hQCJFv991JdIBvxq2F+kJcR+8Ag/VMW3va
2/UyyO4P7ZNY2pqrf+hQ1S/Wyz7iprqH1jHP7MP7JqrOkbvE7tn2Gmt0PFRT
PYTFrjnP10I2LKZtKF6cZ86UPegv4HONrV0HW9FfwRFYpL74Zg41lxmuqePh
eEfRx6C13b9jIAk2eeb7JM43tU01rp89w2/3zd5qov6pD1CMd5f9VjhBHAtP
eOZ8q4eXDM/AAN/UuiTVPSiDXLz9nqkNqhFnoA5eof1GWUnbATiotWzX3U27
T7RfCvBO4Z12zUdYPd/U7LOuObd0fmkfqf81te9gv2u+RdZ7/5cCZwQ/XbWH
bT3Nck2e8reT19s376n3rXLNM0JgMjoNEl1Tx1XfVecj7dkSyH+ona8S1Uet
ZdUvu+7q2bUUb9eT6qHqYnPXnGlHtFe1RzzzzbeDnBjffEcOwRsGw+G8XTuq
8w3s3tiMrsCrhPtsjf0Ps/tSiA==
           "]]}],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
      {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0L0vQ2EUB+BDESEmEU3F0EmrTFiIz6SjDlaRIBbiYyMx2UiMxEbC1JFB
woaFpv9JBzFVBxLPm0j6y3POuffc997mNw9W9tsiYkMamYgtnnZEnEleXWS6
/sGaPKhb7uthVX/Obe5IWd10rZuH+iNZttzintlJp56TnJBx9SILfOaT9Lp/
lQtmdd7pK2kv7ZjNsI8ljspQOotXfHTOGr/ZlCW7WQ6aXfJCdtXrnGWFU3zj
q1TVn97fL371P3LsGTlmzUack2OBRTGOW9Y5x3kpqV84ba+f7fqx9K0yrL7n
F695I+/qAXb9//9/5dkrhA==
        "]]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1299, 1541, 1680, 1445, 1613, 1517, 1657, 1373, 1566, 1492, 
        1338, 1587, 1502, 1712, 1482, 1084, 1427, 1542, 1685, 1450, 1661, 
        1544, 1663, 1389, 1636, 1403, 1336, 1586, 1494, 1600, 1352, 1035, 
        1371}], Line3DBox[{1301, 1109, 1400, 1634, 1518, 1570, 1333, 1407, 
        1701, 1469, 1620, 1532, 1671, 1433, 1135, 1385, 1149, 1423, 1615, 
        1498, 1626, 1375, 1314, 1645, 1415, 1582, 1505, 1583, 1474, 1001, 
        1408}], Line3DBox[{1319, 1051, 1476, 1706, 1503, 1581, 1359, 1546, 
        1617, 1302, 1683, 1489, 1666, 1448, 1103, 1459, 1460, 1713, 1484, 
        1714, 1533, 1639, 1392, 1629, 1318, 1473, 1703, 1500, 1633, 1413, 
        1643, 1399, 1398}], 
       Line3DBox[{1321, 1490, 1580, 1364, 1329, 1650, 1652, 1422, 1602, 1527, 
        1458, 1241, 1562, 1379, 1618, 1551, 1370, 1565, 1491, 1391, 1547, 
        1667, 1669, 1304, 1499, 1591, 1341, 1028, 1578, 1486, 1715, 1536, 
        1323}], Line3DBox[{1322, 1644, 1414, 1485, 1029, 1592, 1340, 1317, 
        1576, 1303, 1668, 1548, 1611, 1390, 1628, 1300, 1369, 1603, 1449, 
        1378, 1242, 1692, 1457, 1693, 1377, 1421, 1651, 1504, 1606, 1363, 
        1298, 1577, 1320}], 
       Line3DBox[{1325, 1597, 1496, 1444, 1538, 1653, 1655, 1348, 1521, 1607, 
        1368, 1116, 1610, 1382, 1508, 1694, 1462, 1543, 1708, 1479, 1709, 
        1245, 1447, 1682, 1334, 1440, 1677, 1678, 1510, 1306, 1567, 1516, 
        1465}], Line3DBox[{1331, 1515, 1622, 1387, 1623, 1069, 1416, 1313, 
        1599, 1350, 1146, 1641, 1383, 1534, 1640, 1411, 1528, 1635, 1401, 
        1571, 1203, 1470, 1297, 1638, 1405, 1005, 1608, 1326, 1519, 1675, 
        1437}], Line3DBox[{1339, 1308, 1716, 1487, 1568, 1545, 1672, 1434, 
        1045, 1419, 1648, 1526, 1670, 1432, 1588, 1525, 1393, 1354, 1619, 
        1380, 1616, 1501, 1601, 1376, 1189, 1426, 1605, 1520, 1649, 1328, 
        1593, 1514, 1441}], 
       Line3DBox[{1343, 1590, 1549, 1467, 1207, 1612, 1361, 1687, 1524, 1452, 
        1686, 1075, 1356, 1530, 1631, 1396, 1397, 1710, 1481, 1711, 1553, 
        1690, 1455, 1691, 1537, 1296, 1556, 1512, 1664, 1431, 1310, 1558, 
        1358}], Line3DBox[{1345, 1511, 1596, 1330, 1584, 1507, 1569, 1311, 
        1233, 1429, 1627, 1550, 1684, 1315, 1681, 1463, 1410, 1535, 1705, 
        1475, 1704, 1522, 1559, 1425, 1034, 1366, 1656, 1540, 1674, 1436, 
        1673, 1435, 1456}], 
       Line3DBox[{1357, 1495, 1665, 1430, 1513, 1557, 1555, 1295, 1575, 1420, 
        1454, 1689, 1688, 1453, 1480, 1531, 1632, 1395, 1394, 1595, 1355, 
        1563, 1074, 1451, 1660, 1372, 1360, 1208, 1697, 1466, 1698, 1442, 
        1342}], Line3DBox[{64, 1121, 15, 1185, 1184, 122, 1183, 106, 1166, 
        1165, 82, 1150, 44, 1287, 414, 1289, 1288, 380, 1278, 65, 1200, 1199, 
        144, 1269, 314}], 
       Line3DBox[{1438, 1362, 1560, 1327, 1004, 1637, 1406, 1488, 1702, 1471, 
        1659, 1204, 1402, 1386, 1642, 1412, 1409, 1621, 1384, 1145, 1625, 
        1351, 1497, 1646, 1417, 1572, 1070, 1388, 1346, 1624, 1332}], 
       Line3DBox[{1464, 1696, 1353, 1305, 1561, 1509, 1676, 1439, 1662, 1506, 
        1446, 1585, 1244, 1478, 1428, 1695, 1461, 1335, 1564, 1381, 1117, 
        1609, 1367, 1365, 1589, 1347, 1654, 1539, 1579, 1443, 1679, 1312, 
        1324}], Line3DBox[{1472, 1349, 1598, 1424, 1658, 1523, 1700, 1468, 
        1699, 1552, 1477, 1707, 1554, 1604, 1337, 1085, 1307, 1374, 1630, 
        1344, 1594, 1529, 1574, 1316, 1614, 1404, 1418, 1647, 1493, 1573, 
        1309, 1098, 1483}]}, 
      {GrayLevel[0.2], 
       Line3DBox[{1002, 1109, 1232, 1560, 1110, 1675, 1253, 1229, 1673, 1115, 
        1597, 1033, 1679, 1237, 1680, 1201, 1269, 1089, 1598, 1106, 1590, 
        1236, 1698, 1264, 1593, 1083, 1113, 1580, 1009, 1577, 1058, 1051, 
        1050}], Line3DBox[{1006, 1219, 1617, 1256, 1693, 1133, 1602, 1099, 
        1189, 1206, 1660, 1124, 1687, 1265, 1699, 1249, 1278, 1015, 1566, 
        1078, 1589, 1114, 1607, 1077, 1034, 1202, 1638, 1003, 1702, 1268, 
        1701, 1170, 1065}], 
       Line3DBox[{1014, 1040, 1645, 1182, 1646, 1039, 1599, 1091, 1233, 1240, 
        1682, 1066, 1662, 1211, 1636, 1164, 1183, 1167, 1614, 1252, 1691, 
        1186, 1575, 1226, 1045, 1080, 1591, 1047, 1576, 1153, 1629, 1049, 
        1048}], Line3DBox[{10, 1385, 75, 1412, 1411, 117, 1410, 264, 1462, 
        1461, 157, 1427, 44, 1307, 92, 1396, 1395, 90, 1393, 9, 1370, 1369, 
        248, 1459, 61}], 
       Line3DBox[{1016, 1135, 1161, 1642, 1138, 1635, 1275, 1705, 1178, 1259, 
        1694, 1071, 1564, 1090, 1084, 1287, 1085, 1156, 1631, 1155, 1595, 
        1076, 1095, 1619, 1134, 1618, 1243, 1603, 1257, 1103, 1102}], 
       Line3DBox[{1120, 1258, 1713, 1291, 1628, 1010, 1565, 1046, 1588, 1126, 
        1154, 1632, 1157, 1710, 1284, 1630, 1125, 1150, 1209, 1685, 1246, 
        1695, 1210, 1708, 1281, 1681, 1260, 1179, 1640, 1175, 1621, 1013, 
        1149, 1192}], 
       Line3DBox[{1130, 1042, 1626, 1148, 1625, 1146, 1177, 1627, 1239, 1283, 
        1245, 1585, 1024, 1213, 1663, 1166, 1574, 1152, 1286, 1251, 1690, 
        1689, 1188, 1648, 1128, 1223, 1669, 1668, 1221, 1293, 1174, 1639, 
        1172}], Line3DBox[{1143, 1583, 1064, 1038, 1070, 1623, 1141, 1584, 
        1068, 1235, 1678, 1073, 1561, 1093, 1600, 1022, 1185, 1018, 1573, 
        1044, 1664, 1082, 1557, 1228, 1215, 1568, 1020, 1578, 1029, 1012, 
        1633, 1053, 1271}], 
       Line3DBox[{1160, 1108, 1570, 1169, 1637, 1005, 1231, 1198, 1656, 1196, 
        1655, 1654, 1194, 1088, 1105, 1657, 1200, 1123, 1700, 1267, 1612, 
        1208, 1263, 1112, 1605, 1191, 1652, 1651, 1062, 1101, 1581, 1060, 
        1277}], Line3DBox[{1171, 1173, 1714, 1292, 1611, 1220, 1667, 1222, 
        1670, 1127, 1187, 1688, 1250, 1711, 1285, 1594, 1151, 1165, 1212, 
        1661, 1023, 1244, 1709, 1282, 1684, 1238, 1176, 1641, 1145, 1147, 
        1041, 1615, 1129}], 
       Line3DBox[{1205, 1158, 1643, 1180, 1644, 1181, 1715, 1294, 1716, 1027, 
        1216, 1665, 1030, 1558, 1290, 1098, 1121, 1035, 1261, 1696, 1094, 
        1567, 1036, 1079, 1596, 1139, 1622, 1086, 1624, 1144, 1001, 1272}], 
       Line3DBox[{1217, 1007, 1683, 1254, 1692, 1241, 1131, 1054, 1601, 1096, 
        1074, 1686, 1247, 1707, 1279, 1288, 1056, 1587, 1025, 1609, 1116, 
        1136, 1559, 1118, 1273, 1203, 1659, 1031, 1620, 1162, 1224}], 
       Line3DBox[{1225, 1671, 1163, 1032, 1204, 1571, 1274, 1704, 1119, 1137, 
        1610, 1117, 1026, 1057, 1712, 1289, 1604, 1280, 1248, 1075, 1563, 
        1097, 1055, 1616, 1132, 1562, 1242, 1255, 1008, 1666, 1218}], 
       Line3DBox[{1270, 1703, 1052, 1011, 1592, 1028, 1019, 1214, 1672, 1227, 
        1555, 1556, 1081, 1043, 1017, 1647, 1184, 1586, 1021, 1092, 1072, 
        1676, 1677, 1234, 1569, 1067, 1140, 1069, 1572, 1037, 1582, 1063, 
        1142}], Line3DBox[{1276, 1706, 1059, 1100, 1606, 1061, 1650, 1190, 
        1111, 1649, 1262, 1697, 1207, 1266, 1122, 1658, 1199, 1104, 1613, 
        1087, 1579, 1193, 1653, 1195, 1197, 1674, 1230, 1608, 1004, 1168, 
        1107, 1634, 1159}]}, {}, {}}},
    VertexNormals->CompressedData["
1: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
MoQ=
     "]], {}, {{}, {}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{498.6088410626764, 230.8514441357414},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{Full, Full, All},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-2.444030346532809, 2.2803480502154985`, 0.5260498408944827},
  ViewVertical->{0.11366861468013649`, -0.10605596785009769`, 
   0.9878418789057678}]], "Output",
 CellChangeTimes->{3.87706146389211*^9},
 CellLabel->
  "Out[130]=",ExpressionUUID->"6d86332a-c364-4e61-81b3-d9582dafd10d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["localization problem", "Subsubsection",
 CellChangeTimes->{{3.8770618468869267`*^9, 
  3.87706185297548*^9}},ExpressionUUID->"6e83bc5a-e1ae-4aa6-b384-\
5ee1cc080c73"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"7.5", ",", "1"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"11", ",", "1"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"12", ",", "1"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"18", ",", "1"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"13", ",", "2"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "3"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"6", ",", "3"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"7", ",", "3"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"8.5`", ",", "3"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"11", ",", "3"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"7", ",", "4"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"8.5`", ",", "4"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"10", ",", "4"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"5", ",", "5"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"7", ",", "5"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"8", ",", "5"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"10", ",", "5"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"11", ",", "5"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"16", ",", "5"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"6", ",", "6"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"9", ",", "6"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"10", ",", "6"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "7"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"5", ",", "7"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"8", ",", "7"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"15", ",", "7"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"20", ",", "7"}], "}"}], "->", "1"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "8"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "8"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"8", ",", "8"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"12", ",", "8"}], "}"}], "->", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"16", ",", "8"}], "}"}], "->", "1"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8770618627046766`*^9, 3.8770618627046766`*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"692fe0ed-f8d0-47c2-b86d-c02f2d96dd0e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"LightGray", ",", 
      RowBox[{"Rectangle", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"21", ",", "9"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"Replace", "[", 
     RowBox[{"data", ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"a_", "->", "b_"}], ")"}], ":>", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"GrayLevel", "[", 
          RowBox[{"1", "-", "b"}], "]"}], ",", 
         RowBox[{"Disk", "[", 
          RowBox[{"a", ",", ".25"}], "]"}]}], "}"}]}], ",", "All"}], "]"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770618797855268`*^9, 3.8770618797855268`*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"a89cd213-3adf-409f-9db0-24b5a04747b6"],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0.85], RectangleBox[{2, 0}, {21, 9}]}, {
    {GrayLevel[1], DiskBox[{7.5, 1}, 0.25]}, 
    {GrayLevel[0], DiskBox[{11, 1}, 0.25]}, 
    {GrayLevel[1], DiskBox[{12, 1}, 0.25]}, 
    {GrayLevel[0], DiskBox[{18, 1}, 0.25]}, 
    {GrayLevel[1], DiskBox[{13, 2}, 0.25]}, 
    {GrayLevel[1], DiskBox[{3, 3}, 0.25]}, 
    {GrayLevel[1], DiskBox[{6, 3}, 0.25]}, 
    {GrayLevel[1], DiskBox[{7, 3}, 0.25]}, 
    {GrayLevel[0], DiskBox[{8.5, 3}, 0.25]}, 
    {GrayLevel[1], DiskBox[{11, 3}, 0.25]}, 
    {GrayLevel[1], DiskBox[{3, 4}, 0.25]}, 
    {GrayLevel[1], DiskBox[{7, 4}, 0.25]}, 
    {GrayLevel[1], DiskBox[{8.5, 4}, 0.25]}, 
    {GrayLevel[1], DiskBox[{10, 4}, 0.25]}, 
    {GrayLevel[1], DiskBox[{5, 5}, 0.25]}, 
    {GrayLevel[1], DiskBox[{7, 5}, 0.25]}, 
    {GrayLevel[1], DiskBox[{8, 5}, 0.25]}, 
    {GrayLevel[0], DiskBox[{10, 5}, 0.25]}, 
    {GrayLevel[0], DiskBox[{11, 5}, 0.25]}, 
    {GrayLevel[0], DiskBox[{16, 5}, 0.25]}, 
    {GrayLevel[0], DiskBox[{6, 6}, 0.25]}, 
    {GrayLevel[0], DiskBox[{9, 6}, 0.25]}, 
    {GrayLevel[1], DiskBox[{10, 6}, 0.25]}, 
    {GrayLevel[1], DiskBox[{3, 7}, 0.25]}, 
    {GrayLevel[1], DiskBox[{5, 7}, 0.25]}, 
    {GrayLevel[0], DiskBox[{8, 7}, 0.25]}, 
    {GrayLevel[0], DiskBox[{15, 7}, 0.25]}, 
    {GrayLevel[0], DiskBox[{20, 7}, 0.25]}, 
    {GrayLevel[1], DiskBox[{3, 8}, 0.25]}, 
    {GrayLevel[1], DiskBox[{4, 8}, 0.25]}, 
    {GrayLevel[1], DiskBox[{8, 8}, 0.25]}, 
    {GrayLevel[1], DiskBox[{12, 8}, 0.25]}, 
    {GrayLevel[0], DiskBox[{16, 8}, 0.25]}}}]], "Output",
 CellChangeTimes->{3.877061882042801*^9},
 CellLabel->
  "Out[132]=",ExpressionUUID->"5d85c35a-4aad-48ea-a41c-a1d48a4524b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net1", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "4", "}"}], "]"}], ",", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "2", "}"}], "]"}], ",", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "2", "}"}]}], ",", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8770619858886395`*^9, 3.8770619858886395`*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"3791fdf1-8a93-4031-abfe-a4377b261075"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1}, "InputDepth" -> 1, "Multilabel" -> 
                    False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770619866195974`*^9},
 CellLabel->
  "Out[133]=",ExpressionUUID->"39622b7f-dac1-4562-b211-ff8ec449f32a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"netT1", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net1", ",", "data", ",", "All"}], "]"}]}], ";"}], "\n", 
 RowBox[{"netT1", "[", "\"\<LossPlot\>\"", "]"}], "\n", 
 RowBox[{"netT1", "[", "\"\<RoundMeasurements\>\"", "]"}], "\n", 
 RowBox[{"netF1", "=", 
  RowBox[{"netT1", "[", "\"\<TrainedNet\>\"", "]"}]}]}], "Input",
 CellChangeTimes->{{3.8770620629306674`*^9, 3.8770620629306674`*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"bec65395-f2c7-4997-aad3-9d1f6a92c48c"],

Cell[BoxData[GridBox[{
   {"", 
    ItemBox["\<\"rounds\"\>",
     DefaultBaseStyle->"LabeledLabel"]},
   {
    RotationBox[
     ItemBox["\<\"loss\"\>",
      DefaultBaseStyle->"LabeledLabel"],
     BoxRotation->1.5708], 
    GraphicsBox[
     {AbsoluteThickness[1.25], {
       {Hue[0.083, 1., 1.], LineBox[CompressedData["
1:eJxFWHlcjdkfDqEZQoNkGRWixTIohNFjFyVJyDKVFtpLmy1bCmXJEhJJm/bl
3tbb8t57I0s/Wq+xJMuIbMXIlsHvvOfcmbd/+jy97z3nuzzf5/nedDf4LHfp
qqKiMraLigr/+9+fgWYOmrlee8yuLtpT2l4MPMqPOlfXznEML8OrTyZuiuZr
nOGb2TEbB9pBtbu2/cLeN5XPHRAx8kiPx1W3uC9nHdONnjtj+cSukaNP1Sjf
d8PPo25POdinlltnNuJA4lwv2Hab+Wbkolrl532xfJN74tudtdwjv3ci9drN
CLybm6dbUKs8LwBqIf2/GLyq5X65XHfR/HsQTIu/j5ugU6c8fysG/MgIfrCi
jpurKYoKG7sdp+ePKlEcrFPeFwLbepvhYyrquMBNx3fJ1uzCIMsxoenv6pT3
70bNU6OHZqPqOZv1pkU7L++Bv0qMVi/bemU8e2GfMDhbtK+e8wxPyz53PxSB
f1ZvqRbXK+Pbh8su4dahj+u5sJzBKZK/w9DquTZSot6gjDccb7SNDtpPa+Di
7hw8f+enA6jSkuTIHBqU8R/ESI/X8sD9DVxRl86TH3Ui0HBs3edPmQ3KfCIx
b1JMXnJtA1dr6H5owLRDSJj9c9uHdw3K/A7jjlupaotGI/fC5l7oJKsjeP7y
ytv2CY3KfI/i1iXdzRlLGrk9s5J/158chczjiy3euzQq84/CBOuWKU47Gzl1
vgCzjsFyd3bPLtGNynocQ6sYF5rTGrmzGweaLFh8HPGtHWWyskZlfY7Dced9
h763GrnRO27+prA9gQWlAaf6Nzcq63UC9ll3Vl943ciJSTbOjifR3coo7/KX
RmX9TkKjJXzk+e4KzoyE994zGn4TIyZq9lMo6xmN442aXwMHK7jqkg8j9245
BfnLyLR2XYWyvqdwbt+O6AADBbf6Vpa2xr7T8K+IWKTym0JZ7zOwerPs2l0T
Bff0icvQ+KNnoNewvLNzukJZ/xjEd9O/42ym4Pw+/TpoQmwMPOTdHyyeq1D2
4yxqclybMhYouG+9bv9SkXIWM927uUaaK5T9icWKufv2qFsouAidI30sRbGY
6z7AffJShbJf52BbrhPWZZmC0zRZ8HNT+Tl0XDgxNMpaoezfeQxxueXyeLmC
SzD/3t3j+nl8tVns9MVGoexnHHxHa754vkLBTfijsEtnYxyeGlYtzbFVKPt7
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
AfuGYlU=
         "]]}, {}}, {
       {Hue[0.59, 0.7, 0.75], LineBox[{}]}, 
       {Hue[0.59, 0.7, 0.65], AbsolutePointSize[4.5], PointBox[{}]}}},
     AspectRatio->Full,
     Axes->None,
     Background->GrayLevel[1],
     BaseStyle->{
      FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
       ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
     Frame->True,
     FrameStyle->GrayLevel[0.5],
     FrameTicks->None,
     GridLines->{{2000., 4000., 6000., 8000., 10000.}, {{-1., 
         GrayLevel[0.3001]}, {0., 
         GrayLevel[0.3001]}, {-0.6989700043360187, 
         GrayLevel[0.8501]}, {-0.5228787452803375, 
         GrayLevel[0.8501]}, {-0.39794000867203755`, 
         GrayLevel[0.8501]}, {-0.30102999566398114`, 
         GrayLevel[0.8501]}, {-0.22184874961635626`, 
         GrayLevel[0.8501]}, {-0.1549019599857432, 
         GrayLevel[0.8501]}, {-0.09691001300805638, 
         GrayLevel[0.8501]}, {-0.04575749056067506, 
         GrayLevel[0.8501]}, {0.30102999566398114`, 
         GrayLevel[0.8501]}, {0.47712125471966244`, 
         GrayLevel[0.8501]}, {0.6020599913279623, 
         GrayLevel[0.8501]}, {0.6989700043360187, 
         GrayLevel[0.8501]}, {0.7781512503836435, 
         GrayLevel[0.8501]}, {0.8450980400142567, 
         GrayLevel[0.8501]}, {0.9030899869919434, 
         GrayLevel[0.8501]}, {0.9542425094393249, 
         GrayLevel[0.8501]}}},
     ImagePadding->1,
     ImageSize->{302, 182.},
     PlotRange->{{0, 10000.5}, {-0.7110000000000001, 0.41100000000000003`}},
     PlotRangeClipping->True,
     PlotRangePadding->None,
     Prolog->{{
        InsetBox[
         FormBox["2000", TraditionalForm], 
         Offset[{-2, -2}, {2000., 0.41100000000000003`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["4000", TraditionalForm], 
         Offset[{-2, -2}, {4000., 0.41100000000000003`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["6000", TraditionalForm], 
         Offset[{-2, -2}, {6000., 0.41100000000000003`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["8000", TraditionalForm], 
         Offset[{-2, -2}, {8000., 0.41100000000000003`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["10000", TraditionalForm], 
         Offset[{-2, -2}, {10000., 0.41100000000000003`}], 
         ImageScaled[{1., 1.}]]}, {
        InsetBox[
         FormBox["\"1\"", TraditionalForm], 
         Offset[{3, 0}, {0, 0.}], 
         ImageScaled[{0, 0.}]]}}]}
  },
  BaseStyle->{
   FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]},
  GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Center}}},
  GridBoxSpacings->{"Columns" -> {{0.5}}}]], "Output",
 CellChangeTimes->{3.8770620707467437`*^9},
 CellLabel->
  "Out[135]=",ExpressionUUID->"0d9d1959-5c14-495e-8c31-240859e74340"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.46391024135730485`"}], ",", 
   RowBox[{"\<\"ErrorRate\"\>", "\[Rule]", "0.24242424242424243`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8770620707512445`*^9},
 CellLabel->
  "Out[136]=",ExpressionUUID->"731196d7-c253-4136-9127-f5f929467809"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1}, "InputDepth" -> 1, "Multilabel" -> 
                    False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877062070757224*^9},
 CellLabel->
  "Out[137]=",ExpressionUUID->"ddf52f58-6ace-4231-ae8e-de9d2365c7eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"LightGray", ",", 
      RowBox[{"Rectangle", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"21", ",", "9"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"data", ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"a_", "->", "b_"}], ")"}], ":>", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"GrayLevel", "@", 
          RowBox[{
           RowBox[{"netF1", "[", 
            RowBox[{"a", ",", "\"\<Probabilities\>\""}], "]"}], "[", "0", 
           "]"}]}], ",", 
         RowBox[{"Disk", "[", 
          RowBox[{"a", ",", ".25"}], "]"}]}], "}"}]}], ",", "All"}], "]"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770620782323227`*^9, 3.8770620782333193`*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"0c61af5b-1f91-474b-9abe-7cf0d73a0e3c"],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0.85], RectangleBox[{2, 0}, {21, 9}]}, {
    {GrayLevel[0.884563148021698], DiskBox[{7.5, 1}, 0.25]}, 
    {GrayLevel[0.6632466316223145], DiskBox[{11, 1}, 0.25]}, 
    {GrayLevel[0.5719060301780701], DiskBox[{12, 1}, 0.25]}, 
    {GrayLevel[0.11513276398181915`], DiskBox[{18, 1}, 0.25]}, 
    {GrayLevel[0.42941102385520935`], DiskBox[{13, 2}, 0.25]}, 
    {GrayLevel[0.968066930770874], DiskBox[{3, 3}, 0.25]}, 
    {GrayLevel[0.9044060707092285], DiskBox[{6, 3}, 0.25]}, 
    {GrayLevel[0.8651809692382812], DiskBox[{7, 3}, 0.25]}, 
    {GrayLevel[0.7818976640701294], DiskBox[{8.5, 3}, 0.25]}, 
    {GrayLevel[0.5759939551353455], DiskBox[{11, 3}, 0.25]}, 
    {GrayLevel[0.9617987871170044], DiskBox[{3, 4}, 0.25]}, 
    {GrayLevel[0.842012882232666], DiskBox[{7, 4}, 0.25]}, 
    {GrayLevel[0.7485767602920532], DiskBox[{8.5, 4}, 0.25]}, 
    {GrayLevel[0.6245228052139282], DiskBox[{10, 4}, 0.25]}, 
    {GrayLevel[0.9058416485786438], DiskBox[{5, 5}, 0.25]}, 
    {GrayLevel[0.815711498260498], DiskBox[{7, 5}, 0.25]}, 
    {GrayLevel[0.7501466274261475], DiskBox[{8, 5}, 0.25]}, 
    {GrayLevel[0.5800714492797852], DiskBox[{10, 5}, 0.25]}, 
    {GrayLevel[0.4837314784526825], DiskBox[{11, 5}, 0.25]}, 
    {GrayLevel[0.11858309805393219`], DiskBox[{16, 5}, 0.25]}, 
    {GrayLevel[0.8442239761352539], DiskBox[{6, 6}, 0.25]}, 
    {GrayLevel[0.6284345984458923], DiskBox[{9, 6}, 0.25]}, 
    {GrayLevel[0.5342819690704346], DiskBox[{10, 6}, 0.25]}, 
    {GrayLevel[0.935158371925354], DiskBox[{3, 7}, 0.25]}, 
    {GrayLevel[0.8690333962440491], DiskBox[{5, 7}, 0.25]}, 
    {GrayLevel[0.6743547916412354], DiskBox[{8, 7}, 0.25]}, 
    {GrayLevel[0.12034161388874054`], DiskBox[{15, 7}, 0.25]}, 
    {GrayLevel[0.01926485076546669], DiskBox[{20, 7}, 0.25]}, 
    {GrayLevel[0.9229445457458496], DiskBox[{3, 8}, 0.25]}, 
    {GrayLevel[0.890404462814331], DiskBox[{4, 8}, 0.25]}, 
    {GrayLevel[0.6323296427726746], DiskBox[{8, 8}, 0.25]}, 
    {GrayLevel[0.2668953835964203], DiskBox[{12, 8}, 0.25]}, 
    {GrayLevel[0.07155217975378036], DiskBox[{16, 8}, 0.25]}}}]], "Output",
 CellChangeTimes->{3.8770620788180265`*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"06681c6d-e57a-44b0-9a5e-6bc4ec171e8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"LogisticSigmoid", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877062086497018*^9, 3.877062086497018*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"b52fae20-d87c-4f25-a255-06e1356f8201"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt1Hs0lHkcBvBBSiPzUlGSLm6rUhvVFOV8f+mqbZRJsRUzQ6tC1Jx1iVZu
bewqzkjGra2QinW31ri8LxqXXeU2rcuIXCYMMy875ZbVzp6zfzznOZ+/nv+e
ze5+zO9UKRQKQ5n/egfoSb98wYj0629OzXvxwG/OOHpuHiNCdITU8wE8KCi2
NFN8wgij5vqXRDgPrMwZ7h/GMWLtnyovn/J5sFcnqqe5EyOap67qCep5gIam
/kjOxwjN+nK6jUkCMO++ztnFwgjHnx/fSRtOgMCWqGuXq2nE4i9xFl0hiSAS
aUprOFpEckSELWIlgyHht3rv+hVEqL2EKk9Ph1LvV+rYOyoRIzlmXrvvCbBj
LSe7I5YT77Nzw5IPZ8IsLyQaBw3iSadBVgAvGzJoffr8gaWE7bpSy1JBDqSd
sOR2xKgTZ2fanEcPFECEDydoi/0SQtT29HxjUxGEqL0M5MpUiSG74wR3phQ4
YS0mfz1XIeb3D3zNdy2HxCoJP82LQiR1B5MykyoQ9JuvyDVaxK+YTBqslRBg
rI3snB59xhVlx7qSztVB0dZor8GhWdwytOhUikM99AsLN9Hp03ipm9TUN64J
JBaJVvhvCvx3a4/b7iPNoBP6gr5DZQq/yHap0PBrBQs6aZGlmMDpxe0pPX7t
EHlY1loeNIJzS/QW/etEoOuUF//tmkH84fX2uTU7O6FoWog1mvTgiYxXvIJ7
3ZAlltwbi3qD3zU/FrOwqxdcHdeXiD1KcNF06iV5eR+UU0Pe1voXAzmWNpqS
+h72DKpsCHdpga4zHERVDIDxZMWcTW03iJ5q2zptHwL7jO7XDi6DYFYy0TUV
MAxHGCvVPpWOgGDQQT83RwJxrM6wnWUT0LA0+Fl2xQdocDDUOr1yCijRP0yq
tYyAbLNuaHuKAh4tGFizKkfB//ttnDi9abAJC06i8Mags1eb6dk4C02VNbPe
l6TAvnlgZNnJz/Cj5irRGt1xqNu296c69UUo0KG26RLjYLa8cjTzOAVFSv0K
HzImwLDS+4h6tAq6/yB3LrxxAijzqi+4g6qIO876Ks1WBjOOVW5C0yWIHWe8
Y3W6DMS7WQamUerI5l6BQmNGBtedtXWMepei/vtZ/XsOyUH/wbDLEkMNNDi+
KrIoTA55Fx5nK4KWI0GYhelugRycbW8fb6yioqLcPI8Lo3IodLtmZLOgiRKr
ttXfwEiYpR5SKz+rhW4VN7DFu0hgtu2nG/JpKP7tkYyPp0mg7tesqUynIWG7
YMjHkYSazJ5vLmbQkGaHW8ew0juDbnJS82go30ytpoNJAm1jWay+kIZG+Bzx
r04kNPlYDen+TUNU633WZ1xIQBpb4mknMeSben7Og6XcvzG7Ls8RQ0l60vB2
pfPFDVkMZwzl9ElxxCZhQ75nRaw7hqa1VVzXc0hYOJv5gXoTQ6pk9aZWdxLK
MjbaLnuGoVv9BrNbPEnw1SIbnuVgqLbHQJ6gtFlgNfNoIYZEzpFp/yj94ITr
lTuVGDJLsjNuvUwCdyolQa0DQ3LP+Hc3rpKw9YLXhowuDFn5ilO7lR54Zf3C
rg9DenmLqw56kXCa31UdPoYhoUWUFeZNgobqc/vNJIYYzIPd/krj3oEi4iOG
VoTG2vQqHfD2KIs9j6E3/bxzdj4k/P9fKDg2fPtzpf8Fy2xjaQ==
       "]]},
     Annotation[#, "Charting`Private`Tag$841016#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-4, 4}, {0., 0.982013787154201}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.877062087120841*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"60cbe26e-1f1d-4553-90de-680892f73710"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "4", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       "LogisticSigmoid", ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "2", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "2", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8770621327531977`*^9, 3.8770621483260703`*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"8fc0d065-6f0b-42cb-b5d0-19757f885d59"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1}, "InputDepth" -> 1, "Multilabel" -> 
                    False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877062150935139*^9},
 CellLabel->
  "Out[140]=",ExpressionUUID->"33bd059f-b4b7-4892-98d6-7e9d92352ea9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"netT2", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net2", ",", "data", ",", "All"}], "]"}]}], ";"}], "\n", 
 RowBox[{"netT2", "[", "\"\<LossPlot\>\"", "]"}], "\n", 
 RowBox[{"netT2", "[", "\"\<RoundMeasurements\>\"", "]"}], "\n", 
 RowBox[{"netF2", "=", 
  RowBox[{"netT2", "[", "\"\<TrainedNet\>\"", "]"}]}]}], "Input",
 CellChangeTimes->{{3.877062153249615*^9, 3.877062153249615*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"cb1090a7-1c47-464d-b6da-88d7b67925e4"],

Cell[BoxData[GridBox[{
   {"", 
    ItemBox["\<\"rounds\"\>",
     DefaultBaseStyle->"LabeledLabel"]},
   {
    RotationBox[
     ItemBox["\<\"loss\"\>",
      DefaultBaseStyle->"LabeledLabel"],
     BoxRotation->1.5708], 
    GraphicsBox[
     {AbsoluteThickness[1.25], {
       {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
gf8Hwpnjrg==
         "]]}, {}}, {
       {Hue[0.59, 0.7, 0.75], LineBox[{}]}, 
       {Hue[0.59, 0.7, 0.65], AbsolutePointSize[4.5], PointBox[{}]}}},
     AspectRatio->Full,
     Axes->None,
     Background->GrayLevel[1],
     BaseStyle->{
      FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
       ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
     Frame->True,
     FrameStyle->GrayLevel[0.5],
     FrameTicks->None,
     GridLines->{{2000., 4000., 6000., 8000., 10000.}, {{-1., 
         GrayLevel[0.3001]}, {0., 
         GrayLevel[0.3001]}, {-0.6989700043360187, 
         GrayLevel[0.8501]}, {-0.5228787452803375, 
         GrayLevel[0.8501]}, {-0.39794000867203755`, 
         GrayLevel[0.8501]}, {-0.30102999566398114`, 
         GrayLevel[0.8501]}, {-0.22184874961635626`, 
         GrayLevel[0.8501]}, {-0.1549019599857432, 
         GrayLevel[0.8501]}, {-0.09691001300805638, 
         GrayLevel[0.8501]}, {-0.04575749056067506, 
         GrayLevel[0.8501]}, {0.30102999566398114`, 
         GrayLevel[0.8501]}, {0.47712125471966244`, 
         GrayLevel[0.8501]}, {0.6020599913279623, 
         GrayLevel[0.8501]}, {0.6989700043360187, 
         GrayLevel[0.8501]}, {0.7781512503836435, 
         GrayLevel[0.8501]}, {0.8450980400142567, 
         GrayLevel[0.8501]}, {0.9030899869919434, 
         GrayLevel[0.8501]}, {0.9542425094393249, 
         GrayLevel[0.8501]}}},
     ImagePadding->1,
     ImageSize->{302, 182.},
     PlotRange->{{0, 10000.5}, {-0.911, 0.21100000000000002`}},
     PlotRangeClipping->True,
     PlotRangePadding->None,
     Prolog->{{
        InsetBox[
         FormBox["2000", TraditionalForm], 
         Offset[{-2, -2}, {2000., 0.21100000000000002`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["4000", TraditionalForm], 
         Offset[{-2, -2}, {4000., 0.21100000000000002`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["6000", TraditionalForm], 
         Offset[{-2, -2}, {6000., 0.21100000000000002`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["8000", TraditionalForm], 
         Offset[{-2, -2}, {8000., 0.21100000000000002`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["10000", TraditionalForm], 
         Offset[{-2, -2}, {10000., 0.21100000000000002`}], 
         ImageScaled[{1., 1.}]]}, {
        InsetBox[
         FormBox["\"1\"", TraditionalForm], 
         Offset[{3, 0}, {0, 0.}], 
         ImageScaled[{0, 0.}]]}}]}
  },
  BaseStyle->{
   FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]},
  GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Center}}},
  GridBoxSpacings->{"Columns" -> {{0.5}}}]], "Output",
 CellChangeTimes->{3.8770621607423463`*^9},
 CellLabel->
  "Out[142]=",ExpressionUUID->"f554e62b-383d-4da9-972e-be18f5e2bc8e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.3115703858163618`"}], ",", 
   RowBox[{"\<\"ErrorRate\"\>", "\[Rule]", "0.24242424242424243`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8770621607473297`*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"f0e94d89-6de2-4dad-93e4-6d65424479df"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 4}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1}, "InputDepth" -> 1, "Multilabel" -> 
                    False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770621607538157`*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"979bd0f4-f5ea-4de6-91cf-57a97e7ee739"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"LightGray", ",", 
      RowBox[{"Rectangle", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"21", ",", "9"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"data", ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"a_", "->", "b_"}], ")"}], ":>", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"GrayLevel", "@", 
          RowBox[{
           RowBox[{"netF2", "[", 
            RowBox[{"a", ",", "\"\<Probabilities\>\""}], "]"}], "[", "0", 
           "]"}]}], ",", 
         RowBox[{"Disk", "[", 
          RowBox[{"a", ",", ".25"}], "]"}]}], "}"}]}], ",", "All"}], "]"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8770621653453083`*^9, 3.8770621653453083`*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"425d7a78-bb35-4c63-9754-1231bb3d93f6"],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0.85], RectangleBox[{2, 0}, {21, 9}]}, {
    {GrayLevel[0.9352226853370667], DiskBox[{7.5, 1}, 0.25]}, 
    {GrayLevel[0.6246207356452942], DiskBox[{11, 1}, 0.25]}, 
    {GrayLevel[0.6054896116256714], DiskBox[{12, 1}, 0.25]}, 
    {GrayLevel[0.591927707195282], DiskBox[{18, 1}, 0.25]}, 
    {GrayLevel[0.5922336578369141], DiskBox[{13, 2}, 0.25]}, 
    {GrayLevel[0.9999994039535522], DiskBox[{3, 3}, 0.25]}, 
    {GrayLevel[0.999950647354126], DiskBox[{6, 3}, 0.25]}, 
    {GrayLevel[0.976536214351654], DiskBox[{7, 3}, 0.25]}, 
    {GrayLevel[0.591029167175293], DiskBox[{8.5, 3}, 0.25]}, 
    {GrayLevel[0.578305721282959], DiskBox[{11, 3}, 0.25]}, 
    {GrayLevel[0.9999972581863403], DiskBox[{3, 4}, 0.25]}, 
    {GrayLevel[0.9998507499694824], DiskBox[{7, 4}, 0.25]}, 
    {GrayLevel[0.9274178743362427], DiskBox[{8.5, 4}, 0.25]}, 
    {GrayLevel[0.38289615511894226`], DiskBox[{10, 4}, 0.25]}, 
    {GrayLevel[0.9099125862121582], DiskBox[{5, 5}, 0.25]}, 
    {GrayLevel[0.9584656953811646], DiskBox[{7, 5}, 0.25]}, 
    {GrayLevel[0.973548173904419], DiskBox[{8, 5}, 0.25]}, 
    {GrayLevel[0.1177012100815773], DiskBox[{10, 5}, 0.25]}, 
    {GrayLevel[0.009661161340773106], DiskBox[{11, 5}, 0.25]}, 
    {GrayLevel[0.09671676903963089], DiskBox[{16, 5}, 0.25]}, 
    {GrayLevel[0.5433396697044373], DiskBox[{6, 6}, 0.25]}, 
    {GrayLevel[0.5980787873268127], DiskBox[{9, 6}, 0.25]}, 
    {GrayLevel[0.5797371864318848], DiskBox[{10, 6}, 0.25]}, 
    {GrayLevel[0.9988633394241333], DiskBox[{3, 7}, 0.25]}, 
    {GrayLevel[0.9967855215072632], DiskBox[{5, 7}, 0.25]}, 
    {GrayLevel[0.47736042737960815`], DiskBox[{8, 7}, 0.25]}, 
    {GrayLevel[0.00003730327443918213], DiskBox[{15, 7}, 0.25]}, 
    {GrayLevel[0.0000497972869197838], DiskBox[{20, 7}, 0.25]}, 
    {GrayLevel[0.9988424181938171], DiskBox[{3, 8}, 0.25]}, 
    {GrayLevel[0.9988409876823425], DiskBox[{4, 8}, 0.25]}, 
    {GrayLevel[0.469674676656723], DiskBox[{8, 8}, 0.25]}, 
    {GrayLevel[0.4678163230419159], DiskBox[{12, 8}, 0.25]}, 
    {GrayLevel[0.000033908690966200083`], 
     DiskBox[{16, 8}, 0.25]}}}]], "Output",
 CellChangeTimes->{3.877062165996504*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"d0fec37a-6cde-4d3d-b6ca-efa1a0c79a39"]
}, Open  ]],

Cell["non - linear optimization", "Text",
 CellChangeTimes->{{3.877062272127577*^9, 
  3.8770622844241014`*^9}},ExpressionUUID->"c635db95-1318-4a7f-bf15-\
d0a4e5874bf9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net3", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "8", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       "LogisticSigmoid", ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "8", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", "2", "}"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"{", "2", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8770622692084618`*^9, 3.8770623009737616`*^9}},
 CellLabel->
  "In[146]:=",ExpressionUUID->"53a87f6d-225a-4f6f-959e-4361870b5637"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{8, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{8, 8}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 8, "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 8}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 8, "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1}, "InputDepth" -> 1, "Multilabel" -> 
                    False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877062304984975*^9},
 CellLabel->
  "Out[146]=",ExpressionUUID->"c380b1a8-71d5-46df-b047-784bf7e913e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"netT3", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net3", ",", "data", ",", "All"}], "]"}]}], ";"}], "\n", 
 RowBox[{"netT3", "[", "\"\<LossPlot\>\"", "]"}], "\n", 
 RowBox[{"netT3", "[", "\"\<RoundMeasurements\>\"", "]"}], "\n", 
 RowBox[{"netF3", "=", 
  RowBox[{"netT3", "[", "\"\<TrainedNet\>\"", "]"}]}]}], "Input",
 CellChangeTimes->{{3.8770623071226597`*^9, 3.8770623071226597`*^9}},
 CellLabel->
  "In[147]:=",ExpressionUUID->"36212f79-4419-400b-8073-d02658b6ec39"],

Cell[BoxData[GridBox[{
   {"", 
    ItemBox["\<\"rounds\"\>",
     DefaultBaseStyle->"LabeledLabel"]},
   {
    RotationBox[
     ItemBox["\<\"loss\"\>",
      DefaultBaseStyle->"LabeledLabel"],
     BoxRotation->1.5708], 
    GraphicsBox[
     {AbsoluteThickness[1.25], {
       {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
8P1tYisVIcb/A2D3CiM=
         "]]}, {}}, {
       {Hue[0.59, 0.7, 0.75], LineBox[{}]}, 
       {Hue[0.59, 0.7, 0.65], AbsolutePointSize[4.5], PointBox[{}]}}},
     AspectRatio->Full,
     Axes->None,
     Background->GrayLevel[1],
     BaseStyle->{
      FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
       ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
     Frame->True,
     FrameStyle->GrayLevel[0.5],
     FrameTicks->None,
     GridLines->{{2000., 4000., 6000., 8000., 10000.}, {{-2., 
         GrayLevel[0.3001]}, {-1., 
         GrayLevel[0.3001]}, {-1.6989700043360185`, 
         GrayLevel[0.8501]}, {-1.5228787452803374`, 
         GrayLevel[0.8501]}, {-1.3979400086720375`, 
         GrayLevel[0.8501]}, {-1.301029995663981, 
         GrayLevel[0.8501]}, {-1.2218487496163564`, 
         GrayLevel[0.8501]}, {-1.154901959985743, 
         GrayLevel[0.8501]}, {-1.0969100130080565`, 
         GrayLevel[0.8501]}, {-1.045757490560675, 
         GrayLevel[0.8501]}, {-0.6989700043360187, 
         GrayLevel[0.8501]}, {-0.5228787452803375, 
         GrayLevel[0.8501]}, {-0.39794000867203755`, 
         GrayLevel[0.8501]}, {-0.30102999566398114`, 
         GrayLevel[0.8501]}, {-0.22184874961635626`, 
         GrayLevel[0.8501]}, {-0.1549019599857432, 
         GrayLevel[0.8501]}, {-0.09691001300805638, 
         GrayLevel[0.8501]}, {-0.04575749056067506, 
         GrayLevel[0.8501]}}},
     ImagePadding->1,
     ImageSize->{302, 182.},
     PlotRange->{{0, 10000.5}, {-1.211, -0.08900000000000001}},
     PlotRangeClipping->True,
     PlotRangePadding->None,
     Prolog->{{
        InsetBox[
         FormBox["2000", TraditionalForm], 
         Offset[{-2, -2}, {2000., -0.08900000000000001}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["4000", TraditionalForm], 
         Offset[{-2, -2}, {4000., -0.08900000000000001}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["6000", TraditionalForm], 
         Offset[{-2, -2}, {6000., -0.08900000000000001}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["8000", TraditionalForm], 
         Offset[{-2, -2}, {8000., -0.08900000000000001}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["10000", TraditionalForm], 
         Offset[{-2, -2}, {10000., -0.08900000000000001}], 
         ImageScaled[{1., 1.}]]}, {
        InsetBox[
         FormBox[
          
          TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
           SuperscriptBox], TraditionalForm], 
         Offset[{3, 0}, {0, -1.}], 
         ImageScaled[{0, 0.}]]}}]}
  },
  BaseStyle->{
   FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]},
  GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Center}}},
  GridBoxSpacings->{"Columns" -> {{0.5}}}]], "Output",
 CellChangeTimes->{3.877062315384747*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"48480df6-537a-43a8-ac5d-f0fbf7b62e8c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.07930251186057417`"}], ",", 
   RowBox[{"\<\"ErrorRate\"\>", "\[Rule]", "0.06060606060606061`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877062315390236*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"e083225c-604c-4871-a15f-47274e287cdc"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{8, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{8, 8}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 8, "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 8}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 8, "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1}, "InputDepth" -> 1, "Multilabel" -> 
                    False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877062315397215*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"763526bd-9802-4c70-97ee-61e4627c876c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"net4", "=", 
   RowBox[{"NetInitialize", "@", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", 
         RowBox[{"{", "8", "}"}], "]"}], ",", 
        RowBox[{"LinearLayer", "[", 
         RowBox[{"{", "8", "}"}], "]"}], ",", 
        RowBox[{"LinearLayer", "[", 
         RowBox[{"{", "2", "}"}], "]"}], ",", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
      RowBox[{"\"\<Input\>\"", "->", 
       RowBox[{"{", "2", "}"}]}], ",", 
      RowBox[{"\"\<Output\>\"", "->", 
       RowBox[{"NetDecoder", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Class\>\"", ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}]}], "]"}]}]}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"netT4", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net4", ",", "data", ",", "All"}], "]"}]}], "\n", 
 RowBox[{"netT4", "[", "\"\<LossPlot\>\"", "]"}], "\n", 
 RowBox[{"netT4", "[", "\"\<RoundMeasurements\>\"", "]"}], "\n", 
 RowBox[{
  RowBox[{"netF4", "=", 
   RowBox[{"netT4", "[", "\"\<TrainedNet\>\"", "]"}]}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"Graphics", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"LightGray", ",", 
      RowBox[{"Rectangle", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"21", ",", "9"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"Cases", "[", 
     RowBox[{"data", ",", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"a_", "->", "b_"}], ")"}], ":>", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"GrayLevel", "@", 
          RowBox[{
           RowBox[{"netF4", "[", 
            RowBox[{"a", ",", "\"\<Probabilities\>\""}], "]"}], "[", "0", 
           "]"}]}], ",", 
         RowBox[{"Disk", "[", 
          RowBox[{"a", ",", ".25"}], "]"}]}], "}"}]}], ",", "All"}], "]"}]}], 
   "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.87706242919619*^9, 3.87706242919619*^9}},
 CellLabel->
  "In[151]:=",ExpressionUUID->"3fdc4945-8d87-4fcc-a237-d0957afcedb1"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{8, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{8, 8}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 8, "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 8}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 8, "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1}, "InputDepth" -> 1, "Multilabel" -> 
                    False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8770624307374115`*^9},
 CellLabel->
  "Out[151]=",ExpressionUUID->"9ec795d1-dd84-4aeb-86e5-146e88d3a0c7"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   TagBox["NetTrainResultsObject",
    "SummaryHead"], "NonInterpretableSummary"], 
  StyleBox["[", "NonInterpretableSummary"], 
  FrameBox[GridBox[{
     {
      ItemBox[
       FrameBox[
        StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
         StripOnInput->False,
         FontSize->12],
        FrameMargins->{{10, 5}, {-4, 2}},
        FrameStyle->None,
        StripOnInput->False],
       Alignment->{Left, Bottom},
       Background->RGBColor[0.96, 0.96, 0.96],
       Frame->{{False, False}, {True, False}},
       FrameStyle->Opacity[0.1],
       ItemSize->{Automatic, 1},
       StripOnInput->False]},
     {
      ItemBox[
       TagBox[
        FrameBox[
         TagBox[GridBox[{
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["summary"], 
                 TextCell["summary"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batches:"], 
                  TextCell["batches:"]], "6885"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["rounds:"], 
                  TextCell["rounds:"]], "6884"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["time:"], 
                  TextCell["time:"]], 
                 InterpretationBox[
                  Cell["5.1s"], 
                  TextCell["5.1s"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["examples/s:"], 
                  TextCell["examples/s:"]], "44228"}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["data"], 
                 TextCell["data"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["training examples:"], 
                  TextCell["training examples:"]], "33"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["processed examples:"], 
                  TextCell["processed examples:"]], "227205"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["skipped examples:"], 
                  TextCell["skipped examples:"]], "0"}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["method"], 
                 TextCell["method"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["ADAM"], 
                  TextCell["ADAM"]], 
                 InterpretationBox[
                  Cell["optimizer"], 
                  TextCell["optimizer"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batch size"], 
                  TextCell["batch size"]], "33"}, "RowWithSeparators"], 
               InterpretationBox[
                Cell["CPU"], 
                TextCell["CPU"]]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["round"], 
                 TextCell["round"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"4.64\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
                    False], 0.46391021528027276`, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["error:"], 
                    TextCell["error:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                 InterpretationBox[
                  Cell["24.2%"], 
                  TextCell["24.2%"]]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             ItemBox[
              
              DynamicModuleBox[{NeuralNetworks`Private`NetTrain`index$$ = 1, 
               NeuralNetworks`Private`NetTrain`plotList$$ = {
                GeneralUtilities`TightLabeled[
                 Graphics[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1:eJxNmHdc01cXxgG1DopoWzeoyFCrlurrFuRhu9iW4UQUAbGiqIgLFVCw4mCI
gICEEVaAEJKQxJY4Wi2CCkIspdZXFGcVVxEVre/v3l/Kff3Hz7e/X5J7z3nO
8xxrEhDmGaino6MzWVdHh/z9759NQ/0vOpfVqn9uFCz8p88suLrF6SXlX9Gy
M8aeCRmYvbFO7bVyTnWUgwcqRtba+FnXa5/74NMBG8eGIVfVM5wG3Np7eQVm
uvrvWtZ5Vfv+GvRrE0bN/+OaOuHU9/vnm69Da1iv9thL17WfD0Jj8KhrXr4N
6g/6N7+oeRCCfOWlkj3XGrTftxEFOn0brZwb1Zv2zy+wLgpDqaghc19No/b7
t2Bhg2RO9rQb6rBdTadvS8NR+LmP1W+CG9rf24ZzyvHpuwc0qYukfQOzT25H
0vmCOfqhTdrf34HS6fuW+l5oUt/pmPfNqohI2JqkHhIYNmvPsxMH+pxSZno2
q0dM3Nxl7LMb51zmzwk+0qw93x7Yzs3wPqZqVnuszT/356wouKWfrWi706w9
7z6ECRJt139qVv/i+vRn14T9SBiQO3T2MI32/Afw2Gn45m0TNeq20EPF5R8O
wDL9/sSJszTa+0TjpWODi7OtRv0xfuyxgd/H4MebG02jFmi094uFam2/z0td
NOqRQlX4pj9j8XR4flywh0Z734NIm1e74JOXRj3z4lKfay6H0PTd9e0Xv9No
7x+Hhnhh8mtvjdqTFKAmDm+OKf1/8tFo6xGPRzm3gm19NepN5ADfHMaSRxnn
Ujnm63MYaz7WTr7K8ZGRpn06sn9AWdbUqOcc8/U6gtF2CfW9/TTqwlk/PXYx
TMDVn9f/M5hjvn4JmJlo/GQEx+R4ZfuOotk4WTGaY76exzDa8s4mE47/u+Wl
xODFMYz3/svIlGO+vsexq6zuKzOOoy7/Ujfz2xPQGLQVEebrfQITIOok/Dl3
3PWPTkD8wWGMud+/9U9EZFcJCGe0rxan5iTiJ7/XtoT5fiRCfnqAC+EJr0W5
l3yTUHtk+DLCfH+SsN9p8grCct33KW8GJUP3yM2VhPl+JUMMTz/CDoOc4yxq
k9GaWrmGMN+/FEyuCFlFuGl0yk7vAymYd/7dcsJ8P1NwsWkR5TVTuBPNOYkp
Lw98R5jv70kYLz8fQvg51y75y5NYFetMf4/vdyqET5bQ8+9dtNv9QXEqsuKz
3Qjz/T+FXy3yFxHW9/vVbmjAKcSV9Z9KmNfDKWy+nrGUcHrQkBlOI9Mw9PBq
D8K8PtIwq82I3nd8RMD4iBtpmNbnozthXi/pmHZdh74vi60YIfwhHQ+9hnsR
5vWTDsPFven5HJK5/2KXgdUORwMJ83rKQJnzWgfCN8hxuzOACY/mEeb1dRrB
YS20f/7i1Bczqk5D8EeIr3mP3jKh3y+G1q+j5t7dwNBMeHfvo+fj9ZcJv7rB
Swjvufqt5qRpFkKLIzzNe/SYBS+TGmfC5O1f/shCZpcFPT+vz2z4eH0IJpz2
5IqyMzkb93rv3mDeo9dseH7hSs9j8W6YyHzJGejGG/qb9+j3DOwT/6H6aY2Z
dv1rvRxsnqqhz3k956CmpZt+nwlp0Koc+FcYhZr36DsHHUPyaL+Dk/adX6bK
wbtVEifzHr3n4Ov3axcS5qqvCh8qwLu3U5cY9ehfgJeW/pfGcdyVU1/1Q7gA
XfoPrdk8CLCmfHwA4flkAK4JYNEYsYXNhwC5tn1iCB8kP/B1Llyfl8WzeclF
o/zjUcL1M3HmxqFcHDxnF83mJxc3TeYlEf6yZn3ak7u5GPjT0xQ2T3koWLXr
OOFljkcT9Wzy0D/V6Tibrzx01cecISzgjj/ydB4af4vOY/OWh+WeHvT9R15c
hbvy8Cpx4Uk2f/nw/z44jbDlHzp7F3nl48qDliw2j/m4l//oBGEi74CKfIy7
W5jJ5jMfv4pv0fc5tYXt0i+Ad1d7LpvXAjx/UEDP13vLtuCkoALEJu3NZPPL
8UvTYsKL32asKblYgOu6cRlsngtg3UuXMmnvhTFCdL5fc4zNtxDuMQ/p898/
4264Wwg8aq1g8y5E5u6lIsJctVxe/SbEWYtYMZv/QggdJUVUP9x4D5heCH0D
s2zmB4VYEfw1/b2KzOU2404UosX52djhPf5QiEUbLnYZc/zGNHr23KeFeHFy
/2WzHr8oQql9AZ1n69KiqZ4LitBRbRrM/KMIhgWe1E9jOflvyC+C2aGoVcxP
ipAg8KF+V6fsNI3WKUb34e6FzF+K8ehEmj3hL2yNjDNWFMOgy86N+U0xVFOk
9H1yHYmiGBZ67guY/xSjSR5An+e4hRhe+aoEdalbpzE/KkHQG71JhB/ePN7v
7uYS3I7t78z8qQSRlpH081y3dN/Xl3D9NbJiflUCi4pYG8Lb7996P3hiKeoc
V1sz/ypF5+gvpxP+cWOvvyceLEXGgRn/52el0K/sXkyYe/rMtq0UbXcmLmT+
JsLDFmvq36TdftYijFg3zI35nQjNGTJ63kS9Hf/dki7CM8M8B+Z/ItyseDeH
6udwVsvhThEWDR45nflhGR6a5dD6jh3MKcajDHUvRrozf+TY+VvqN0HEAMvK
oKjf5MT8sgxnHt+jflo+hvuC/uUIUrSHMP8sx6gp5rT/nULuQoHluDyFzxve
T8sx4cGyIMJWpMAXyvF6ekMg89dyWAUcpHkaQxo+ugKvtrhtYH5bga4lfane
rlhxAtxVAXsPxTLmvxWYZZ7sQ5hcb+HNCpyt7e3L/FgMk+DAsWR/EZlzFRkh
xtVRZ78d0+PPYmyL9m8kenfn5GPlLIbww99BzK/FCOo6T/2S2OGC7WKcuB7k
zfxbjPJwEe3PqRczLi7NE2NFacci5udidAa00frNnV6r9m8Uc/Mk9GD+Lsap
v03p+7d3rPhx4ycxxoUOdGR+X4nFEVupfx84+1wROaUS4rmetP+8/1fCTGpE
+2X+KVoWu7wSL95Po/rj86ASz9r96D5ExufE4UqsDfnNhuVDJcKnhFG9bOTi
ILO6El2thjYsLyqh7Cw0J2xIGnC/Ek9iBLNZflTCv18SnZcqg4ZC6ZcSqNcJ
57M8kUBuUErnxZsIxlaCyzWds1i+SLDSHvT7uLTIqQ+TwPLL3k4sbySwcqym
9+XUndWSJUGtq4U7yx8JBqncab2IfbTXSfCnXqkLyyMJwgaDft997rov3kkw
eIe9I8unKhS2bqPzFp9nn/xhfBVs0iPtWF5VoY/uUdqvycRAvKswpuOJHcuv
Knj32kg/z7lfwlexVRDutFzC8ox77nyXzvtWYniSKnjZxDiyfKtCRP7PVE9c
dw5OvlOF2P5lPizvqvC4r5zuByrOPmcPlEKwJ8aB5Z8U5y6YUaZysJIi8Hi3
LctDKW4vNaD7iS4JlA1SmI3Xd2f5KMWwFj/pQ27f56Z5x4o0KbfvnLs/tCcv
pTCYlvsZmY8FJAAvSeFmbebN8lOKv145UD/4y5l74W8ptm32DmV5KkPrpLk7
CR8/wh14nAwig+JAlq8yrL18meYFiY8EdxniF//iyvJWhouaIvqcjEtalAxO
m75axfJXhnvTEmi9dhGBiWSQti5bxvJYhm9uv48gbEwE3yrDgoKdviyfZRh7
u5vO13nu+j/2k2Nm32t+LK/lsM8aSf1sHTGEmXLYPO67meW3HKPygmh9+wVm
f9e8Tg7zdsFuludyPNieRutB4vNOkhzzB6SEsnyXY0h76PeE3Tg7eXpOjp0+
B7ewvJdDaDSc1veVpe/itx1ybLyiG8DyvxrP3RIOEU7dynXAuBri8JIwtg9U
Y6rdbvp5Io9Bi6thadXhx/aDajSJhtH9+s/3g22NdlbjzSH1JrYvVMOkZOV6
wsRuJxRWQ2/pfVoPfn+ohnFkIu2HGbc+TNdUw07XJpwwv09U461csI4wsVv0
UmCL4R3q7/x+oUDz7zXU/0P7r/7PkqkK5JfmXBrk9+++oUDsoKB3ezl9ctWw
9F2tgLqkZTn59ya/fyjgmmFiQ/RJxmfdUQX2tAR4sX1Egd5Bhlup/zQPn7j5
rALV/bpC2H6iwJOcNnpfEjd7Hivw9j+vqV75fUUJQ9Ez2s8srhzxw5SQfTY/
iuYP3V+UOCQIo/fl3Gp0iqMSBis99hHm9xkl3Oy99xJuvxs4KmerEjEl0QmE
+f1GiRLv7XGE40jgCZRo3uZJ909+31HiscvsUsKTOHtRXFdiUvYnug/z+48S
6Skz6D56rYwL6I9K/L72Et33+H1IhclxBnS/DOfitmGSChXXhtB9nt+PVLhb
4rCLMJHLLT8V4qNlVJ/8vqRCUPfeSMLKSE7RcSpE1N+g/eP3JxVcw6upflaQ
BUimQuGFX6n++H1KhcSrfWvEXP/o/6xqV+HlGyO9Jxz/D04uQxY=
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    Line[{}]}, {
                    AbsolutePointSize[4.5], 
                    Hue[0.59, 0.7, 0.65], 
                    Point[{}]}}}, Prolog -> {{
                    Text[2000, 
                    Offset[{-2, -2}, {2000., 0.31100000000000005`}], {1., 
                    1.}], 
                    Text[4000, 
                    Offset[{-2, -2}, {4000., 0.31100000000000005`}], {1., 
                    1.}], 
                    Text[6000, 
                    Offset[{-2, -2}, {6000., 0.31100000000000005`}], {1., 
                    1.}], 
                    Text[8000, 
                    Offset[{-2, -2}, {8000., 0.31100000000000005`}], {1., 
                    1.}], 
                    Text[10000, 
                    Offset[{-2, -2}, {10000., 0.31100000000000005`}], {1., 
                    1.}]}, {
                    Text["1", 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, 
                  PlotRange -> {{0, 6884.5}, {-0.811, 0.31100000000000005`}}, 
                  ImageSize -> {302, 182.}, 
                  GridLines -> {{2000., 4000., 6000., 8000., 10000.}, {{-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {-0.6989700043360187, 
                    GrayLevel[0.8501]}, {-0.5228787452803375, 
                    GrayLevel[0.8501]}, {-0.39794000867203755`, 
                    GrayLevel[0.8501]}, {-0.30102999566398114`, 
                    GrayLevel[0.8501]}, {-0.22184874961635626`, 
                    GrayLevel[0.8501]}, {-0.1549019599857432, 
                    GrayLevel[0.8501]}, {-0.09691001300805638, 
                    GrayLevel[0.8501]}, {-0.04575749056067506, 
                    GrayLevel[0.8501]}, {0.30102999566398114`, 
                    GrayLevel[0.8501]}, {0.47712125471966244`, 
                    GrayLevel[0.8501]}, {0.6020599913279623, 
                    GrayLevel[0.8501]}, {0.6989700043360187, 
                    GrayLevel[0.8501]}, {0.7781512503836435, 
                    GrayLevel[0.8501]}, {0.8450980400142567, 
                    GrayLevel[0.8501]}, {0.9030899869919434, 
                    GrayLevel[0.8501]}, {0.9542425094393249, 
                    GrayLevel[0.8501]}}}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRangePadding -> None, 
                  PlotRangeClipping -> True, Background -> GrayLevel[1], 
                  FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                  None], {None, "loss", "rounds"}], 
                GeneralUtilities`TightLabeled[
                 Graphics[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1:eJxd2HlYj1kUB/BfGSMaSxhGI1uTZN/KMvF7I7KVdbJlS8mSUqQkIaWVtEqU
slQomTaVphFiVCOlsm9NjKVJlkSTMfc6P/f7PK9/PB/l1/vee873nKfe1o5z
bNUVCsVANYWC//31TxfXl3nq2jeVl8rip/7XcpTk1Ne6eGJBpcpmUmxzYXrK
qUrl3CVjznqazpaCGx1Mhg+qUn19vmTdW3PhHxOqlIaT29zbdsVKano8+K2/
VoXq+1dIK8PMjW7b3FAG7V+/Y7yejWT4PiDPVbNc9f/tJOeySV2XbCpTNmtW
dcx/ukZyUpk+z17YYcf44+OSHIXp852EHd1vHHyQ4SzluWW5ZBaVqX7eJkmj
l35F297lyqSMVraxES6S/usR05qDvv58V/F8j+p+Hrx0s5swPc8W4W4GGxp1
5m8VpufzEJ8/e+Wx8/dHecqed7twoUXtJYugHZLF5VoL7aWlquffKbXo6VFf
0KpU+Xjd7hOnm2F6Hy/hT3699rZbv0uY3s9bWDsh19nhPkzv6yNsdHHe/Gvm
u4Xp/X2F5/ADyIfpPPyEHfgDDPYXpvOBA7V1W9bFBgjTeQUKJ4767bl5+yBh
Oj+YP17K9j3CdJ57hR86vU5rWw/T+QYLe14pLDYauk+Yzhv+jj3uqmcwnX+I
cHTNsjORcSGy+4D7vU0+cnlBqOx+4Cy1pvD3HcJk9wWbdjDz7Xs1THZ/4cI3
eoRvsdwZLrtPeMUg9kRjImT3C79i15X1OkJ235HC26ZtnfX0RKTs/vcL8y7u
Yg1TPcAH7L43nKwdJasPWH+ztf7mcpjq5YBwpndqt4QAmOoHNg1j/zIhWlZP
cDl/3H9hqq+DwsvPRNYbpsNUb4eE6/L/qrZdB1P9wR5/Dq2M0I2R1SPMv7vw
Lkz1GSsc9aIopyEMpnqF+37smqw347CsfuE7u4aX9lePk9Uz/CVml8JU3/Dq
0O0Fi3JhqneYnX6uc5d4Wf3DjXEl6QHOMPUDPJ43wDWY+gP24T+g/xFZv8Al
RtLh8t0w9Q/cKX9V1ItqmPrpqPCiSXtC1JUw9Rcczx5f+yBM/QY/m8tOuBGm
/jsmPOSuYtu0uTD1I8zL2zoVpv6EWbU5umsel/Ur/I3TptWhdjD1Lzz9Q/SK
kxdh6meYX++Fngmy/oZvf8vecCtM/Q6z0zJ/cxOm/k9E/bD2bjMSpjyAUw8t
VvbZB1M+wO91vUaPrYUpL5KEx51KGjZnCkz5AXuz8l97DKY8gYtzGnS9FCdk
+QJ3NOmuE20FU97A/HXSsmHKHzhu5pr2RZ1PyvII/rsqWKN6A0z5BLPbUmsq
gSmvYJcn95q0DE7J8gvOs2/xzsAHpjyD2Vf/MXkMU74lC/PrXjgOpryDQ9Rd
HzodgCn/4Nv+Mbf8G2DKwxTUjxarmNkw5SNsxwMwBaa8hE/3ZB/Q+rQsP+GG
BPZCtjDlKWzMD/gCTPkK7+IX3iNVlrdwkTErQHeY8hfmrze1CqY8PiOcrMdO
pBtM+QzPYuVjbAZTXsM8Dqe4wJTf8P56w4vzjsKU5/DYkVd/X14GU77DD1yt
8uw/w5T3vwrvPPcq220QTPkP6332yvReDNM8gHn77POHaT7A9mwcHDoL07yA
2/MLeALT/IDT215PzOiUJpsnsCUvGBOY5gvMpkVciSNM8wZm1R1zKwam+QPz
+KgphmkewU/Y69Z/hGk+pQv7HZ0Y1qwP07yCB/IAsYRpfsEs/YI6e8M0z+CN
PPDSYJpvMLsdn4GPYJp3cC6Lz9HtMmTzD/5SDsYwzUNYjQ+UtTDNR5h1s6tV
FEzzEp7CB+BlmOYn/NKMfcM7mOZppnBwIHvgPjDNV5iPj6BZMM1bmLdLlCdM
8xd25wWWDNM8hnV4wd+BaT7DBez18zSyZPMatuGBYATT/IY1bGN/qbCBaZ7D
fHw+CoVpvsMzWZzUnodp3sNvhiyY/qEOpvl/VjhyI7sBHZj2AZiXR4fpMO0H
8P0mLZPuW2DaF2Aet/0SYdof4J/Y+jCyEqZ9AuZxK7XIFqb9Al7XetmIGcNg
2jdgdhpDFiyDaf+AefvY7IFpH4EtK34w2HAOpv0E5uPG4zlM+0oO8ocdh19X
mPYXmKVVj/BJMO0zcE217Y9xG2Hab2BfPvDiYdp34AEsXrJLYdp/4GspbEB/
gmkfyhV2ZuP2+gCY9iOYl8u9hTDtS3COG6toX5j2J9iKL0CZMO1T8JdfVtXk
Si1V/h8mLofM
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    Line[{}]}, {
                    AbsolutePointSize[4.5], 
                    Hue[0.59, 0.7, 0.65], 
                    Point[{}]}}}, Prolog -> {{
                    Text[2000, 
                    Offset[{-2, -2}, {2000., 0.4040000000000001}], {1., 1.}], 
                    Text[4000, 
                    Offset[{-2, -2}, {4000., 0.4040000000000001}], {1., 1.}], 
                    Text[6000, 
                    Offset[{-2, -2}, {6000., 0.4040000000000001}], {1., 1.}], 
                    Text[8000, 
                    Offset[{-2, -2}, {8000., 0.4040000000000001}], {1., 1.}], 
                    Text[10000, 
                    Offset[{-2, -2}, {10000., 0.4040000000000001}], {1., 
                    1.}]}, {
                    Text[
                    PercentForm[0.], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    Text[
                    PercentForm[0.1], 
                    Offset[{3, 0}, {0, 0.1}], {-1, -1.}], 
                    Text[
                    PercentForm[0.2], 
                    Offset[{3, 0}, {0, 0.2}], {-1, -1.}], 
                    Text[
                    PercentForm[0.3], 
                    Offset[{3, 0}, {0, 0.3}], {-1, -1.}]}}, 
                  PlotRange -> {{0, 6884.5}, {-0.004000000000000001, 
                    0.4040000000000001}}, ImageSize -> {302, 182.}, 
                  GridLines -> {{2000., 4000., 6000., 8000., 10000.}, {{0., 
                    GrayLevel[0.8501]}, {0.02, 
                    GrayLevel[0.8501]}, {0.04, 
                    GrayLevel[0.8501]}, {0.06, 
                    GrayLevel[0.8501]}, {0.08, 
                    GrayLevel[0.8501]}, {0.1, 
                    GrayLevel[0.8501]}, {0.1, 
                    GrayLevel[0.8501]}, {0.12, 
                    GrayLevel[0.8501]}, {0.14, 
                    GrayLevel[0.8501]}, {0.16, 
                    GrayLevel[0.8501]}, {0.18, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.22, 
                    GrayLevel[0.8501]}, {0.24, 
                    GrayLevel[0.8501]}, {0.26, 
                    GrayLevel[0.8501]}, {0.28, 
                    GrayLevel[0.8501]}, {0.3, 
                    GrayLevel[0.8501]}, {0.3, 
                    GrayLevel[0.8501]}, {0.32, 
                    GrayLevel[0.8501]}, {0.34, 
                    GrayLevel[0.8501]}, {0.36, 
                    GrayLevel[0.8501]}, {0.38, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.42, 
                    GrayLevel[0.8501]}, {0.44, 
                    GrayLevel[0.8501]}, {0.46, 
                    GrayLevel[0.8501]}, {0.48, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.3001]}, {0.1, 
                    GrayLevel[0.3001]}, {0.2, 
                    GrayLevel[0.3001]}, {0.3, 
                    GrayLevel[0.3001]}, {0.4, 
                    GrayLevel[0.3001]}, {0.5, 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRangePadding -> None, 
                  PlotRangeClipping -> True, Background -> GrayLevel[1], 
                  FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                  None], {None, "error rate", "rounds"}]}}, 
               TagBox[GridBox[{
                  {
                   DynamicBox[ToBoxes[
                    Grid[{{
                    Button[
                    MouseAppearance[
                    Style["\:2039", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ - 1, 2, 1], 
                    Appearance -> None], 
                    Dynamic[
                    Part[{
                    Tooltip["loss", 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}]], 
                    Tooltip["error rate", 
                    Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}]]}, 
                    NeuralNetworks`Private`NetTrain`index$$], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetTrain`index$$}], 
                    Button[
                    MouseAppearance[
                    Style["\:203a", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ + 1, 2, 1], 
                    Appearance -> None]}}, ItemSize -> {{3, 20, 3}, {2}}, 
                    Alignment -> Center], StandardForm],
                    
                    ImageSizeCache->{
                    267., {9.158691344666295, 14.841308655333705`}},
                    
                    TrackedSymbols:>{
                    NeuralNetworks`Private`NetTrain`index$$}]},
                  {
                   DynamicBox[ToBoxes[
                    Part[
                    NeuralNetworks`Private`NetTrain`plotList$$, 
                    NeuralNetworks`Private`NetTrain`index$$], StandardForm],
                    
                    ImageSizeCache->{
                    313., {94.53359368841629, 98.6664063115837}},
                    TrackedSymbols:>{NeuralNetworks`Private`NetTrain`index$$}]}
                 },
                 DefaultBaseStyle->"Column",
                 GridBoxAlignment->{"Columns" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               DynamicModuleValues:>{}],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"},
            {
             ItemBox[
              
              InterpretationBox[Cell[
               "",ExpressionUUID->"38dfb017-88cc-482b-9b1a-45ee5b54af20"],
               TextCell[""]],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           ColumnsEqual->False,
           
           GridBoxAlignment->{
            "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
           GridBoxDividers->{"Columns" -> {False, {
                Opacity[0.15]}, False}},
           GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], 
               Offset[1.1199999999999999`], {
                Offset[1.75]}, 
               Offset[0.27999999999999997`]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.8]}, 
               Offset[0.2]}}],
          "Grid"],
         FrameMargins->{{10, 10}, {10, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       Alignment->Center,
       BaseStyle->{
        FontWeight -> "Light", FontSize -> 11, FontFamily -> 
         "Microsoft YaHei UI", NumberMarks -> False, Deployed -> False},
       StripOnInput->False]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], 
        Offset[0.8], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Background->GrayLevel[1],
   FrameMargins->{{0, 0}, {0, 0}},
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False], 
  StyleBox["]", "NonInterpretableSummary"]}]], "Output",
 CellChangeTimes->{3.877062435970874*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"48230029-bf26-45f0-a6bf-a15a9582c867"],

Cell[BoxData[GridBox[{
   {"", 
    ItemBox["\<\"rounds\"\>",
     DefaultBaseStyle->"LabeledLabel"]},
   {
    RotationBox[
     ItemBox["\<\"loss\"\>",
      DefaultBaseStyle->"LabeledLabel"],
     BoxRotation->1.5708], 
    GraphicsBox[
     {AbsoluteThickness[1.25], {
       {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
         "]]}, {}}, {
       {Hue[0.59, 0.7, 0.75], LineBox[{}]}, 
       {Hue[0.59, 0.7, 0.65], AbsolutePointSize[4.5], PointBox[{}]}}},
     AspectRatio->Full,
     Axes->None,
     Background->GrayLevel[1],
     BaseStyle->{
      FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
       ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6},
     Frame->True,
     FrameStyle->GrayLevel[0.5],
     FrameTicks->None,
     GridLines->{{2000., 4000., 6000., 8000., 10000.}, {{-1., 
         GrayLevel[0.3001]}, {0., 
         GrayLevel[0.3001]}, {-0.6989700043360187, 
         GrayLevel[0.8501]}, {-0.5228787452803375, 
         GrayLevel[0.8501]}, {-0.39794000867203755`, 
         GrayLevel[0.8501]}, {-0.30102999566398114`, 
         GrayLevel[0.8501]}, {-0.22184874961635626`, 
         GrayLevel[0.8501]}, {-0.1549019599857432, 
         GrayLevel[0.8501]}, {-0.09691001300805638, 
         GrayLevel[0.8501]}, {-0.04575749056067506, 
         GrayLevel[0.8501]}, {0.30102999566398114`, 
         GrayLevel[0.8501]}, {0.47712125471966244`, 
         GrayLevel[0.8501]}, {0.6020599913279623, 
         GrayLevel[0.8501]}, {0.6989700043360187, 
         GrayLevel[0.8501]}, {0.7781512503836435, 
         GrayLevel[0.8501]}, {0.8450980400142567, 
         GrayLevel[0.8501]}, {0.9030899869919434, 
         GrayLevel[0.8501]}, {0.9542425094393249, 
         GrayLevel[0.8501]}}},
     ImagePadding->1,
     ImageSize->{302, 182.},
     PlotRange->{{0, 6884.5}, {-0.811, 0.31100000000000005`}},
     PlotRangeClipping->True,
     PlotRangePadding->None,
     Prolog->{{
        InsetBox[
         FormBox["2000", TraditionalForm], 
         Offset[{-2, -2}, {2000., 0.31100000000000005`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["4000", TraditionalForm], 
         Offset[{-2, -2}, {4000., 0.31100000000000005`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["6000", TraditionalForm], 
         Offset[{-2, -2}, {6000., 0.31100000000000005`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["8000", TraditionalForm], 
         Offset[{-2, -2}, {8000., 0.31100000000000005`}], 
         ImageScaled[{1., 1.}]], 
        InsetBox[
         FormBox["10000", TraditionalForm], 
         Offset[{-2, -2}, {10000., 0.31100000000000005`}], 
         ImageScaled[{1., 1.}]]}, {
        InsetBox[
         FormBox["\"1\"", TraditionalForm], 
         Offset[{3, 0}, {0, 0.}], 
         ImageScaled[{0, 0.}]]}}]}
  },
  BaseStyle->{
   FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]},
  GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Center}}},
  GridBoxSpacings->{"Columns" -> {{0.5}}}]], "Output",
 CellChangeTimes->{3.877062436016287*^9},
 CellLabel->
  "Out[153]=",ExpressionUUID->"b2c851ce-43b1-4d6b-a582-9660dd08d1c6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Loss\"\>", "\[Rule]", "0.46391021528027276`"}], ",", 
   RowBox[{"\<\"ErrorRate\"\>", "\[Rule]", "0.24242424242424243`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877062436020859*^9},
 CellLabel->
  "Out[154]=",ExpressionUUID->"b2867af3-14f0-4549-b007-84fe167deaad"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{8, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{8, 8}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 8, "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 8}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 8, "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {0, 1}, "InputDepth" -> 1, "Multilabel" -> 
                    False, "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "13.0.3"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 8\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877062436027837*^9},
 CellLabel->
  "Out[155]=",ExpressionUUID->"f619a8c2-d760-4f4a-9800-a2ce9cdaaccc"],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0.85], RectangleBox[{2, 0}, {21, 9}]}, {
    {GrayLevel[0.8855273127555847], DiskBox[{7.5, 1}, 0.25]}, 
    {GrayLevel[0.6663450002670288], DiskBox[{11, 1}, 0.25]}, 
    {GrayLevel[0.5756155848503113], DiskBox[{12, 1}, 0.25]}, 
    {GrayLevel[0.1174718588590622], DiskBox[{18, 1}, 0.25]}, 
    {GrayLevel[0.43347176909446716`], DiskBox[{13, 2}, 0.25]}, 
    {GrayLevel[0.9681910872459412], DiskBox[{3, 3}, 0.25]}, 
    {GrayLevel[0.9050799012184143], DiskBox[{6, 3}, 0.25]}, 
    {GrayLevel[0.8662369847297668], DiskBox[{7, 3}, 0.25]}, 
    {GrayLevel[0.7837643623352051], DiskBox[{8.5, 3}, 0.25]}, 
    {GrayLevel[0.5794444680213928], DiskBox[{11, 3}, 0.25]}, 
    {GrayLevel[0.9619506597518921], DiskBox[{3, 4}, 0.25]}, 
    {GrayLevel[0.8432332873344421], DiskBox[{7, 4}, 0.25]}, 
    {GrayLevel[0.7506601214408875], DiskBox[{8.5, 4}, 0.25]}, 
    {GrayLevel[0.627565860748291], DiskBox[{10, 4}, 0.25]}, 
    {GrayLevel[0.9064193367958069], DiskBox[{5, 5}, 0.25]}, 
    {GrayLevel[0.8171088695526123], DiskBox[{7, 5}, 0.25]}, 
    {GrayLevel[0.7521257996559143], DiskBox[{8, 5}, 0.25]}, 
    {GrayLevel[0.5832633376121521], DiskBox[{10, 5}, 0.25]}, 
    {GrayLevel[0.4873240888118744], DiskBox[{11, 5}, 0.25]}, 
    {GrayLevel[0.12076470255851746`], DiskBox[{16, 5}, 0.25]}, 
    {GrayLevel[0.8452963829040527], DiskBox[{6, 6}, 0.25]}, 
    {GrayLevel[0.6312259435653687], DiskBox[{9, 6}, 0.25]}, 
    {GrayLevel[0.5375743508338928], DiskBox[{10, 6}, 0.25]}, 
    {GrayLevel[0.9354307651519775], DiskBox[{3, 7}, 0.25]}, 
    {GrayLevel[0.8698316812515259], DiskBox[{5, 7}, 0.25]}, 
    {GrayLevel[0.6767278909683228], DiskBox[{8, 7}, 0.25]}, 
    {GrayLevel[0.1224408894777298], DiskBox[{15, 7}, 0.25]}, 
    {GrayLevel[0.019762469455599785`], DiskBox[{20, 7}, 0.25]}, 
    {GrayLevel[0.9232725501060486], DiskBox[{3, 8}, 0.25]}, 
    {GrayLevel[0.8909776210784912], DiskBox[{4, 8}, 0.25]}, 
    {GrayLevel[0.6348710656166077], DiskBox[{8, 8}, 0.25]}, 
    {GrayLevel[0.27003899216651917`], DiskBox[{12, 8}, 0.25]}, 
    {GrayLevel[0.07296443730592728], DiskBox[{16, 8}, 0.25]}}}]], "Output",
 CellChangeTimes->{3.8770624360408154`*^9},
 CellLabel->
  "Out[156]=",ExpressionUUID->"d0e9bfa3-3cb0-4bf3-9e96-a7478b0d5436"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{702.75, 587.25},
WindowMargins->{{Automatic, -774.75}, {-310.5, Automatic}},
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (December 2, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"e01ef0df-7bc5-4d16-a0f1-f22823015a8f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 166, 3, 54, "Subsection",ExpressionUUID->"fe7a4a74-85dc-4919-beda-6d60fda050dc"],
Cell[CellGroupData[{
Cell[771, 29, 167, 3, 45, "Subsubsection",ExpressionUUID->"d30318ca-9adb-4a15-873c-35ecbddb517f"],
Cell[CellGroupData[{
Cell[963, 36, 379, 8, 28, "Input",ExpressionUUID->"5805a25f-2905-4a7d-839d-27b64ee0ad94"],
Cell[1345, 46, 52787, 969, 173, "Output",ExpressionUUID->"f5deaa3b-6f0f-42a9-8f26-7f5433395d10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54169, 1020, 368, 8, 28, "Input",ExpressionUUID->"d7e9c71b-3d25-4751-8062-d1de06043154"],
Cell[54540, 1030, 821, 19, 52, "Output",ExpressionUUID->"2d1fe053-5d23-4938-b10a-b5174be8d8c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55398, 1054, 355, 8, 28, "Input",ExpressionUUID->"de929394-8e1b-4341-874a-b0013c0b3856"],
Cell[55756, 1064, 245, 4, 32, "Output",ExpressionUUID->"4a87c707-ba1d-4967-bed5-541898758eae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56038, 1073, 347, 8, 48, "Input",ExpressionUUID->"d42dd6dd-56aa-40be-a2fe-a0e2e346b40d"],
Cell[56388, 1083, 319, 6, 32, "Output",ExpressionUUID->"140932e1-cd43-49ba-867d-a116faee49c8"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[56756, 1095, 158, 3, 37, "Subsubsection",ExpressionUUID->"8a0c8994-56ec-413c-97db-8d53b1611487"],
Cell[56917, 1100, 193, 3, 35, "Text",ExpressionUUID->"2e1b276b-6449-4563-8879-4f1bd625fdaf"],
Cell[57113, 1105, 571, 15, 28, "Input",ExpressionUUID->"1c739626-a87b-4e1b-a672-ffcc4ef83957"],
Cell[CellGroupData[{
Cell[57709, 1124, 197, 3, 28, "Input",ExpressionUUID->"399654d9-c1e4-49a0-a4d8-e10ad0a17400"],
Cell[57909, 1129, 525, 16, 32, "Output",ExpressionUUID->"18534869-f8c0-4b06-8e95-228d3f04789f"]
}, Open  ]],
Cell[58449, 1148, 220, 4, 35, "Text",ExpressionUUID->"7bab3f55-330c-4124-aafb-bb75a561eeee"],
Cell[58672, 1154, 373, 9, 48, "Input",ExpressionUUID->"68a4c4d1-cce5-4fb2-9e2f-654bdb580611"],
Cell[59048, 1165, 164, 3, 35, "Text",ExpressionUUID->"ddf46d74-13fc-4254-ade9-7cc325b45ac2"],
Cell[CellGroupData[{
Cell[59237, 1172, 728, 16, 105, "Input",ExpressionUUID->"48caaa7c-9a91-44a1-bb93-f5b57184c4b8"],
Cell[59968, 1190, 20607, 414, 252, "Output",ExpressionUUID->"086edf4c-ffcb-4918-8d86-b53d973a7892"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80612, 1609, 335, 8, 28, "Input",ExpressionUUID->"7ce0ec55-3df4-4e1c-8316-7869c6b60e91"],
Cell[80950, 1619, 406, 10, 32, "Output",ExpressionUUID->"77bb9285-1ec9-4c3b-ae7e-3f50eec18a85"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81393, 1634, 252, 5, 28, "Input",ExpressionUUID->"66a13f6b-600c-4485-af9e-019d94e85b13"],
Cell[81648, 1641, 191, 3, 32, "Output",ExpressionUUID->"82de3489-0e72-4162-80a1-b80991d00880"]
}, Open  ]],
Cell[81854, 1647, 163, 3, 35, "Text",ExpressionUUID->"f31aac2b-4ff5-45aa-ba12-c9661b8e137f"],
Cell[82020, 1652, 351, 7, 28, "Input",ExpressionUUID->"2ef65ea2-50b6-4152-b345-2a6ad635ddec"],
Cell[CellGroupData[{
Cell[82396, 1663, 217, 3, 28, "Input",ExpressionUUID->"be0000ae-d9e8-4dc8-af26-5ba791097e42"],
Cell[82616, 1668, 20626, 429, 213, "Output",ExpressionUUID->"ae241f31-d820-479d-b9a2-c270dec9af77"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103279, 2102, 226, 3, 28, "Input",ExpressionUUID->"87ab4840-2dd2-49e6-a42d-9ca872fa1d65"],
Cell[103508, 2107, 270, 5, 34, "Output",ExpressionUUID->"e1b28663-eeda-4613-a645-64fd92dd5176"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103815, 2117, 247, 4, 28, "Input",ExpressionUUID->"2b208e2c-374d-4d82-970b-7d7214a331ab"],
Cell[104065, 2123, 19861, 400, 84, "Output",ExpressionUUID->"9b0e7fe3-75a0-4a2d-b7d5-f4f6b4af7be9"]
}, Open  ]],
Cell[123941, 2526, 171, 3, 35, "Text",ExpressionUUID->"50b24e4b-c529-4dc8-bf39-7a890f22373a"],
Cell[CellGroupData[{
Cell[124137, 2533, 230, 4, 28, "Input",ExpressionUUID->"d67a9561-8f40-4d19-b59e-ee5beae30f6a"],
Cell[124370, 2539, 247, 6, 32, "Output",ExpressionUUID->"5dc2adb4-ab80-40d9-8c71-2283674a77a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124654, 2550, 184, 4, 28, "Input",ExpressionUUID->"e51a8102-ede9-4957-8c0c-50c9ee9e34bf"],
Cell[124841, 2556, 196, 4, 32, "Output",ExpressionUUID->"104809cb-790f-476d-8ba2-059bfa1a890d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125074, 2565, 334, 7, 28, "Input",ExpressionUUID->"8758853f-af4f-40d9-9d5f-cd527ac699ac"],
Cell[125411, 2574, 252, 4, 32, "Output",ExpressionUUID->"c9b945e8-8396-4a9a-bd44-7ec164a38d07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125700, 2583, 254, 5, 28, "Input",ExpressionUUID->"6000eacc-ef3c-4ffd-aaac-4192b9dc0352"],
Cell[125957, 2590, 214, 3, 32, "Output",ExpressionUUID->"714e89b1-5fee-4d54-8ace-7fab77e472bf"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[126220, 2599, 176, 3, 37, "Subsubsection",ExpressionUUID->"d2ebb9c7-87b6-4cc4-9b64-55a3146429d0"],
Cell[126399, 2604, 1464, 42, 162, "Input",ExpressionUUID->"818f7646-f67f-40fe-a95a-1721d1f32511"],
Cell[CellGroupData[{
Cell[127888, 2650, 202, 3, 28, "Input",ExpressionUUID->"7300d67a-1842-49b4-ac10-533531c39edc"],
Cell[128093, 2655, 516, 15, 32, "Output",ExpressionUUID->"f8f82de4-20bf-41d9-b338-fdd60e8995bf"]
}, Open  ]],
Cell[128624, 2673, 332, 8, 48, "Input",ExpressionUUID->"3b3fb2bc-2fa5-4472-949f-6c5a4bca0847"],
Cell[128959, 2683, 167, 3, 35, "Text",ExpressionUUID->"82069f4c-0847-48ab-85c1-f10e46bc1828"],
Cell[CellGroupData[{
Cell[129151, 2690, 1189, 25, 200, "Input",ExpressionUUID->"66575fde-bdf6-40bf-9b8b-6afa4f4acf0b"],
Cell[130343, 2717, 23377, 470, 232, "Output",ExpressionUUID->"43acd99f-5395-42d2-8629-aaf9a966ea85"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153757, 3192, 315, 6, 28, "Input",ExpressionUUID->"6c53aa3d-f967-4bc8-88ff-3b67b9271ed4"],
Cell[154075, 3200, 47338, 874, 123, "Output",ExpressionUUID->"274a07a3-6c98-4518-802e-d8f2ac802c5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201450, 4079, 380, 8, 28, "Input",ExpressionUUID->"1343c949-ff73-489a-a5e1-9e7efbe21c1b"],
Cell[201833, 4089, 1036, 23, 71, "Output",ExpressionUUID->"857b2734-6301-4a7a-be36-d4880c8002de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202906, 4117, 247, 5, 28, "Input",ExpressionUUID->"2871e8fe-1a7f-4831-9f52-9aa5e9aa13ff"],
Cell[203156, 4124, 184, 2, 32, "Output",ExpressionUUID->"8b014992-06a2-4cd8-9e36-41d33f31edb2"]
}, Open  ]],
Cell[203355, 4129, 347, 7, 28, "Input",ExpressionUUID->"2f8204fa-3be3-429a-92da-f0b8c8d43f87"],
Cell[CellGroupData[{
Cell[203727, 4140, 595, 11, 105, "Input",ExpressionUUID->"ea89877a-0bbf-4160-97c3-3c650956cfd3"],
Cell[204325, 4153, 19400, 389, 213, "Output",ExpressionUUID->"a42a857f-e5fd-4d89-b56f-5eee89a6b8e0"],
Cell[223728, 4544, 341, 7, 32, "Output",ExpressionUUID->"d343f75f-fad8-4aa3-abf6-553d2d00b138"],
Cell[224072, 4553, 22329, 447, 55, "Output",ExpressionUUID->"27f8a844-1532-4113-a7b0-039f70ffd71d"],
Cell[246404, 5002, 151, 2, 32, "Output",ExpressionUUID->"436ba66f-44b9-4302-b3b3-62ee5bd20bcd"],
Cell[246558, 5006, 3346, 83, 332, "Output",ExpressionUUID->"579a0cfd-4176-407a-8489-cc870f61dfba"]
}, Open  ]],
Cell[249919, 5092, 182, 4, 28, "Input",ExpressionUUID->"2571d43e-8542-4cdf-adfd-8ee20e76577c"],
Cell[CellGroupData[{
Cell[250126, 5100, 299, 7, 28, "Input",ExpressionUUID->"25649843-4de7-4b0a-abc0-a2eb9fa9209c"],
Cell[250428, 5109, 453, 8, 34, "Output",ExpressionUUID->"806654a6-bb8d-4be6-b85d-9df421fdb456"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[250930, 5123, 222, 4, 37, "Subsubsection",ExpressionUUID->"ec8706e0-d085-42fe-8e05-a5d92dd7eb5c"],
Cell[251155, 5129, 188, 3, 35, "Text",ExpressionUUID->"ea66b813-1a4a-4308-aa5f-61e3b6d0de3e"],
Cell[251346, 5134, 548, 13, 48, "Input",ExpressionUUID->"56aac923-8030-4a99-beda-a05b2a2b1d38"],
Cell[CellGroupData[{
Cell[251919, 5151, 273, 5, 28, "Input",ExpressionUUID->"9c0ff40d-e6a4-4ccc-a0bb-a80be80f6ba6"],
Cell[252195, 5158, 78446, 1437, 319, "Output",ExpressionUUID->"0c4ebb27-0b42-4b60-bddd-56f5d2a5c2ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[330678, 6600, 345, 8, 28, "Input",ExpressionUUID->"e6086cbf-53ab-457a-897f-a7ba29509001"],
Cell[331026, 6610, 862, 22, 43, "Output",ExpressionUUID->"90160d4e-5943-4753-b120-d82730c6b16b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331925, 6637, 200, 3, 28, "Input",ExpressionUUID->"95b064ab-a10e-4793-adab-742f36a3170d"],
Cell[332128, 6642, 158, 2, 32, "Output",ExpressionUUID->"b2b4b38a-c1af-4c59-86f0-fb8a814775de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[332323, 6649, 628, 18, 28, "Input",ExpressionUUID->"fc321dc0-8839-4f55-9c32-31cd43dd2b45"],
Cell[332954, 6669, 10657, 276, 194, "Output",ExpressionUUID->"df6a4588-39c4-429a-b1de-2cc12ec6efca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[343648, 6950, 325, 7, 28, "Input",ExpressionUUID->"4a682dc2-58f0-46cf-a873-1db9cae4b7b6"],
Cell[343976, 6959, 450, 12, 32, "Output",ExpressionUUID->"7be74790-84a1-469f-84f5-2f537ea1a1a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[344463, 6976, 204, 3, 28, "Input",ExpressionUUID->"ebdba6fb-a93d-4aac-9275-9a8e55da5e80"],
Cell[344670, 6981, 180, 2, 32, "Output",ExpressionUUID->"2d3a5376-5d65-476f-a3d5-3a16414fc635"]
}, Open  ]],
Cell[344865, 6986, 528, 14, 48, "Input",ExpressionUUID->"8919ad3b-8b54-45a4-a238-8f916bda099f"],
Cell[CellGroupData[{
Cell[345418, 7004, 971, 20, 200, "Input",ExpressionUUID->"88e55a42-c589-47c0-8369-287e41eb852f"],
Cell[346392, 7026, 22346, 447, 55, "Output",ExpressionUUID->"b05c6ec1-abcb-4c5c-96a2-268e5b0f7afc"]
}, Open  ]],
Cell[368753, 7476, 351, 7, 28, "Input",ExpressionUUID->"90ec77e7-b4df-4e95-9700-89edf8892b66"],
Cell[CellGroupData[{
Cell[369129, 7487, 370, 6, 67, "Input",ExpressionUUID->"5542db36-c537-4797-9263-8f731865622c"],
Cell[369502, 7495, 16964, 326, 213, "Output",ExpressionUUID->"bc057cf8-d29e-483d-b541-bb76fb8ff7d2"],
Cell[386469, 7823, 269, 5, 32, "Output",ExpressionUUID->"1d58e5e5-2dd6-46b3-a2f9-ed4675f14019"],
Cell[386741, 7830, 23092, 464, 148, "Output",ExpressionUUID->"83e0657c-a82a-419a-b8b0-343926a5cd09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[409870, 8299, 446, 13, 67, "Input",ExpressionUUID->"a9ab3acb-5295-45a0-b5c8-0ac3623045fa"],
Cell[410319, 8314, 342, 9, 32, "Output",ExpressionUUID->"f93a224b-9bef-4fd6-9d11-81da27259ea2"],
Cell[410664, 8325, 184, 3, 32, "Output",ExpressionUUID->"b1a0a019-0bf6-4fed-8d07-46a6dcac5073"]
}, Open  ]],
Cell[CellGroupData[{
Cell[410885, 8333, 437, 10, 28, "Input",ExpressionUUID->"185e9994-df24-4dff-bdd1-a01641e9a8de"],
Cell[411325, 8345, 219, 3, 32, "Output",ExpressionUUID->"96372d09-3600-4092-81ee-c41968ffcc6c"]
}, Open  ]],
Cell[411559, 8351, 562, 13, 48, "Input",ExpressionUUID->"7292be99-df1e-4ce2-9669-13d182230d59"],
Cell[CellGroupData[{
Cell[412146, 8368, 637, 18, 28, "Input",ExpressionUUID->"e2a45957-afed-4f03-a999-db3f49b1bc47"],
Cell[412786, 8388, 49051, 1496, 3191, "Output",ExpressionUUID->"950e0889-4ad4-402b-98ae-970cb5b76651"]
}, Open  ]],
Cell[CellGroupData[{
Cell[461874, 9889, 442, 10, 28, "Input",ExpressionUUID->"d4e22efe-99fa-4d1f-a260-0813b663704c"],
Cell[462319, 9901, 15079, 351, 226, "Output",ExpressionUUID->"28ada27f-5940-4cbc-a71f-f0ac531571d4"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[477447, 10258, 186, 3, 37, "Subsubsection",ExpressionUUID->"f3b172e9-da77-4f85-8581-950a0a6fcf0f"],
Cell[477636, 10263, 407, 10, 86, "Input",ExpressionUUID->"d40d12f9-278e-471d-893f-7b613c9098b6"],
Cell[CellGroupData[{
Cell[478068, 10277, 223, 4, 28, "Input",ExpressionUUID->"5017660f-e024-4a94-9cd0-4586f718c052"],
Cell[478294, 10283, 4000, 112, 242, "Output",ExpressionUUID->"998f8fb9-4cf4-43db-8122-b3b744a1f0d3"]
}, Open  ]],
Cell[482309, 10398, 502, 15, 28, "Input",ExpressionUUID->"991b38d8-22a7-46d4-8d53-3b0c4b0acd13"],
Cell[CellGroupData[{
Cell[482836, 10417, 234, 5, 28, "Input",ExpressionUUID->"eed7ab6d-6585-4049-8dad-cde2eaddbd7e"],
Cell[483073, 10424, 3149, 87, 185, "Output",ExpressionUUID->"c7f335e5-0f51-470b-874e-a010be0c6b16"]
}, Open  ]],
Cell[486237, 10514, 481, 14, 48, "Input",ExpressionUUID->"98f74e3e-0958-4ab3-a787-deea9b0d4e0a"],
Cell[CellGroupData[{
Cell[486743, 10532, 976, 21, 200, "Input",ExpressionUUID->"9a1f4c81-ec75-4ae5-a93c-939d628efa0e"],
Cell[487722, 10555, 23020, 464, 113, "Output",ExpressionUUID->"0eb91387-da6b-4331-8b38-4fa6808cd367"]
}, Open  ]],
Cell[510757, 11022, 357, 8, 28, "Input",ExpressionUUID->"2e422cce-efe2-4170-b5c0-089e33fc7346"],
Cell[CellGroupData[{
Cell[511139, 11034, 563, 12, 86, "Input",ExpressionUUID->"1a30aa48-8334-42e6-8b63-3a07f773fa89"],
Cell[511705, 11048, 16121, 315, 213, "Output",ExpressionUUID->"53bcad21-e041-4475-8d69-73b2efe746c0"],
Cell[527829, 11365, 271, 6, 32, "Output",ExpressionUUID->"e1637af1-22c4-4872-a54f-107d04d1ae1f"],
Cell[528103, 11373, 22352, 448, 55, "Output",ExpressionUUID->"b95a9135-084d-492f-9429-1a92ad2292bd"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[550504, 11827, 224, 4, 37, "Subsubsection",ExpressionUUID->"a6c901bd-f654-43c5-84ac-f273ac3a4482"],
Cell[550731, 11833, 697, 20, 48, "Input",ExpressionUUID->"e1fa3f1f-a35a-4165-b370-92dce2c39592"],
Cell[CellGroupData[{
Cell[551453, 11857, 260, 5, 28, "Input",ExpressionUUID->"f5002bc5-023f-454a-a1b8-4b3c171729ea"],
Cell[551716, 11864, 1305, 44, 52, "Output",ExpressionUUID->"dd4563fe-ee98-41e5-a7e2-fdcdba91269f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[553058, 11913, 466, 12, 28, "Input",ExpressionUUID->"a587884b-578b-42ba-aebb-c31685cf5585"],
Cell[553527, 11927, 113595, 1869, 385, 33346, 552, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"166744b2-6ca1-4ecc-bab4-cceec2f30c4c"]
}, Open  ]],
Cell[667137, 13799, 337, 9, 48, "Input",ExpressionUUID->"7761abb5-d0e6-4ce0-b1f6-ab6bbf510a43"],
Cell[667477, 13810, 168, 3, 35, "Text",ExpressionUUID->"55d627b8-4491-4638-b10d-f6389100071d"],
Cell[CellGroupData[{
Cell[667670, 13817, 341, 9, 28, "Input",ExpressionUUID->"9f0e26fc-0568-4439-8800-619c754fd604"],
Cell[668014, 13828, 3013, 70, 136, "Output",ExpressionUUID->"6df8d272-863e-4bfc-8569-145b59892cdc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[671064, 13903, 756, 19, 86, "Input",ExpressionUUID->"a4074ca5-49c1-434e-8223-4f5709262785"],
Cell[671823, 13924, 22370, 448, 55, "Output",ExpressionUUID->"3f8225ae-ecbf-4a9f-9708-a1514c6cf8a0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[694230, 14377, 773, 19, 86, "Input",ExpressionUUID->"e2b86dd7-b510-4cba-9673-ba27a6228c43"],
Cell[695006, 14398, 24054, 481, 55, "Output",ExpressionUUID->"eb4cbb8f-499c-409c-9465-878897809c78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[719097, 14884, 568, 12, 86, "Input",ExpressionUUID->"924f4d72-10a7-48d2-a16a-ab9143ec5b19"],
Cell[719668, 14898, 17207, 333, 213, "Output",ExpressionUUID->"05f4b227-988b-45b0-aa5a-e8547c081ae3"],
Cell[736878, 15233, 272, 6, 32, "Output",ExpressionUUID->"9cb7294c-5670-4337-83e2-88604648b056"],
Cell[737153, 15241, 22370, 448, 55, "Output",ExpressionUUID->"3aaef122-c7e7-4484-9f7a-ec35f25f22b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[759560, 15694, 466, 13, 28, "Input",ExpressionUUID->"6f617747-848f-4cd3-8dc3-4490f920c8a9"],
Cell[760029, 15709, 39039, 655, 195, "Output",ExpressionUUID->"8691735f-c45e-4fc1-8123-fb3bfbdb76ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[799105, 16369, 632, 13, 105, "Input",ExpressionUUID->"79559dd3-4cae-46f1-bbba-e2a14cc6a289"],
Cell[799740, 16384, 18617, 368, 213, "Output",ExpressionUUID->"e90e61ae-37e5-475c-9be2-fdc773532729"],
Cell[818360, 16754, 276, 6, 32, "Output",ExpressionUUID->"3372c4c8-5e18-4f10-8754-0cacf29645d5"],
Cell[818639, 16762, 24052, 481, 55, "Output",ExpressionUUID->"aea71c6f-ccb3-4463-9e93-b03518f5c4f9"],
Cell[842694, 17245, 165, 3, 32, "Output",ExpressionUUID->"e92bb96d-41ed-4356-a062-d798abe06054"]
}, Open  ]],
Cell[CellGroupData[{
Cell[842896, 17253, 492, 14, 28, "Input",ExpressionUUID->"9627bc3f-849e-4abc-8b5a-a73f335aaffc"],
Cell[843391, 17269, 55923, 924, 247, "Output",ExpressionUUID->"6d86332a-c364-4e61-81b3-d9582dafd10d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[899363, 18199, 172, 3, 45, "Subsubsection",ExpressionUUID->"6e83bc5a-e1ae-4aa6-b384-5ee1cc080c73"],
Cell[899538, 18204, 3313, 107, 124, "Input",ExpressionUUID->"692fe0ed-f8d0-47c2-b86d-c02f2d96dd0e"],
Cell[CellGroupData[{
Cell[902876, 18315, 878, 26, 48, "Input",ExpressionUUID->"a89cd213-3adf-409f-9db0-24b5a04747b6"],
Cell[903757, 18343, 1693, 38, 194, "Output",ExpressionUUID->"5d85c35a-4aad-48ea-a41c-a1d48a4524b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[905487, 18386, 839, 23, 67, "Input",ExpressionUUID->"3791fdf1-8a93-4031-abfe-a4377b261075"],
Cell[906329, 18411, 20604, 414, 55, "Output",ExpressionUUID->"39622b7f-dac1-4562-b211-ff8ec449f32a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[926970, 18830, 514, 11, 86, "Input",ExpressionUUID->"bec65395-f2c7-4997-aad3-9d1f6a92c48c"],
Cell[927487, 18843, 7832, 157, 212, "Output",ExpressionUUID->"0d9d1959-5c14-495e-8c31-240859e74340"],
Cell[935322, 19002, 363, 8, 32, "Output",ExpressionUUID->"731196d7-c253-4136-9127-f5f929467809"],
Cell[935688, 19012, 20602, 414, 55, "Output",ExpressionUUID->"ddf52f58-6ace-4231-ae8e-de9d2365c7eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[956327, 19431, 982, 29, 67, "Input",ExpressionUUID->"0c61af5b-1f91-474b-9abe-7cf0d73a0e3c"],
Cell[957312, 19462, 2260, 38, 194, "Output",ExpressionUUID->"06681c6d-e57a-44b0-9a5e-6bc4ec171e8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[959609, 19505, 352, 9, 28, "Input",ExpressionUUID->"b52fae20-d87c-4f25-a255-06e1356f8201"],
Cell[959964, 19516, 3445, 76, 242, "Output",ExpressionUUID->"60cbe26e-1f1d-4553-90de-680892f73710"]
}, Open  ]],
Cell[CellGroupData[{
Cell[963446, 19597, 1084, 25, 200, "Input",ExpressionUUID->"8fc0d065-6f0b-42cb-b5d0-19757f885d59"],
Cell[964533, 19624, 22323, 448, 55, "Output",ExpressionUUID->"33bd059f-b4b7-4892-98d6-7e9d92352ea9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[986893, 20077, 510, 11, 86, "Input",ExpressionUUID->"cb1090a7-1c47-464d-b6da-88d7b67925e4"],
Cell[987406, 20090, 8494, 168, 212, "Output",ExpressionUUID->"f554e62b-383d-4da9-972e-be18f5e2bc8e"],
Cell[995903, 20260, 362, 8, 32, "Output",ExpressionUUID->"f0e94d89-6de2-4dad-93e4-6d65424479df"],
Cell[996268, 20270, 22325, 448, 55, "Output",ExpressionUUID->"979bd0f4-f5ea-4de6-91cf-57a97e7ee739"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1018630, 20723, 982, 29, 67, "Input",ExpressionUUID->"425d7a78-bb35-4c63-9754-1231bb3d93f6"],
Cell[1019615, 20754, 2273, 39, 194, "Output",ExpressionUUID->"d0fec37a-6cde-4d3d-b6ca-efa1a0c79a39"]
}, Open  ]],
Cell[1021903, 20796, 169, 3, 35, "Text",ExpressionUUID->"c635db95-1318-4a7f-bf15-d0a4e5874bf9"],
Cell[CellGroupData[{
Cell[1022097, 20803, 1189, 27, 219, "Input",ExpressionUUID->"53a87f6d-225a-4f6f-959e-4361870b5637"],
Cell[1023289, 20832, 24188, 484, 55, "Output",ExpressionUUID->"c380b1a8-71d5-46df-b047-784bf7e913e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1047514, 21321, 514, 11, 86, "Input",ExpressionUUID->"36212f79-4419-400b-8073-d02658b6ec39"],
Cell[1048031, 21334, 8609, 171, 212, "Output",ExpressionUUID->"48480df6-537a-43a8-ac5d-f0fbf7b62e8c"],
Cell[1056643, 21507, 361, 8, 32, "Output",ExpressionUUID->"e083225c-604c-4871-a15f-47274e287cdc"],
Cell[1057007, 21517, 24188, 484, 55, "Output",ExpressionUUID->"763526bd-9802-4c70-97ee-61e4627c876c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1081232, 22006, 2147, 61, 257, "Input",ExpressionUUID->"3fdc4945-8d87-4fcc-a237-d0957afcedb1"],
Cell[1083382, 22069, 22469, 450, 55, "Output",ExpressionUUID->"9ec795d1-dd84-4aeb-86e5-146e88d3a0c7"],
Cell[1105854, 22521, 25498, 536, 449, "Output",ExpressionUUID->"48230029-bf26-45f0-a6bf-a15a9582c867"],
Cell[1131355, 23059, 7616, 153, 212, "Output",ExpressionUUID->"b2c851ce-43b1-4d6b-a582-9660dd08d1c6"],
Cell[1138974, 23214, 361, 8, 32, "Output",ExpressionUUID->"b2867af3-14f0-4549-b007-84fe167deaad"],
Cell[1139338, 23224, 22467, 450, 55, "Output",ExpressionUUID->"f619a8c2-d760-4f4a-9800-a2ce9cdaaccc"],
Cell[1161808, 23676, 2265, 38, 217, "Output",ExpressionUUID->"d0e9bfa3-3cb0-4bf3-9e96-a7478b0d5436"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

